{"ast":null,"code":"import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport GridLinesMixin from './mixins/grid-lines-mixin';\nimport CategoryAxis from './category-axis';\nimport ShapeBuilder from './shape-builder';\nimport Ring from './ring';\nimport Box from './box';\nimport { COORD_PRECISION, ARC } from '../common/constants';\nimport { deepExtend, getSpacing, inArray, limitValue, map, rad, round, setDefaultOptions } from '../common';\n\nvar RadarCategoryAxis = function (CategoryAxis) {\n  function RadarCategoryAxis() {\n    CategoryAxis.apply(this, arguments);\n  }\n\n  if (CategoryAxis) RadarCategoryAxis.__proto__ = CategoryAxis;\n  RadarCategoryAxis.prototype = Object.create(CategoryAxis && CategoryAxis.prototype);\n  RadarCategoryAxis.prototype.constructor = RadarCategoryAxis;\n\n  RadarCategoryAxis.prototype.range = function range() {\n    return {\n      min: 0,\n      max: this.options.categories.length\n    };\n  };\n\n  RadarCategoryAxis.prototype.reflow = function reflow(box) {\n    this.box = box;\n    this.reflowLabels();\n  };\n\n  RadarCategoryAxis.prototype.lineBox = function lineBox() {\n    return this.box;\n  };\n\n  RadarCategoryAxis.prototype.reflowLabels = function reflowLabels() {\n    var this$1 = this;\n    var ref = this;\n    var labels = ref.labels;\n    var labelOptions = ref.options.labels;\n    var skip = labelOptions.skip || 0;\n    var step = labelOptions.step || 1;\n    var measureBox = new Box();\n\n    for (var i = 0; i < labels.length; i++) {\n      labels[i].reflow(measureBox);\n      var labelBox = labels[i].box;\n      labels[i].reflow(this$1.getSlot(skip + i * step).adjacentBox(0, labelBox.width(), labelBox.height()));\n    }\n  };\n\n  RadarCategoryAxis.prototype.intervals = function intervals(size, skipOption, stepOption, skipAngles) {\n    if (skipAngles === void 0) skipAngles = false;\n    var options = this.options;\n    var categories = options.categories.length;\n    var divCount = categories / size || 1;\n    var divAngle = 360 / divCount;\n    var skip = skipOption || 0;\n    var step = stepOption || 1;\n    var divs = [];\n    var angle = 0;\n\n    for (var i = skip; i < divCount; i += step) {\n      if (options.reverse) {\n        angle = 360 - i * divAngle;\n      } else {\n        angle = i * divAngle;\n      }\n\n      angle = round(angle, COORD_PRECISION) % 360;\n\n      if (!(skipAngles && inArray(angle, skipAngles))) {\n        divs.push(angle);\n      }\n    }\n\n    return divs;\n  };\n\n  RadarCategoryAxis.prototype.majorIntervals = function majorIntervals() {\n    return this.intervals(1);\n  };\n\n  RadarCategoryAxis.prototype.minorIntervals = function minorIntervals() {\n    return this.intervals(0.5);\n  };\n\n  RadarCategoryAxis.prototype.intervalAngle = function intervalAngle(interval) {\n    return (360 + interval + this.options.startAngle) % 360;\n  };\n\n  RadarCategoryAxis.prototype.majorAngles = function majorAngles() {\n    var this$1 = this;\n    return map(this.majorIntervals(), function (interval) {\n      return this$1.intervalAngle(interval);\n    });\n  };\n\n  RadarCategoryAxis.prototype.createLine = function createLine() {\n    return [];\n  };\n\n  RadarCategoryAxis.prototype.majorGridLineAngles = function majorGridLineAngles(altAxis) {\n    var majorGridLines = this.options.majorGridLines;\n    return this.gridLineAngles(altAxis, 1, majorGridLines.skip, majorGridLines.step);\n  };\n\n  RadarCategoryAxis.prototype.minorGridLineAngles = function minorGridLineAngles(altAxis, skipMajor) {\n    var ref = this.options;\n    var minorGridLines = ref.minorGridLines;\n    var majorGridLines = ref.majorGridLines;\n    var majorGridLineAngles = skipMajor ? this.intervals(1, majorGridLines.skip, majorGridLines.step) : null;\n    return this.gridLineAngles(altAxis, 0.5, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);\n  };\n\n  RadarCategoryAxis.prototype.radiusCallback = function radiusCallback(radius, altAxis, skipMajor) {\n    if (altAxis.options.type !== ARC) {\n      var minorAngle = rad(360 / (this.options.categories.length * 2));\n      var minorRadius = Math.cos(minorAngle) * radius;\n      var majorAngles = this.majorAngles();\n\n      var radiusCallback = function radiusCallback(angle) {\n        if (!skipMajor && inArray(angle, majorAngles)) {\n          return radius;\n        }\n\n        return minorRadius;\n      };\n\n      return radiusCallback;\n    }\n  };\n\n  RadarCategoryAxis.prototype.createPlotBands = function createPlotBands() {\n    var this$1 = this;\n    var plotBands = this.options.plotBands || [];\n    var group = this._plotbandGroup = new draw.Group({\n      zIndex: -1\n    });\n\n    for (var i = 0; i < plotBands.length; i++) {\n      var band = plotBands[i];\n      var slot = this$1.plotBandSlot(band);\n      var singleSlot = this$1.getSlot(band.from);\n      var head = band.from - Math.floor(band.from);\n      slot.startAngle += head * singleSlot.angle;\n      var tail = Math.ceil(band.to) - band.to;\n      slot.angle -= (tail + head) * singleSlot.angle;\n      var ring = ShapeBuilder.current.createRing(slot, {\n        fill: {\n          color: band.color,\n          opacity: band.opacity\n        },\n        stroke: {\n          opacity: band.opacity\n        }\n      });\n      group.append(ring);\n    }\n\n    this.appendVisual(group);\n  };\n\n  RadarCategoryAxis.prototype.plotBandSlot = function plotBandSlot(band) {\n    return this.getSlot(band.from, band.to - 1);\n  };\n\n  RadarCategoryAxis.prototype.getSlot = function getSlot(from, to) {\n    var options = this.options;\n    var justified = options.justified;\n    var box = this.box;\n    var divs = this.majorAngles();\n    var totalDivs = divs.length;\n    var slotAngle = 360 / totalDivs;\n    var fromValue = from;\n\n    if (options.reverse && !justified) {\n      fromValue = (fromValue + 1) % totalDivs;\n    }\n\n    fromValue = limitValue(Math.floor(fromValue), 0, totalDivs - 1);\n    var slotStart = divs[fromValue];\n\n    if (justified) {\n      slotStart = slotStart - slotAngle / 2;\n\n      if (slotStart < 0) {\n        slotStart += 360;\n      }\n    }\n\n    var toValue = limitValue(Math.ceil(to || fromValue), fromValue, totalDivs - 1);\n    var slots = toValue - fromValue + 1;\n    var angle = slotAngle * slots;\n    return new Ring(box.center(), 0, box.height() / 2, slotStart, angle);\n  };\n\n  RadarCategoryAxis.prototype.slot = function slot(from, to) {\n    var slot = this.getSlot(from, to);\n    var startAngle = slot.startAngle + 180;\n    var endAngle = startAngle + slot.angle;\n    return new geom.Arc([slot.center.x, slot.center.y], {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radiusX: slot.radius,\n      radiusY: slot.radius\n    });\n  };\n\n  RadarCategoryAxis.prototype.pointCategoryIndex = function pointCategoryIndex(point) {\n    var this$1 = this;\n    var length = this.options.categories.length;\n    var index = null;\n\n    for (var i = 0; i < length; i++) {\n      var slot = this$1.getSlot(i);\n\n      if (slot.containsPoint(point)) {\n        index = i;\n        break;\n      }\n    }\n\n    return index;\n  };\n\n  return RadarCategoryAxis;\n}(CategoryAxis);\n\nsetDefaultOptions(RadarCategoryAxis, {\n  startAngle: 90,\n  labels: {\n    margin: getSpacing(10)\n  },\n  majorGridLines: {\n    visible: true\n  },\n  justified: true\n});\ndeepExtend(RadarCategoryAxis.prototype, GridLinesMixin);\nexport default RadarCategoryAxis;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/radar-category-axis.js"],"names":["geometry","geom","drawing","draw","GridLinesMixin","CategoryAxis","ShapeBuilder","Ring","Box","COORD_PRECISION","ARC","deepExtend","getSpacing","inArray","limitValue","map","rad","round","setDefaultOptions","RadarCategoryAxis","apply","arguments","__proto__","prototype","Object","create","constructor","range","min","max","options","categories","length","reflow","box","reflowLabels","lineBox","this$1","ref","labels","labelOptions","skip","step","measureBox","i","labelBox","getSlot","adjacentBox","width","height","intervals","size","skipOption","stepOption","skipAngles","divCount","divAngle","divs","angle","reverse","push","majorIntervals","minorIntervals","intervalAngle","interval","startAngle","majorAngles","createLine","majorGridLineAngles","altAxis","majorGridLines","gridLineAngles","minorGridLineAngles","skipMajor","minorGridLines","radiusCallback","radius","type","minorAngle","minorRadius","Math","cos","createPlotBands","plotBands","group","_plotbandGroup","Group","zIndex","band","slot","plotBandSlot","singleSlot","from","head","floor","tail","ceil","to","ring","current","createRing","fill","color","opacity","stroke","append","appendVisual","justified","totalDivs","slotAngle","fromValue","slotStart","toValue","slots","center","endAngle","Arc","x","y","radiusX","radiusY","pointCategoryIndex","point","index","containsPoint","margin","visible"],"mappings":"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","sourcesContent":["import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\n\nimport GridLinesMixin from './mixins/grid-lines-mixin';\nimport CategoryAxis from './category-axis';\nimport ShapeBuilder from './shape-builder';\nimport Ring from './ring';\nimport Box from './box';\n\nimport { COORD_PRECISION, ARC } from '../common/constants';\nimport { deepExtend, getSpacing, inArray, limitValue, map, rad, round, setDefaultOptions } from '../common';\n\nvar RadarCategoryAxis = (function (CategoryAxis) {\n    function RadarCategoryAxis () {\n        CategoryAxis.apply(this, arguments);\n    }\n\n    if ( CategoryAxis ) RadarCategoryAxis.__proto__ = CategoryAxis;\n    RadarCategoryAxis.prototype = Object.create( CategoryAxis && CategoryAxis.prototype );\n    RadarCategoryAxis.prototype.constructor = RadarCategoryAxis;\n\n    RadarCategoryAxis.prototype.range = function range () {\n        return { min: 0, max: this.options.categories.length };\n    };\n\n    RadarCategoryAxis.prototype.reflow = function reflow (box) {\n        this.box = box;\n        this.reflowLabels();\n    };\n\n    RadarCategoryAxis.prototype.lineBox = function lineBox () {\n        return this.box;\n    };\n\n    RadarCategoryAxis.prototype.reflowLabels = function reflowLabels () {\n        var this$1 = this;\n\n        var ref = this;\n        var labels = ref.labels;\n        var labelOptions = ref.options.labels;\n        var skip = labelOptions.skip || 0;\n        var step = labelOptions.step || 1;\n        var measureBox = new Box();\n\n        for (var i = 0; i < labels.length; i++) {\n            labels[i].reflow(measureBox);\n            var labelBox = labels[i].box;\n\n            labels[i].reflow(this$1.getSlot(skip + i * step).adjacentBox(\n                0, labelBox.width(), labelBox.height()\n            ));\n        }\n    };\n\n    RadarCategoryAxis.prototype.intervals = function intervals (size, skipOption, stepOption, skipAngles) {\n        if ( skipAngles === void 0 ) skipAngles = false;\n\n        var options = this.options;\n        var categories = options.categories.length;\n        var divCount = categories / size || 1;\n        var divAngle = 360 / divCount;\n        var skip = skipOption || 0;\n        var step = stepOption || 1;\n        var divs = [];\n        var angle = 0;\n\n        for (var i = skip; i < divCount; i += step) {\n            if (options.reverse) {\n                angle = 360 - i * divAngle;\n            } else {\n                angle = i * divAngle;\n            }\n\n            angle = round(angle, COORD_PRECISION) % 360;\n\n            if (!(skipAngles && inArray(angle, skipAngles))) {\n                divs.push(angle);\n            }\n        }\n\n        return divs;\n    };\n\n    RadarCategoryAxis.prototype.majorIntervals = function majorIntervals () {\n        return this.intervals(1);\n    };\n\n    RadarCategoryAxis.prototype.minorIntervals = function minorIntervals () {\n        return this.intervals(0.5);\n    };\n\n    RadarCategoryAxis.prototype.intervalAngle = function intervalAngle (interval) {\n        return (360 + interval + this.options.startAngle) % 360;\n    };\n\n    RadarCategoryAxis.prototype.majorAngles = function majorAngles () {\n        var this$1 = this;\n\n        return map(this.majorIntervals(), function (interval) { return this$1.intervalAngle(interval); });\n    };\n\n    RadarCategoryAxis.prototype.createLine = function createLine () {\n        return [];\n    };\n\n    RadarCategoryAxis.prototype.majorGridLineAngles = function majorGridLineAngles (altAxis) {\n        var majorGridLines = this.options.majorGridLines;\n        return this.gridLineAngles(altAxis, 1, majorGridLines.skip, majorGridLines.step);\n    };\n\n    RadarCategoryAxis.prototype.minorGridLineAngles = function minorGridLineAngles (altAxis, skipMajor) {\n        var ref = this.options;\n        var minorGridLines = ref.minorGridLines;\n        var majorGridLines = ref.majorGridLines;\n        var majorGridLineAngles = skipMajor ? this.intervals(1, majorGridLines.skip, majorGridLines.step) : null;\n\n        return this.gridLineAngles(altAxis, 0.5, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);\n    };\n\n    RadarCategoryAxis.prototype.radiusCallback = function radiusCallback (radius, altAxis, skipMajor) {\n        if (altAxis.options.type !== ARC) {\n            var minorAngle = rad(360 / (this.options.categories.length * 2));\n            var minorRadius = Math.cos(minorAngle) * radius;\n            var majorAngles = this.majorAngles();\n\n            var radiusCallback = function(angle) {\n                if (!skipMajor && inArray(angle, majorAngles)) {\n                    return radius;\n                }\n\n                return minorRadius;\n            };\n            return radiusCallback;\n        }\n    };\n\n    RadarCategoryAxis.prototype.createPlotBands = function createPlotBands () {\n        var this$1 = this;\n\n        var plotBands = this.options.plotBands || [];\n\n        var group = this._plotbandGroup = new draw.Group({\n            zIndex: -1\n        });\n\n        for (var i = 0; i < plotBands.length; i++) {\n            var band = plotBands[i];\n            var slot = this$1.plotBandSlot(band);\n            var singleSlot = this$1.getSlot(band.from);\n\n            var head = band.from - Math.floor(band.from);\n            slot.startAngle += head * singleSlot.angle;\n\n            var tail = Math.ceil(band.to) - band.to;\n            slot.angle -= (tail + head) * singleSlot.angle;\n\n            var ring = ShapeBuilder.current.createRing(slot, {\n                fill: {\n                    color: band.color,\n                    opacity: band.opacity\n                },\n                stroke: {\n                    opacity: band.opacity\n                }\n            });\n            group.append(ring);\n        }\n\n        this.appendVisual(group);\n    };\n\n    RadarCategoryAxis.prototype.plotBandSlot = function plotBandSlot (band) {\n        return this.getSlot(band.from, band.to - 1);\n    };\n\n    RadarCategoryAxis.prototype.getSlot = function getSlot (from, to) {\n        var options = this.options;\n        var justified = options.justified;\n        var box = this.box;\n        var divs = this.majorAngles();\n        var totalDivs = divs.length;\n        var slotAngle = 360 / totalDivs;\n        var fromValue = from;\n\n        if (options.reverse && !justified) {\n            fromValue = (fromValue + 1) % totalDivs;\n        }\n\n        fromValue = limitValue(Math.floor(fromValue), 0, totalDivs - 1);\n        var slotStart = divs[fromValue];\n\n        if (justified) {\n            slotStart = slotStart - slotAngle / 2;\n\n            if (slotStart < 0) {\n                slotStart += 360;\n            }\n        }\n\n        var toValue = limitValue(Math.ceil(to || fromValue), fromValue, totalDivs - 1);\n        var slots = toValue - fromValue + 1;\n        var angle = slotAngle * slots;\n\n        return new Ring(box.center(), 0, box.height() / 2, slotStart, angle);\n    };\n\n    RadarCategoryAxis.prototype.slot = function slot (from, to) {\n        var slot = this.getSlot(from, to);\n        var startAngle = slot.startAngle + 180;\n        var endAngle = startAngle + slot.angle;\n\n        return new geom.Arc([ slot.center.x, slot.center.y ], {\n            startAngle: startAngle,\n            endAngle: endAngle,\n            radiusX: slot.radius,\n            radiusY: slot.radius\n        });\n    };\n\n    RadarCategoryAxis.prototype.pointCategoryIndex = function pointCategoryIndex (point) {\n        var this$1 = this;\n\n        var length = this.options.categories.length;\n        var index = null;\n\n        for (var i = 0; i < length; i++) {\n            var slot = this$1.getSlot(i);\n            if (slot.containsPoint(point)) {\n                index = i;\n                break;\n            }\n        }\n\n        return index;\n    };\n\n    return RadarCategoryAxis;\n}(CategoryAxis));\n\nsetDefaultOptions(RadarCategoryAxis, {\n    startAngle: 90,\n    labels: {\n        margin: getSpacing(10)\n    },\n    majorGridLines: {\n        visible: true\n    },\n    justified: true\n});\ndeepExtend(RadarCategoryAxis.prototype, GridLinesMixin);\n\nexport default RadarCategoryAxis;"]},"metadata":{},"sourceType":"module"}