{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport TextBox from './text-box';\nimport Box from './box';\nimport rectToBox from './utils/rect-to-box';\nimport { AXIS_LABEL_CLICK, CENTER, TOP, BOTTOM, LEFT, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { eventElement, round, setDefaultOptions } from '../common';\n\nvar AxisLabel = function (TextBox) {\n  function AxisLabel(value, text, index, dataItem, options) {\n    TextBox.call(this, text, options);\n    this.text = text;\n    this.value = value;\n    this.index = index;\n    this.dataItem = dataItem;\n    this.reflow(new Box());\n  }\n\n  if (TextBox) AxisLabel.__proto__ = TextBox;\n  AxisLabel.prototype = Object.create(TextBox && TextBox.prototype);\n  AxisLabel.prototype.constructor = AxisLabel;\n\n  AxisLabel.prototype.visualContext = function visualContext(targetBox) {\n    var context = TextBox.prototype.visualContext.call(this, targetBox);\n    context.value = this.value;\n    context.dataItem = this.dataItem;\n    context.format = this.options.format;\n    context.culture = this.options.culture;\n    return context;\n  };\n\n  AxisLabel.prototype.click = function click(widget, e) {\n    widget.trigger(AXIS_LABEL_CLICK, {\n      element: eventElement(e),\n      value: this.value,\n      text: this.text,\n      index: this.index,\n      dataItem: this.dataItem,\n      axis: this.parent.options\n    });\n  };\n\n  AxisLabel.prototype.rotate = function rotate() {\n    if (this.options.alignRotation !== CENTER) {\n      var box = this.normalBox.toRect();\n      var transform = this.rotationTransform();\n      this.box = rectToBox(box.bbox(transform.matrix()));\n    } else {\n      TextBox.prototype.rotate.call(this);\n    }\n\n    return this.box;\n  };\n\n  AxisLabel.prototype.rotationTransform = function rotationTransform() {\n    var options = this.options;\n    var rotation = options.rotation;\n\n    if (!rotation) {\n      return null;\n    }\n\n    if (options.alignRotation === CENTER) {\n      return TextBox.prototype.rotationTransform.call(this);\n    }\n\n    var rotationMatrix = geom.transform().rotate(rotation).matrix();\n    var box = this.normalBox.toRect();\n    var rect = this.targetBox.toRect();\n    var rotationOrigin = options.rotationOrigin || TOP;\n    var alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;\n    var distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;\n    var axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();\n    var topLeft = box.topLeft().transformCopy(rotationMatrix);\n    var topRight = box.topRight().transformCopy(rotationMatrix);\n    var bottomRight = box.bottomRight().transformCopy(rotationMatrix);\n    var bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);\n    var rotatedBox = geom.Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);\n    var translate = {};\n    translate[distanceAxis] = rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis];\n    var distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n    var distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n    var alignStart, alignEnd;\n\n    if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {\n      alignStart = topLeft;\n      alignEnd = topRight;\n    } else if (distanceRight < distanceLeft) {\n      alignStart = topRight;\n      alignEnd = bottomRight;\n    } else {\n      alignStart = topLeft;\n      alignEnd = bottomLeft;\n    }\n\n    var alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;\n    translate[alignAxis] = rect.center()[alignAxis] - alignCenter;\n    return geom.transform().translate(translate.x, translate.y).rotate(rotation);\n  };\n\n  return AxisLabel;\n}(TextBox);\n\nsetDefaultOptions(AxisLabel, {\n  _autoReflow: false\n});\nexport default AxisLabel;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/axis-label.js"],"names":["geometry","geom","TextBox","Box","rectToBox","AXIS_LABEL_CLICK","CENTER","TOP","BOTTOM","LEFT","DEFAULT_PRECISION","X","Y","eventElement","round","setDefaultOptions","AxisLabel","value","text","index","dataItem","options","call","reflow","__proto__","prototype","Object","create","constructor","visualContext","targetBox","context","format","culture","click","widget","e","trigger","element","axis","parent","rotate","alignRotation","box","normalBox","toRect","transform","rotationTransform","bbox","matrix","rotation","rotationMatrix","rect","rotationOrigin","alignAxis","distanceAxis","axisAnchor","origin","bottomRight","topLeft","transformCopy","topRight","bottomLeft","rotatedBox","Rect","fromPoints","translate","distanceLeft","Math","abs","distanceRight","alignStart","alignEnd","alignCenter","center","x","y","_autoReflow"],"mappings":"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","sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\n\nimport TextBox from './text-box';\nimport Box from './box';\n\nimport rectToBox from './utils/rect-to-box';\n\nimport { AXIS_LABEL_CLICK, CENTER, TOP, BOTTOM, LEFT, DEFAULT_PRECISION, X, Y } from '../common/constants';\n\nimport { eventElement, round, setDefaultOptions } from '../common';\n\nvar AxisLabel = (function (TextBox) {\n    function AxisLabel(value, text, index, dataItem, options) {\n        TextBox.call(this, text, options);\n\n        this.text = text;\n        this.value = value;\n        this.index = index;\n        this.dataItem = dataItem;\n        this.reflow(new Box());\n    }\n\n    if ( TextBox ) AxisLabel.__proto__ = TextBox;\n    AxisLabel.prototype = Object.create( TextBox && TextBox.prototype );\n    AxisLabel.prototype.constructor = AxisLabel;\n\n    AxisLabel.prototype.visualContext = function visualContext (targetBox) {\n        var context = TextBox.prototype.visualContext.call(this, targetBox);\n\n        context.value = this.value;\n        context.dataItem = this.dataItem;\n        context.format = this.options.format;\n        context.culture = this.options.culture;\n\n        return context;\n    };\n\n    AxisLabel.prototype.click = function click (widget, e) {\n\n        widget.trigger(AXIS_LABEL_CLICK, {\n            element: eventElement(e),\n            value: this.value,\n            text: this.text,\n            index: this.index,\n            dataItem: this.dataItem,\n            axis: this.parent.options\n        });\n    };\n\n    AxisLabel.prototype.rotate = function rotate () {\n        if (this.options.alignRotation !== CENTER) {\n            var box = this.normalBox.toRect();\n            var transform = this.rotationTransform();\n\n            this.box = rectToBox(box.bbox(transform.matrix()));\n        } else {\n            TextBox.prototype.rotate.call(this);\n        }\n\n        return this.box;\n    };\n\n    AxisLabel.prototype.rotationTransform = function rotationTransform () {\n        var options = this.options;\n        var rotation = options.rotation;\n        if (!rotation) {\n            return null;\n        }\n\n        if (options.alignRotation === CENTER) {\n            return TextBox.prototype.rotationTransform.call(this);\n        }\n\n        var rotationMatrix = geom.transform().rotate(rotation).matrix();\n        var box = this.normalBox.toRect();\n        var rect = this.targetBox.toRect();\n\n        var rotationOrigin = options.rotationOrigin || TOP;\n        var alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;\n        var distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;\n        var axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();\n\n        var topLeft = box.topLeft().transformCopy(rotationMatrix);\n        var topRight = box.topRight().transformCopy(rotationMatrix);\n        var bottomRight = box.bottomRight().transformCopy(rotationMatrix);\n        var bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);\n        var rotatedBox = geom.Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);\n\n        var translate = {};\n        translate[distanceAxis] = rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis];\n\n        var distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n        var distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);\n\n        var alignStart, alignEnd;\n\n        if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {\n            alignStart = topLeft;\n            alignEnd = topRight;\n        } else if (distanceRight < distanceLeft) {\n            alignStart = topRight;\n            alignEnd = bottomRight;\n        } else {\n            alignStart = topLeft;\n            alignEnd = bottomLeft;\n        }\n\n        var alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;\n        translate[alignAxis] = rect.center()[alignAxis] - alignCenter;\n\n        return geom.transform()\n            .translate(translate.x, translate.y)\n            .rotate(rotation);\n    };\n\n    return AxisLabel;\n}(TextBox));\n\nsetDefaultOptions(AxisLabel, {\n    _autoReflow: false\n});\n\nexport default AxisLabel;\n"]},"metadata":{},"sourceType":"module"}