{"ast":null,"code":"import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { setDefaultOptions, deepExtend, limitValue } from '../../common';\nimport { ANGULAR_SPEED, DEGREE, DEFAULT_LINE_WIDTH, RADIAL_POINTER } from '../constants';\nimport Pointer from '../pointer';\nimport RadialPointerAnimation from './radial-pointer-animation';\nvar CAP_SIZE = 0.05;\nvar Circle = drawing.Circle;\nvar Group = drawing.Group;\nvar Path = drawing.Path;\n\nvar RadialPointer = function (Pointer) {\n  function RadialPointer() {\n    Pointer.apply(this, arguments);\n  }\n\n  if (Pointer) RadialPointer.__proto__ = Pointer;\n  RadialPointer.prototype = Object.create(Pointer && Pointer.prototype);\n  RadialPointer.prototype.constructor = RadialPointer;\n\n  RadialPointer.prototype.setAngle = function setAngle(angle) {\n    this.elements.transform(geo.transform().rotate(angle, this.center));\n  };\n\n  RadialPointer.prototype.repaint = function repaint() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var oldAngle = scale.slotAngle(options._oldValue);\n    var newAngle = scale.slotAngle(options.value);\n\n    if (options.animation.transitions === false) {\n      this.setAngle(newAngle);\n    } else {\n      new RadialPointerAnimation(this.elements, deepExtend(options.animation, {\n        oldAngle: oldAngle,\n        newAngle: newAngle\n      })).play();\n    }\n  };\n\n  RadialPointer.prototype.render = function render() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var elements = new Group();\n\n    if (options.animation !== false) {\n      deepExtend(options.animation, {\n        startAngle: 0,\n        center: scale.arc.center,\n        reverse: scale.options.reverse\n      });\n    }\n\n    elements.append(this._renderNeedle(), this._renderCap());\n    this.elements = elements;\n    this.setAngle(DEGREE);\n    return elements;\n  };\n\n  RadialPointer.prototype.reflow = function reflow(arc) {\n    var center = this.center = arc.center;\n    var length = limitValue(this.options.length || 1, 0.1, 1.5);\n    var radius = this.radius = arc.getRadiusX() * length;\n    var capSize = this.capSize = Math.round(radius * this.options.cap.size);\n    this.bbox = geo.Rect.fromPoints(new geo.Point(center.x - capSize, center.y - capSize), new geo.Point(center.x + capSize, center.y + capSize));\n  };\n\n  RadialPointer.prototype._renderNeedle = function _renderNeedle() {\n    var minorTickSize = this.scale.options.minorTicks.size;\n    var center = this.center;\n    var needleColor = this.options.color;\n    var needlePath = new Path({\n      fill: {\n        color: needleColor\n      },\n      stroke: {\n        color: needleColor,\n        width: DEFAULT_LINE_WIDTH\n      }\n    });\n    needlePath.moveTo(center.x + this.radius - minorTickSize, center.y).lineTo(center.x, center.y - this.capSize / 2).lineTo(center.x, center.y + this.capSize / 2).close();\n    return needlePath;\n  };\n\n  RadialPointer.prototype._renderCap = function _renderCap() {\n    var options = this.options;\n    var capColor = options.cap.color || options.color;\n    var circle = new geo.Circle(this.center, this.capSize);\n    var cap = new Circle(circle, {\n      fill: {\n        color: capColor\n      },\n      stroke: {\n        color: capColor\n      }\n    });\n    return cap;\n  };\n\n  return RadialPointer;\n}(Pointer);\n\nsetDefaultOptions(RadialPointer, {\n  cap: {\n    size: CAP_SIZE\n  },\n  arrow: {\n    width: 16,\n    height: 14\n  },\n  animation: {\n    type: RADIAL_POINTER,\n    duration: ANGULAR_SPEED\n  }\n});\nexport default RadialPointer;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/gauges/radial/radial-pointer.js"],"names":["geometry","geo","drawing","setDefaultOptions","deepExtend","limitValue","ANGULAR_SPEED","DEGREE","DEFAULT_LINE_WIDTH","RADIAL_POINTER","Pointer","RadialPointerAnimation","CAP_SIZE","Circle","Group","Path","RadialPointer","apply","arguments","__proto__","prototype","Object","create","constructor","setAngle","angle","elements","transform","rotate","center","repaint","ref","scale","options","oldAngle","slotAngle","_oldValue","newAngle","value","animation","transitions","play","render","startAngle","arc","reverse","append","_renderNeedle","_renderCap","reflow","length","radius","getRadiusX","capSize","Math","round","cap","size","bbox","Rect","fromPoints","Point","x","y","minorTickSize","minorTicks","needleColor","color","needlePath","fill","stroke","width","moveTo","lineTo","close","capColor","circle","arrow","height","type","duration"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,GAArB,EAA0BC,OAA1B,QAAyC,yBAAzC;AAEA,SAASC,iBAAT,EAA4BC,UAA5B,EAAwCC,UAAxC,QAA0D,cAA1D;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,kBAAhC,EAAoDC,cAApD,QAA0E,cAA1E;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,sBAAP,MAAmC,4BAAnC;AAEA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,MAAM,GAAGX,OAAO,CAACW,MAArB;AACA,IAAIC,KAAK,GAAGZ,OAAO,CAACY,KAApB;AACA,IAAIC,IAAI,GAAGb,OAAO,CAACa,IAAnB;;AAEA,IAAIC,aAAa,GAAI,UAAUN,OAAV,EAAmB;AACpC,WAASM,aAAT,GAA0B;AACtBN,IAAAA,OAAO,CAACO,KAAR,CAAc,IAAd,EAAoBC,SAApB;AACH;;AAED,MAAKR,OAAL,EAAeM,aAAa,CAACG,SAAd,GAA0BT,OAA1B;AACfM,EAAAA,aAAa,CAACI,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAeZ,OAAO,IAAIA,OAAO,CAACU,SAAlC,CAA1B;AACAJ,EAAAA,aAAa,CAACI,SAAd,CAAwBG,WAAxB,GAAsCP,aAAtC;;AAEAA,EAAAA,aAAa,CAACI,SAAd,CAAwBI,QAAxB,GAAmC,SAASA,QAAT,CAAmBC,KAAnB,EAA0B;AACzD,SAAKC,QAAL,CAAcC,SAAd,CAAwB1B,GAAG,CAAC0B,SAAJ,GAAgBC,MAAhB,CAAuBH,KAAvB,EAA8B,KAAKI,MAAnC,CAAxB;AACH,GAFD;;AAIAb,EAAAA,aAAa,CAACI,SAAd,CAAwBU,OAAxB,GAAkC,SAASA,OAAT,GAAoB;AAClD,QAAIC,GAAG,GAAG,IAAV;AACA,QAAIC,KAAK,GAAGD,GAAG,CAACC,KAAhB;AACA,QAAIC,OAAO,GAAGF,GAAG,CAACE,OAAlB;AACA,QAAIC,QAAQ,GAAGF,KAAK,CAACG,SAAN,CAAgBF,OAAO,CAACG,SAAxB,CAAf;AACA,QAAIC,QAAQ,GAAGL,KAAK,CAACG,SAAN,CAAgBF,OAAO,CAACK,KAAxB,CAAf;;AAEA,QAAIL,OAAO,CAACM,SAAR,CAAkBC,WAAlB,KAAkC,KAAtC,EAA6C;AACzC,WAAKhB,QAAL,CAAca,QAAd;AACH,KAFD,MAEO;AACH,UAAI1B,sBAAJ,CAA2B,KAAKe,QAAhC,EAA0CtB,UAAU,CAAC6B,OAAO,CAACM,SAAT,EAAoB;AACpEL,QAAAA,QAAQ,EAAEA,QAD0D;AAEpEG,QAAAA,QAAQ,EAAEA;AAF0D,OAApB,CAApD,EAGII,IAHJ;AAIH;AACJ,GAfD;;AAiBAzB,EAAAA,aAAa,CAACI,SAAd,CAAwBsB,MAAxB,GAAiC,SAASA,MAAT,GAAmB;AAChD,QAAIX,GAAG,GAAG,IAAV;AACA,QAAIC,KAAK,GAAGD,GAAG,CAACC,KAAhB;AACA,QAAIC,OAAO,GAAGF,GAAG,CAACE,OAAlB;AACA,QAAIP,QAAQ,GAAG,IAAIZ,KAAJ,EAAf;;AAEA,QAAImB,OAAO,CAACM,SAAR,KAAsB,KAA1B,EAAiC;AAC7BnC,MAAAA,UAAU,CAAC6B,OAAO,CAACM,SAAT,EAAoB;AAC1BI,QAAAA,UAAU,EAAE,CADc;AAE1Bd,QAAAA,MAAM,EAAEG,KAAK,CAACY,GAAN,CAAUf,MAFQ;AAG1BgB,QAAAA,OAAO,EAAEb,KAAK,CAACC,OAAN,CAAcY;AAHG,OAApB,CAAV;AAKH;;AAEDnB,IAAAA,QAAQ,CAACoB,MAAT,CAAgB,KAAKC,aAAL,EAAhB,EAAsC,KAAKC,UAAL,EAAtC;AAEA,SAAKtB,QAAL,GAAgBA,QAAhB;AACA,SAAKF,QAAL,CAAcjB,MAAd;AAEA,WAAOmB,QAAP;AACH,GApBD;;AAsBAV,EAAAA,aAAa,CAACI,SAAd,CAAwB6B,MAAxB,GAAiC,SAASA,MAAT,CAAiBL,GAAjB,EAAsB;AACnD,QAAIf,MAAM,GAAG,KAAKA,MAAL,GAAce,GAAG,CAACf,MAA/B;AACA,QAAIqB,MAAM,GAAG7C,UAAU,CAAC,KAAK4B,OAAL,CAAaiB,MAAb,IAAuB,CAAxB,EAA2B,GAA3B,EAAgC,GAAhC,CAAvB;AACA,QAAIC,MAAM,GAAG,KAAKA,MAAL,GAAcP,GAAG,CAACQ,UAAJ,KAAmBF,MAA9C;AACA,QAAIG,OAAO,GAAG,KAAKA,OAAL,GAAeC,IAAI,CAACC,KAAL,CAAWJ,MAAM,GAAG,KAAKlB,OAAL,CAAauB,GAAb,CAAiBC,IAArC,CAA7B;AAEA,SAAKC,IAAL,GAAYzD,GAAG,CAAC0D,IAAJ,CAASC,UAAT,CAAoB,IAAI3D,GAAG,CAAC4D,KAAR,CAAchC,MAAM,CAACiC,CAAP,GAAWT,OAAzB,EAAkCxB,MAAM,CAACkC,CAAP,GAAWV,OAA7C,CAApB,EACgB,IAAIpD,GAAG,CAAC4D,KAAR,CAAchC,MAAM,CAACiC,CAAP,GAAWT,OAAzB,EAAkCxB,MAAM,CAACkC,CAAP,GAAWV,OAA7C,CADhB,CAAZ;AAEH,GARD;;AAUArC,EAAAA,aAAa,CAACI,SAAd,CAAwB2B,aAAxB,GAAwC,SAASA,aAAT,GAA0B;AAC9D,QAAIiB,aAAa,GAAG,KAAKhC,KAAL,CAAWC,OAAX,CAAmBgC,UAAnB,CAA8BR,IAAlD;AACA,QAAI5B,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIqC,WAAW,GAAG,KAAKjC,OAAL,CAAakC,KAA/B;AAEA,QAAIC,UAAU,GAAG,IAAIrD,IAAJ,CAAS;AACtBsD,MAAAA,IAAI,EAAE;AAAEF,QAAAA,KAAK,EAAED;AAAT,OADgB;AAEtBI,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAK,EAAED,WAAT;AAAsBK,QAAAA,KAAK,EAAE/D;AAA7B;AAFc,KAAT,CAAjB;AAKA4D,IAAAA,UAAU,CAACI,MAAX,CAAkB3C,MAAM,CAACiC,CAAP,GAAW,KAAKX,MAAhB,GAAyBa,aAA3C,EAA0DnC,MAAM,CAACkC,CAAjE,EACWU,MADX,CACkB5C,MAAM,CAACiC,CADzB,EAC4BjC,MAAM,CAACkC,CAAP,GAAY,KAAKV,OAAL,GAAe,CADvD,EAEWoB,MAFX,CAEkB5C,MAAM,CAACiC,CAFzB,EAE4BjC,MAAM,CAACkC,CAAP,GAAY,KAAKV,OAAL,GAAe,CAFvD,EAGWqB,KAHX;AAKA,WAAON,UAAP;AACH,GAhBD;;AAkBApD,EAAAA,aAAa,CAACI,SAAd,CAAwB4B,UAAxB,GAAqC,SAASA,UAAT,GAAuB;AACxD,QAAIf,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAI0C,QAAQ,GAAG1C,OAAO,CAACuB,GAAR,CAAYW,KAAZ,IAAqBlC,OAAO,CAACkC,KAA5C;AACA,QAAIS,MAAM,GAAG,IAAI3E,GAAG,CAACY,MAAR,CAAe,KAAKgB,MAApB,EAA4B,KAAKwB,OAAjC,CAAb;AAEA,QAAIG,GAAG,GAAG,IAAI3C,MAAJ,CAAW+D,MAAX,EAAmB;AACzBP,MAAAA,IAAI,EAAE;AAAEF,QAAAA,KAAK,EAAEQ;AAAT,OADmB;AAEzBL,MAAAA,MAAM,EAAE;AAAEH,QAAAA,KAAK,EAAEQ;AAAT;AAFiB,KAAnB,CAAV;AAKA,WAAOnB,GAAP;AACH,GAXD;;AAaA,SAAOxC,aAAP;AACH,CA9FoB,CA8FnBN,OA9FmB,CAArB;;AAgGAP,iBAAiB,CAACa,aAAD,EAAgB;AAC7BwC,EAAAA,GAAG,EAAE;AACDC,IAAAA,IAAI,EAAE7C;AADL,GADwB;AAI7BiE,EAAAA,KAAK,EAAE;AACHN,IAAAA,KAAK,EAAE,EADJ;AAEHO,IAAAA,MAAM,EAAE;AAFL,GAJsB;AAQ7BvC,EAAAA,SAAS,EAAE;AACPwC,IAAAA,IAAI,EAAEtE,cADC;AAEPuE,IAAAA,QAAQ,EAAE1E;AAFH;AARkB,CAAhB,CAAjB;AAcA,eAAeU,aAAf","sourcesContent":["import { geometry as geo, drawing } from '@progress/kendo-drawing';\n\nimport { setDefaultOptions, deepExtend, limitValue } from '../../common';\nimport { ANGULAR_SPEED, DEGREE, DEFAULT_LINE_WIDTH, RADIAL_POINTER } from '../constants';\nimport Pointer from '../pointer';\nimport RadialPointerAnimation from './radial-pointer-animation';\n\nvar CAP_SIZE = 0.05;\nvar Circle = drawing.Circle;\nvar Group = drawing.Group;\nvar Path = drawing.Path;\n\nvar RadialPointer = (function (Pointer) {\n    function RadialPointer () {\n        Pointer.apply(this, arguments);\n    }\n\n    if ( Pointer ) RadialPointer.__proto__ = Pointer;\n    RadialPointer.prototype = Object.create( Pointer && Pointer.prototype );\n    RadialPointer.prototype.constructor = RadialPointer;\n\n    RadialPointer.prototype.setAngle = function setAngle (angle) {\n        this.elements.transform(geo.transform().rotate(angle, this.center));\n    };\n\n    RadialPointer.prototype.repaint = function repaint () {\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n        var oldAngle = scale.slotAngle(options._oldValue);\n        var newAngle = scale.slotAngle(options.value);\n\n        if (options.animation.transitions === false) {\n            this.setAngle(newAngle);\n        } else {\n            new RadialPointerAnimation(this.elements, deepExtend(options.animation, {\n                oldAngle: oldAngle,\n                newAngle: newAngle\n            })).play();\n        }\n    };\n\n    RadialPointer.prototype.render = function render () {\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n        var elements = new Group();\n\n        if (options.animation !== false) {\n            deepExtend(options.animation, {\n                startAngle: 0,\n                center: scale.arc.center,\n                reverse: scale.options.reverse\n            });\n        }\n\n        elements.append(this._renderNeedle(), this._renderCap());\n\n        this.elements = elements;\n        this.setAngle(DEGREE);\n\n        return elements;\n    };\n\n    RadialPointer.prototype.reflow = function reflow (arc) {\n        var center = this.center = arc.center;\n        var length = limitValue(this.options.length || 1, 0.1, 1.5);\n        var radius = this.radius = arc.getRadiusX() * length;\n        var capSize = this.capSize = Math.round(radius * this.options.cap.size);\n\n        this.bbox = geo.Rect.fromPoints(new geo.Point(center.x - capSize, center.y - capSize),\n                                    new geo.Point(center.x + capSize, center.y + capSize));\n    };\n\n    RadialPointer.prototype._renderNeedle = function _renderNeedle () {\n        var minorTickSize = this.scale.options.minorTicks.size;\n        var center = this.center;\n        var needleColor = this.options.color;\n\n        var needlePath = new Path({\n            fill: { color: needleColor },\n            stroke: { color: needleColor, width: DEFAULT_LINE_WIDTH }\n        });\n\n        needlePath.moveTo(center.x + this.radius - minorTickSize, center.y)\n                  .lineTo(center.x, center.y - (this.capSize / 2))\n                  .lineTo(center.x, center.y + (this.capSize / 2))\n                  .close();\n\n        return needlePath;\n    };\n\n    RadialPointer.prototype._renderCap = function _renderCap () {\n        var options = this.options;\n        var capColor = options.cap.color || options.color;\n        var circle = new geo.Circle(this.center, this.capSize);\n\n        var cap = new Circle(circle, {\n            fill: { color: capColor },\n            stroke: { color: capColor }\n        });\n\n        return cap;\n    };\n\n    return RadialPointer;\n}(Pointer));\n\nsetDefaultOptions(RadialPointer, {\n    cap: {\n        size: CAP_SIZE\n    },\n    arrow: {\n        width: 16,\n        height: 14\n    },\n    animation: {\n        type: RADIAL_POINTER,\n        duration: ANGULAR_SPEED\n    }\n});\n\nexport default RadialPointer;\n"]},"metadata":{},"sourceType":"module"}