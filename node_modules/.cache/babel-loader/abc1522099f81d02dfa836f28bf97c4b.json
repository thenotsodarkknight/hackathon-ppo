{"ast":null,"code":"import { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { defined, isNumber } from '../../common';\nimport countNumbers from '../utils/count-numbers';\nvar Aggregates = {\n  min: function min(values) {\n    var length = values.length;\n    var min = MAX_VALUE;\n\n    for (var i = 0; i < length; i++) {\n      var value = values[i];\n\n      if (isNumber(value)) {\n        min = Math.min(min, value);\n      }\n    }\n\n    return min === MAX_VALUE ? values[0] : min;\n  },\n  max: function max(values) {\n    var length = values.length;\n    var max = MIN_VALUE;\n\n    for (var i = 0; i < length; i++) {\n      var value = values[i];\n\n      if (isNumber(value)) {\n        max = Math.max(max, value);\n      }\n    }\n\n    return max === MIN_VALUE ? values[0] : max;\n  },\n  sum: function sum(values) {\n    var length = values.length;\n    var sum = 0;\n\n    for (var i = 0; i < length; i++) {\n      var value = values[i];\n\n      if (isNumber(value)) {\n        sum += value;\n      }\n    }\n\n    return sum;\n  },\n  sumOrNull: function sumOrNull(values) {\n    var result = null;\n\n    if (countNumbers(values)) {\n      result = Aggregates.sum(values);\n    }\n\n    return result;\n  },\n  count: function count(values) {\n    var length = values.length;\n    var count = 0;\n\n    for (var i = 0; i < length; i++) {\n      var value = values[i];\n\n      if (value !== null && defined(value)) {\n        count++;\n      }\n    }\n\n    return count;\n  },\n  avg: function avg(values) {\n    var count = countNumbers(values);\n    var result = values[0];\n\n    if (count > 0) {\n      result = Aggregates.sum(values) / count;\n    }\n\n    return result;\n  },\n  first: function first(values) {\n    var length = values.length;\n\n    for (var i = 0; i < length; i++) {\n      var value = values[i];\n\n      if (value !== null && defined(value)) {\n        return value;\n      }\n    }\n\n    return values[0];\n  }\n};\nexport default Aggregates;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/aggregates/aggregates.js"],"names":["MIN_VALUE","MAX_VALUE","defined","isNumber","countNumbers","Aggregates","min","values","length","i","value","Math","max","sum","sumOrNull","result","count","avg","first"],"mappings":"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","sourcesContent":["import { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { defined, isNumber } from '../../common';\n\nimport countNumbers from '../utils/count-numbers';\n\nvar Aggregates = {\n    min: function(values) {\n        var length = values.length;\n        var min = MAX_VALUE;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (isNumber(value)) {\n                min = Math.min(min, value);\n            }\n        }\n\n        return min === MAX_VALUE ? values[0] : min;\n    },\n\n    max: function(values) {\n        var length = values.length;\n        var max = MIN_VALUE;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (isNumber(value)) {\n                max = Math.max(max, value);\n            }\n        }\n\n        return max === MIN_VALUE ? values[0] : max;\n    },\n\n    sum: function(values) {\n        var length = values.length;\n        var sum = 0;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (isNumber(value)) {\n                sum += value;\n            }\n        }\n\n        return sum;\n    },\n\n    sumOrNull: function(values) {\n        var result = null;\n\n        if (countNumbers(values)) {\n            result = Aggregates.sum(values);\n        }\n\n        return result;\n    },\n\n    count: function(values) {\n        var length = values.length;\n        var count = 0;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (value !== null && defined(value)) {\n                count++;\n            }\n        }\n\n        return count;\n    },\n\n    avg: function(values) {\n        var count = countNumbers(values);\n        var result = values[0];\n\n        if (count > 0) {\n            result = Aggregates.sum(values) / count;\n        }\n\n        return result;\n    },\n\n    first: function(values) {\n        var length = values.length;\n\n        for (var i = 0; i < length; i++) {\n            var value = values[i];\n            if (value !== null && defined(value)) {\n                return value;\n            }\n        }\n\n        return values[0];\n    }\n};\n\nexport default Aggregates;"]},"metadata":{},"sourceType":"module"}