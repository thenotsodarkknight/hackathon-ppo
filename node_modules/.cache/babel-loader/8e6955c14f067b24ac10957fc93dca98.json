{"ast":null,"code":"import BarChart from '../bar-chart/bar-chart';\nimport SeriesBinder from '../series-binder';\nimport WaterfallSegment from './waterfall-segment';\nimport categoriesCount from '../utils/categories-count';\nimport { isNumber } from '../../common';\n\nvar WaterfallChart = function (BarChart) {\n  function WaterfallChart() {\n    BarChart.apply(this, arguments);\n  }\n\n  if (BarChart) WaterfallChart.__proto__ = BarChart;\n  WaterfallChart.prototype = Object.create(BarChart && BarChart.prototype);\n  WaterfallChart.prototype.constructor = WaterfallChart;\n\n  WaterfallChart.prototype.render = function render() {\n    BarChart.prototype.render.call(this);\n    this.createSegments();\n  };\n\n  WaterfallChart.prototype.traverseDataPoints = function traverseDataPoints(callback) {\n    var this$1 = this;\n    var series = this.options.series;\n    var totalCategories = categoriesCount(series);\n    var isVertical = !this.options.invertAxes;\n\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var total = 0;\n      var runningTotal = 0;\n\n      for (var categoryIx = 0; categoryIx < totalCategories; categoryIx++) {\n        var data = SeriesBinder.current.bindPoint(currentSeries, categoryIx);\n        var value = data.valueFields.value;\n        var summary = data.fields.summary;\n        var from = total;\n        var to = void 0;\n\n        if (summary) {\n          if (summary.toLowerCase() === \"total\") {\n            data.valueFields.value = total;\n            from = 0;\n            to = total;\n          } else {\n            data.valueFields.value = runningTotal;\n            to = from - runningTotal;\n            runningTotal = 0;\n          }\n        } else if (isNumber(value)) {\n          runningTotal += value;\n          total += value;\n          to = total;\n        }\n\n        callback(data, {\n          category: this$1.categoryAxis.categoryAt(categoryIx),\n          categoryIx: categoryIx,\n          series: currentSeries,\n          seriesIx: seriesIx,\n          total: total,\n          runningTotal: runningTotal,\n          from: from,\n          to: to,\n          isVertical: isVertical\n        });\n      }\n    }\n  };\n\n  WaterfallChart.prototype.updateRange = function updateRange(value, fields) {\n    BarChart.prototype.updateRange.call(this, {\n      value: fields.to\n    }, fields);\n  };\n\n  WaterfallChart.prototype.aboveAxis = function aboveAxis(point) {\n    return point.value >= 0;\n  };\n\n  WaterfallChart.prototype.plotRange = function plotRange(point) {\n    return [point.from, point.to];\n  };\n\n  WaterfallChart.prototype.createSegments = function createSegments() {\n    var this$1 = this;\n    var series = this.options.series;\n    var seriesPoints = this.seriesPoints;\n    var segments = this.segments = [];\n\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var points = seriesPoints[seriesIx];\n\n      if (points) {\n        var prevPoint = void 0;\n\n        for (var pointIx = 0; pointIx < points.length; pointIx++) {\n          var point = points[pointIx];\n\n          if (point && prevPoint) {\n            var segment = new WaterfallSegment(prevPoint, point, currentSeries);\n            segments.push(segment);\n            this$1.append(segment);\n          }\n\n          prevPoint = point;\n        }\n      }\n    }\n  };\n\n  return WaterfallChart;\n}(BarChart);\n\nexport default WaterfallChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/waterfall-chart/waterfall-chart.js"],"names":["BarChart","SeriesBinder","WaterfallSegment","categoriesCount","isNumber","WaterfallChart","apply","arguments","__proto__","prototype","Object","create","constructor","render","call","createSegments","traverseDataPoints","callback","this$1","series","options","totalCategories","isVertical","invertAxes","seriesIx","length","currentSeries","total","runningTotal","categoryIx","data","current","bindPoint","value","valueFields","summary","fields","from","to","toLowerCase","category","categoryAxis","categoryAt","updateRange","aboveAxis","point","plotRange","seriesPoints","segments","points","prevPoint","pointIx","segment","push","append"],"mappings":"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","sourcesContent":["import BarChart from '../bar-chart/bar-chart';\nimport SeriesBinder from '../series-binder';\nimport WaterfallSegment from './waterfall-segment';\n\nimport categoriesCount from '../utils/categories-count';\n\nimport { isNumber } from '../../common';\n\nvar WaterfallChart = (function (BarChart) {\n    function WaterfallChart () {\n        BarChart.apply(this, arguments);\n    }\n\n    if ( BarChart ) WaterfallChart.__proto__ = BarChart;\n    WaterfallChart.prototype = Object.create( BarChart && BarChart.prototype );\n    WaterfallChart.prototype.constructor = WaterfallChart;\n\n    WaterfallChart.prototype.render = function render () {\n        BarChart.prototype.render.call(this);\n        this.createSegments();\n    };\n\n    WaterfallChart.prototype.traverseDataPoints = function traverseDataPoints (callback) {\n        var this$1 = this;\n\n        var series = this.options.series;\n        var totalCategories = categoriesCount(series);\n        var isVertical = !this.options.invertAxes;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var total = 0;\n            var runningTotal = 0;\n\n            for (var categoryIx = 0; categoryIx < totalCategories; categoryIx++) {\n                var data = SeriesBinder.current.bindPoint(currentSeries, categoryIx);\n                var value = data.valueFields.value;\n                var summary = data.fields.summary;\n                var from = total;\n                var to = (void 0);\n\n                if (summary) {\n                    if (summary.toLowerCase() === \"total\") {\n                        data.valueFields.value = total;\n                        from = 0;\n                        to = total;\n                    } else {\n                        data.valueFields.value = runningTotal;\n                        to = from - runningTotal;\n                        runningTotal = 0;\n                    }\n                } else if (isNumber(value)) {\n                    runningTotal += value;\n                    total += value;\n                    to = total;\n                }\n\n                callback(data, {\n                    category: this$1.categoryAxis.categoryAt(categoryIx),\n                    categoryIx: categoryIx,\n                    series: currentSeries,\n                    seriesIx: seriesIx,\n                    total: total,\n                    runningTotal: runningTotal,\n                    from: from,\n                    to: to,\n                    isVertical: isVertical\n                });\n            }\n        }\n    };\n\n    WaterfallChart.prototype.updateRange = function updateRange (value, fields) {\n        BarChart.prototype.updateRange.call(this, { value: fields.to }, fields);\n    };\n\n    WaterfallChart.prototype.aboveAxis = function aboveAxis (point) {\n        return point.value >= 0;\n    };\n\n    WaterfallChart.prototype.plotRange = function plotRange (point) {\n        return [ point.from, point.to ];\n    };\n\n    WaterfallChart.prototype.createSegments = function createSegments () {\n        var this$1 = this;\n\n        var series = this.options.series;\n        var seriesPoints = this.seriesPoints;\n        var segments = this.segments = [];\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var points = seriesPoints[seriesIx];\n\n            if (points) {\n                var prevPoint = (void 0);\n                for (var pointIx = 0; pointIx < points.length; pointIx++) {\n                    var point = points[pointIx];\n\n                    if (point && prevPoint) {\n                        var segment = new WaterfallSegment(prevPoint, point, currentSeries);\n                        segments.push(segment);\n                        this$1.append(segment);\n                    }\n\n                    prevPoint = point;\n                }\n            }\n        }\n    };\n\n    return WaterfallChart;\n}(BarChart));\n\nexport default WaterfallChart;"]},"metadata":{},"sourceType":"module"}