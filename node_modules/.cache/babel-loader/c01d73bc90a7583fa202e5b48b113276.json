{"ast":null,"code":"import CategoricalChart from '../categorical-chart';\nimport ClusterLayout from '../layout/cluster-layout';\nimport Candlestick from './candlestick';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport { CANDLESTICK } from '../constants';\nimport areNumbers from '../utils/are-numbers';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { deepExtend, isFunction } from '../../common';\n\nvar CandlestickChart = function (CategoricalChart) {\n  function CandlestickChart() {\n    CategoricalChart.apply(this, arguments);\n  }\n\n  if (CategoricalChart) CandlestickChart.__proto__ = CategoricalChart;\n  CandlestickChart.prototype = Object.create(CategoricalChart && CategoricalChart.prototype);\n  CandlestickChart.prototype.constructor = CandlestickChart;\n\n  CandlestickChart.prototype.reflowCategories = function reflowCategories(categorySlots) {\n    var children = this.children;\n    var childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; i++) {\n      children[i].reflow(categorySlots[i]);\n    }\n  };\n\n  CandlestickChart.prototype.addValue = function addValue(data, fields) {\n    var categoryIx = fields.categoryIx;\n    var category = fields.category;\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var ref = this;\n    var children = ref.children;\n    var options = ref.options;\n    var value = data.valueFields;\n    var valueParts = this.splitValue(value);\n    var hasValue = areNumbers(valueParts);\n    var dataItem = series.data[categoryIx];\n    var categoryPoints = this.categoryPoints[categoryIx];\n    var point;\n\n    if (!categoryPoints) {\n      this.categoryPoints[categoryIx] = categoryPoints = [];\n    }\n\n    if (hasValue) {\n      point = this.createPoint(data, fields);\n    }\n\n    var cluster = children[categoryIx];\n\n    if (!cluster) {\n      cluster = new ClusterLayout({\n        vertical: options.invertAxes,\n        gap: options.gap,\n        spacing: options.spacing,\n        rtl: !options.invertAxes && (this.chartService || {}).rtl\n      });\n      this.append(cluster);\n    }\n\n    if (point) {\n      this.updateRange(value, fields);\n      cluster.append(point);\n      point.categoryIx = categoryIx;\n      point.category = category;\n      point.series = series;\n      point.seriesIx = seriesIx;\n      point.owner = this;\n      point.dataItem = dataItem;\n      point.noteText = data.fields.noteText;\n    }\n\n    this.points.push(point);\n    categoryPoints.push(point);\n  };\n\n  CandlestickChart.prototype.pointType = function pointType() {\n    return Candlestick;\n  };\n\n  CandlestickChart.prototype.createPoint = function createPoint(data, fields) {\n    var categoryIx = fields.categoryIx;\n    var category = fields.category;\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var pointType = this.pointType();\n    var value = data.valueFields;\n    var pointOptions = deepExtend({}, series);\n    var color = data.fields.color || series.color;\n    pointOptions = this.evalPointOptions(pointOptions, value, category, categoryIx, series, seriesIx);\n\n    if (series.type === CANDLESTICK) {\n      if (value.open > value.close) {\n        color = data.fields.downColor || series.downColor || series.color;\n      }\n    }\n\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n\n    pointOptions.vertical = !this.options.invertAxes;\n    var point = new pointType(value, pointOptions);\n    point.color = color;\n    return point;\n  };\n\n  CandlestickChart.prototype.splitValue = function splitValue(value) {\n    return [value.low, value.open, value.close, value.high];\n  };\n\n  CandlestickChart.prototype.updateRange = function updateRange(value, fields) {\n    var axisName = fields.series.axis;\n    var parts = this.splitValue(value);\n    var axisRange = this.valueAxisRanges[axisName];\n    axisRange = this.valueAxisRanges[axisName] = axisRange || {\n      min: MAX_VALUE,\n      max: MIN_VALUE\n    };\n    axisRange = this.valueAxisRanges[axisName] = {\n      min: Math.min.apply(Math, parts.concat([axisRange.min])),\n      max: Math.max.apply(Math, parts.concat([axisRange.max]))\n    };\n  };\n\n  CandlestickChart.prototype.formatPointValue = function formatPointValue(point, format) {\n    var value = point.value;\n    return this.chartService.format.auto(format, value.open, value.high, value.low, value.close, point.category);\n  };\n\n  CandlestickChart.prototype.animationPoints = function animationPoints() {\n    return this.points;\n  };\n\n  return CandlestickChart;\n}(CategoricalChart);\n\ndeepExtend(CandlestickChart.prototype, ClipAnimationMixin);\nexport default CandlestickChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/candlestick-chart/candlestick-chart.js"],"names":["CategoricalChart","ClusterLayout","Candlestick","ClipAnimationMixin","CANDLESTICK","areNumbers","MIN_VALUE","MAX_VALUE","deepExtend","isFunction","CandlestickChart","apply","arguments","__proto__","prototype","Object","create","constructor","reflowCategories","categorySlots","children","childrenLength","length","i","reflow","addValue","data","fields","categoryIx","category","series","seriesIx","ref","options","value","valueFields","valueParts","splitValue","hasValue","dataItem","categoryPoints","point","createPoint","cluster","vertical","invertAxes","gap","spacing","rtl","chartService","append","updateRange","owner","noteText","points","push","pointType","pointOptions","color","evalPointOptions","type","open","close","downColor","low","high","axisName","axis","parts","axisRange","valueAxisRanges","min","max","Math","concat","formatPointValue","format","auto","animationPoints"],"mappings":"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","sourcesContent":["import CategoricalChart from '../categorical-chart';\nimport ClusterLayout from '../layout/cluster-layout';\nimport Candlestick from './candlestick';\n\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport { CANDLESTICK } from '../constants';\nimport areNumbers from '../utils/are-numbers';\n\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { deepExtend, isFunction } from '../../common';\n\nvar CandlestickChart = (function (CategoricalChart) {\n    function CandlestickChart () {\n        CategoricalChart.apply(this, arguments);\n    }\n\n    if ( CategoricalChart ) CandlestickChart.__proto__ = CategoricalChart;\n    CandlestickChart.prototype = Object.create( CategoricalChart && CategoricalChart.prototype );\n    CandlestickChart.prototype.constructor = CandlestickChart;\n\n    CandlestickChart.prototype.reflowCategories = function reflowCategories (categorySlots) {\n        var children = this.children;\n        var childrenLength = children.length;\n\n        for (var i = 0; i < childrenLength; i++) {\n            children[i].reflow(categorySlots[i]);\n        }\n    };\n\n    CandlestickChart.prototype.addValue = function addValue (data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var ref = this;\n        var children = ref.children;\n        var options = ref.options;\n        var value = data.valueFields;\n        var valueParts = this.splitValue(value);\n        var hasValue = areNumbers(valueParts);\n        var dataItem = series.data[categoryIx];\n        var categoryPoints = this.categoryPoints[categoryIx];\n        var point;\n\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        if (hasValue) {\n            point = this.createPoint(data, fields);\n        }\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            cluster = new ClusterLayout({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (point) {\n            this.updateRange(value, fields);\n\n            cluster.append(point);\n\n            point.categoryIx = categoryIx;\n            point.category = category;\n            point.series = series;\n            point.seriesIx = seriesIx;\n            point.owner = this;\n            point.dataItem = dataItem;\n            point.noteText = data.fields.noteText;\n        }\n\n        this.points.push(point);\n        categoryPoints.push(point);\n    };\n\n    CandlestickChart.prototype.pointType = function pointType () {\n        return Candlestick;\n    };\n\n    CandlestickChart.prototype.createPoint = function createPoint (data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var pointType = this.pointType();\n        var value = data.valueFields;\n        var pointOptions = deepExtend({}, series);\n        var color = data.fields.color || series.color;\n\n        pointOptions = this.evalPointOptions(\n            pointOptions, value, category, categoryIx, series, seriesIx\n        );\n\n        if (series.type === CANDLESTICK) {\n            if (value.open > value.close) {\n                color = data.fields.downColor || series.downColor || series.color;\n            }\n        }\n\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        pointOptions.vertical = !this.options.invertAxes;\n\n        var point = new pointType(value, pointOptions);\n        point.color = color;\n\n        return point;\n    };\n\n    CandlestickChart.prototype.splitValue = function splitValue (value) {\n        return [ value.low, value.open, value.close, value.high ];\n    };\n\n    CandlestickChart.prototype.updateRange = function updateRange (value, fields) {\n        var axisName = fields.series.axis;\n        var parts = this.splitValue(value);\n        var axisRange = this.valueAxisRanges[axisName];\n\n        axisRange = this.valueAxisRanges[axisName] =\n            axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n        axisRange = this.valueAxisRanges[axisName] = {\n            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),\n            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))\n        };\n    };\n\n    CandlestickChart.prototype.formatPointValue = function formatPointValue (point, format) {\n        var value = point.value;\n\n        return this.chartService.format.auto(format,\n            value.open, value.high,\n            value.low, value.close, point.category\n        );\n    };\n\n    CandlestickChart.prototype.animationPoints = function animationPoints () {\n        return this.points;\n    };\n\n    return CandlestickChart;\n}(CategoricalChart));\n\ndeepExtend(CandlestickChart.prototype, ClipAnimationMixin);\n\nexport default CandlestickChart;"]},"metadata":{},"sourceType":"module"}