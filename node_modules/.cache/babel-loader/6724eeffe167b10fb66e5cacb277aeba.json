{"ast":null,"code":"import Axis from './axis';\nimport NumericAxis from './numeric-axis';\nimport AxisLabel from './axis-label';\nimport { DateLabelFormats } from './constants';\nimport { BLACK, DATE, COORD_PRECISION, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { setDefaultOptions, deepExtend, limitValue, round } from '../common';\nimport autoMajorUnit from './utils/auto-major-unit';\nimport ceil from './utils/ceil';\nimport { toDate, toTime, floorDate, ceilDate, duration, addDuration, addTicks, dateDiff, absoluteDateDiff, dateComparer, parseDate, parseDates } from '../date-utils';\nimport { HOURS, DAYS, WEEKS, MONTHS, YEARS, TIME_PER_DAY, TIME_PER_WEEK, TIME_PER_MONTH, TIME_PER_YEAR, TIME_PER_UNIT } from '../date-utils/constants';\n\nvar DateValueAxis = function (Axis) {\n  function DateValueAxis(seriesMin, seriesMax, axisOptions, chartService) {\n    var min = toDate(seriesMin);\n    var max = toDate(seriesMax);\n    var intlService = chartService.intl;\n    var options = axisOptions || {};\n    options = deepExtend(options || {}, {\n      min: parseDate(intlService, options.min),\n      max: parseDate(intlService, options.max),\n      axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue)\n    });\n    options = applyDefaults(min, max, options);\n    Axis.call(this, options, chartService);\n    this.intlService = intlService;\n    this.seriesMin = min;\n    this.seriesMax = max;\n    var weekStartDay = options.weekStartDay || 0;\n    this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit, weekStartDay));\n    this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit, weekStartDay));\n  }\n\n  if (Axis) DateValueAxis.__proto__ = Axis;\n  DateValueAxis.prototype = Object.create(Axis && Axis.prototype);\n  DateValueAxis.prototype.constructor = DateValueAxis;\n\n  DateValueAxis.prototype.clone = function clone() {\n    return new DateValueAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  };\n\n  DateValueAxis.prototype.range = function range() {\n    var options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  };\n\n  DateValueAxis.prototype.getDivisions = function getDivisions(stepValue) {\n    var options = this.options;\n    return Math.floor(duration(options.min, options.max, options.baseUnit) / stepValue + 1);\n  };\n\n  DateValueAxis.prototype.getTickPositions = function getTickPositions(step) {\n    var options = this.options;\n    var vertical = options.vertical;\n    var lineBox = this.lineBox();\n    var dir = (vertical ? -1 : 1) * (options.reverse ? -1 : 1);\n    var startEdge = dir === 1 ? 1 : 2;\n    var start = lineBox[(vertical ? Y : X) + startEdge];\n    var divisions = this.getDivisions(step);\n    var timeRange = dateDiff(options.max, options.min);\n    var lineSize = vertical ? lineBox.height() : lineBox.width();\n    var scale = lineSize / timeRange;\n    var weekStartDay = options.weekStartDay || 0;\n    var positions = [start];\n\n    for (var i = 1; i < divisions; i++) {\n      var date = addDuration(options.min, i * step, options.baseUnit, weekStartDay);\n      var pos = start + dateDiff(date, options.min) * scale * dir;\n      positions.push(round(pos, COORD_PRECISION));\n    }\n\n    return positions;\n  };\n\n  DateValueAxis.prototype.getMajorTickPositions = function getMajorTickPositions() {\n    return this.getTickPositions(this.options.majorUnit);\n  };\n\n  DateValueAxis.prototype.getMinorTickPositions = function getMinorTickPositions() {\n    return this.getTickPositions(this.options.minorUnit);\n  };\n\n  DateValueAxis.prototype.getSlot = function getSlot(a, b, limit) {\n    return NumericAxis.prototype.getSlot.call(this, parseDate(this.intlService, a), parseDate(this.intlService, b), limit);\n  };\n\n  DateValueAxis.prototype.getValue = function getValue(point) {\n    var value = NumericAxis.prototype.getValue.call(this, point);\n    return value !== null ? toDate(value) : null;\n  };\n\n  DateValueAxis.prototype.labelsCount = function labelsCount() {\n    return this.getDivisions(this.options.majorUnit);\n  };\n\n  DateValueAxis.prototype.createAxisLabel = function createAxisLabel(index, labelOptions) {\n    var options = this.options;\n    var offset = index * options.majorUnit;\n    var weekStartDay = options.weekStartDay || 0;\n    var date = options.min;\n\n    if (offset > 0) {\n      date = addDuration(date, offset, options.baseUnit, weekStartDay);\n    }\n\n    var unitFormat = labelOptions.dateFormats[options.baseUnit];\n    labelOptions.format = labelOptions.format || unitFormat;\n    var text = this.axisLabelText(date, null, labelOptions);\n    return new AxisLabel(date, text, index, null, labelOptions);\n  };\n\n  DateValueAxis.prototype.translateRange = function translateRange(delta, exact) {\n    var options = this.options;\n    var baseUnit = options.baseUnit;\n    var weekStartDay = options.weekStartDay || 0;\n    var lineBox = this.lineBox();\n    var size = options.vertical ? lineBox.height() : lineBox.width();\n    var range = this.range();\n    var scale = size / dateDiff(range.max, range.min);\n    var offset = round(delta / scale, DEFAULT_PRECISION) * (options.reverse ? -1 : 1);\n    var from = addTicks(options.min, offset);\n    var to = addTicks(options.max, offset);\n\n    if (!exact) {\n      from = addDuration(from, 0, baseUnit, weekStartDay);\n      to = addDuration(to, 0, baseUnit, weekStartDay);\n    }\n\n    return {\n      min: from,\n      max: to,\n      offset: offset\n    };\n  };\n\n  DateValueAxis.prototype.scaleRange = function scaleRange(delta) {\n    var ref = this.options;\n    var from = ref.min;\n    var to = ref.max;\n    var rounds = Math.abs(delta);\n\n    while (rounds--) {\n      var range = dateDiff(from, to);\n      var step = Math.round(range * 0.1);\n\n      if (delta < 0) {\n        from = addTicks(from, step);\n        to = addTicks(to, -step);\n      } else {\n        from = addTicks(from, -step);\n        to = addTicks(to, step);\n      }\n    }\n\n    return {\n      min: from,\n      max: to\n    };\n  };\n\n  DateValueAxis.prototype.shouldRenderNote = function shouldRenderNote(value) {\n    var range = this.range();\n    return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;\n  };\n\n  DateValueAxis.prototype.pan = function pan(delta) {\n    var range = this.translateRange(delta, true);\n    var limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax, range.offset);\n\n    if (limittedRange) {\n      return {\n        min: toDate(limittedRange.min),\n        max: toDate(limittedRange.max)\n      };\n    }\n  };\n\n  DateValueAxis.prototype.pointsRange = function pointsRange(start, end) {\n    var startValue = this.getValue(start);\n    var endValue = this.getValue(end);\n    var min = Math.min(startValue, endValue);\n    var max = Math.max(startValue, endValue);\n    return {\n      min: toDate(min),\n      max: toDate(max)\n    };\n  };\n\n  DateValueAxis.prototype.zoomRange = function zoomRange(delta) {\n    var range = this.scaleRange(delta);\n    var min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));\n    var max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));\n    return {\n      min: min,\n      max: max\n    };\n  };\n\n  return DateValueAxis;\n}(Axis);\n\nfunction timeUnits(delta) {\n  var unit = HOURS;\n\n  if (delta >= TIME_PER_YEAR) {\n    unit = YEARS;\n  } else if (delta >= TIME_PER_MONTH) {\n    unit = MONTHS;\n  } else if (delta >= TIME_PER_WEEK) {\n    unit = WEEKS;\n  } else if (delta >= TIME_PER_DAY) {\n    unit = DAYS;\n  }\n\n  return unit;\n}\n\nfunction applyDefaults(seriesMin, seriesMax, options) {\n  var min = options.min || seriesMin;\n  var max = options.max || seriesMax;\n  var baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);\n  var baseUnitTime = TIME_PER_UNIT[baseUnit];\n  var weekStartDay = options.weekStartDay || 0;\n  var autoMin = floorDate(toTime(min) - 1, baseUnit, weekStartDay) || toDate(max);\n  var autoMax = ceilDate(toTime(max) + 1, baseUnit, weekStartDay);\n  var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;\n  var majorUnit = userMajorUnit || ceil(autoMajorUnit(autoMin.getTime(), autoMax.getTime()), baseUnitTime) / baseUnitTime;\n  var actualUnits = duration(autoMin, autoMax, baseUnit);\n  var totalUnits = ceil(actualUnits, majorUnit);\n  var unitsToAdd = totalUnits - actualUnits;\n  var head = Math.floor(unitsToAdd / 2);\n  var tail = unitsToAdd - head;\n\n  if (!options.baseUnit) {\n    delete options.baseUnit;\n  }\n\n  options.baseUnit = options.baseUnit || baseUnit;\n  options.min = options.min || addDuration(autoMin, -head, baseUnit, weekStartDay);\n  options.max = options.max || addDuration(autoMax, tail, baseUnit, weekStartDay);\n  options.minorUnit = options.minorUnit || majorUnit / 5;\n  options.majorUnit = majorUnit;\n  return options;\n}\n\nsetDefaultOptions(DateValueAxis, {\n  type: DATE,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    dateFormats: DateLabelFormats\n  }\n});\nexport default DateValueAxis;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/date-value-axis.js"],"names":["Axis","NumericAxis","AxisLabel","DateLabelFormats","BLACK","DATE","COORD_PRECISION","DEFAULT_PRECISION","X","Y","setDefaultOptions","deepExtend","limitValue","round","autoMajorUnit","ceil","toDate","toTime","floorDate","ceilDate","duration","addDuration","addTicks","dateDiff","absoluteDateDiff","dateComparer","parseDate","parseDates","HOURS","DAYS","WEEKS","MONTHS","YEARS","TIME_PER_DAY","TIME_PER_WEEK","TIME_PER_MONTH","TIME_PER_YEAR","TIME_PER_UNIT","DateValueAxis","seriesMin","seriesMax","axisOptions","chartService","min","max","intlService","intl","options","axisCrossingValue","axisCrossingValues","applyDefaults","call","weekStartDay","totalMin","baseUnit","totalMax","__proto__","prototype","Object","create","constructor","clone","assign","range","getDivisions","stepValue","Math","floor","getTickPositions","step","vertical","lineBox","dir","reverse","startEdge","start","divisions","timeRange","lineSize","height","width","scale","positions","i","date","pos","push","getMajorTickPositions","majorUnit","getMinorTickPositions","minorUnit","getSlot","a","b","limit","getValue","point","value","labelsCount","createAxisLabel","index","labelOptions","offset","unitFormat","dateFormats","format","text","axisLabelText","translateRange","delta","exact","size","from","to","scaleRange","ref","rounds","abs","shouldRenderNote","pan","limittedRange","limitRange","pointsRange","end","startValue","endValue","zoomRange","timeUnits","unit","baseUnitTime","autoMin","autoMax","userMajorUnit","undefined","getTime","actualUnits","totalUnits","unitsToAdd","head","tail","type","majorGridLines","visible","color","labels"],"mappings":"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","sourcesContent":["import Axis from './axis';\nimport NumericAxis from './numeric-axis';\nimport AxisLabel from './axis-label';\nimport { DateLabelFormats } from './constants';\n\nimport { BLACK, DATE, COORD_PRECISION, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { setDefaultOptions, deepExtend, limitValue, round } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport ceil from './utils/ceil';\n\nimport { toDate, toTime, floorDate, ceilDate, duration, addDuration, addTicks, dateDiff, absoluteDateDiff, dateComparer, parseDate, parseDates } from '../date-utils';\nimport { HOURS, DAYS, WEEKS, MONTHS, YEARS, TIME_PER_DAY, TIME_PER_WEEK, TIME_PER_MONTH, TIME_PER_YEAR, TIME_PER_UNIT } from '../date-utils/constants';\n\nvar DateValueAxis = (function (Axis) {\n    function DateValueAxis(seriesMin, seriesMax, axisOptions, chartService) {\n        var min = toDate(seriesMin);\n        var max = toDate(seriesMax);\n\n        var intlService = chartService.intl;\n        var options = axisOptions || {};\n        options = deepExtend(options || {}, {\n            min: parseDate(intlService, options.min),\n            max: parseDate(intlService, options.max),\n            axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue)\n        });\n        options = applyDefaults(min, max, options);\n\n        Axis.call(this, options, chartService);\n\n        this.intlService = intlService;\n        this.seriesMin = min;\n        this.seriesMax = max;\n\n        var weekStartDay = options.weekStartDay || 0;\n        this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit, weekStartDay));\n        this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit, weekStartDay));\n    }\n\n    if ( Axis ) DateValueAxis.__proto__ = Axis;\n    DateValueAxis.prototype = Object.create( Axis && Axis.prototype );\n    DateValueAxis.prototype.constructor = DateValueAxis;\n\n    DateValueAxis.prototype.clone = function clone () {\n        return new DateValueAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n    };\n\n    DateValueAxis.prototype.range = function range () {\n        var options = this.options;\n        return { min: options.min, max: options.max };\n    };\n\n    DateValueAxis.prototype.getDivisions = function getDivisions (stepValue) {\n        var options = this.options;\n\n        return Math.floor(\n            duration(options.min, options.max, options.baseUnit) / stepValue + 1\n        );\n    };\n\n    DateValueAxis.prototype.getTickPositions = function getTickPositions (step) {\n        var options = this.options;\n        var vertical = options.vertical;\n        var lineBox = this.lineBox();\n        var dir = (vertical ? -1 : 1) * (options.reverse ? -1 : 1);\n        var startEdge = dir === 1 ? 1 : 2;\n        var start = lineBox[(vertical ? Y : X) + startEdge];\n        var divisions = this.getDivisions(step);\n        var timeRange = dateDiff(options.max, options.min);\n        var lineSize = vertical ? lineBox.height() : lineBox.width();\n        var scale = lineSize / timeRange;\n        var weekStartDay = options.weekStartDay || 0;\n\n        var positions = [ start ];\n        for (var i = 1; i < divisions; i++) {\n            var date = addDuration(options.min, i * step, options.baseUnit, weekStartDay);\n            var pos = start + dateDiff(date, options.min) * scale * dir;\n\n            positions.push(round(pos, COORD_PRECISION));\n        }\n\n        return positions;\n    };\n\n    DateValueAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {\n        return this.getTickPositions(this.options.majorUnit);\n    };\n\n    DateValueAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {\n        return this.getTickPositions(this.options.minorUnit);\n    };\n\n    DateValueAxis.prototype.getSlot = function getSlot (a, b, limit) {\n        return NumericAxis.prototype.getSlot.call(\n            this, parseDate(this.intlService, a), parseDate(this.intlService, b), limit\n        );\n    };\n\n    DateValueAxis.prototype.getValue = function getValue (point) {\n        var value = NumericAxis.prototype.getValue.call(this, point);\n\n        return value !== null ? toDate(value) : null;\n    };\n\n    DateValueAxis.prototype.labelsCount = function labelsCount () {\n        return this.getDivisions(this.options.majorUnit);\n    };\n\n    DateValueAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {\n        var options = this.options;\n        var offset = index * options.majorUnit;\n        var weekStartDay = options.weekStartDay || 0;\n        var date = options.min;\n\n        if (offset > 0) {\n            date = addDuration(date, offset, options.baseUnit, weekStartDay);\n        }\n\n        var unitFormat = labelOptions.dateFormats[options.baseUnit];\n        labelOptions.format = labelOptions.format || unitFormat;\n\n        var text = this.axisLabelText(date, null, labelOptions);\n        return new AxisLabel(date, text, index, null, labelOptions);\n    };\n\n    DateValueAxis.prototype.translateRange = function translateRange (delta, exact) {\n        var options = this.options;\n        var baseUnit = options.baseUnit;\n        var weekStartDay = options.weekStartDay || 0;\n        var lineBox = this.lineBox();\n        var size = options.vertical ? lineBox.height() : lineBox.width();\n        var range = this.range();\n        var scale = size / dateDiff(range.max, range.min);\n        var offset = round(delta / scale, DEFAULT_PRECISION) * (options.reverse ? -1 : 1);\n        var from = addTicks(options.min, offset);\n        var to = addTicks(options.max, offset);\n\n        if (!exact) {\n            from = addDuration(from, 0, baseUnit, weekStartDay);\n            to = addDuration(to, 0, baseUnit, weekStartDay);\n        }\n\n        return {\n            min: from,\n            max: to,\n            offset: offset\n        };\n    };\n\n    DateValueAxis.prototype.scaleRange = function scaleRange (delta) {\n        var ref = this.options;\n        var from = ref.min;\n        var to = ref.max;\n        var rounds = Math.abs(delta);\n\n        while (rounds--) {\n            var range = dateDiff(from, to);\n            var step = Math.round(range * 0.1);\n            if (delta < 0) {\n                from = addTicks(from, step);\n                to = addTicks(to, -step);\n            } else {\n                from = addTicks(from, -step);\n                to = addTicks(to, step);\n            }\n        }\n\n        return { min: from, max: to };\n    };\n\n    DateValueAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {\n        var range = this.range();\n\n        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;\n    };\n\n    DateValueAxis.prototype.pan = function pan (delta) {\n        var range = this.translateRange(delta, true);\n        var limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax, range.offset);\n\n        if (limittedRange) {\n            return {\n                min: toDate(limittedRange.min),\n                max: toDate(limittedRange.max)\n            };\n        }\n    };\n\n    DateValueAxis.prototype.pointsRange = function pointsRange (start, end) {\n        var startValue = this.getValue(start);\n        var endValue = this.getValue(end);\n        var min = Math.min(startValue, endValue);\n        var max = Math.max(startValue, endValue);\n\n        return {\n            min: toDate(min),\n            max: toDate(max)\n        };\n    };\n\n    DateValueAxis.prototype.zoomRange = function zoomRange (delta) {\n        var range = this.scaleRange(delta);\n        var min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));\n        var max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));\n\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    return DateValueAxis;\n}(Axis));\n\nfunction timeUnits(delta) {\n    var unit = HOURS;\n\n    if (delta >= TIME_PER_YEAR) {\n        unit = YEARS;\n    } else if (delta >= TIME_PER_MONTH) {\n        unit = MONTHS;\n    } else if (delta >= TIME_PER_WEEK) {\n        unit = WEEKS;\n    } else if (delta >= TIME_PER_DAY) {\n        unit = DAYS;\n    }\n\n    return unit;\n}\n\nfunction applyDefaults(seriesMin, seriesMax, options) {\n    var min = options.min || seriesMin;\n    var max = options.max || seriesMax;\n    var baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);\n    var baseUnitTime = TIME_PER_UNIT[baseUnit];\n    var weekStartDay = options.weekStartDay || 0;\n    var autoMin = floorDate(toTime(min) - 1, baseUnit, weekStartDay) || toDate(max);\n    var autoMax = ceilDate(toTime(max) + 1, baseUnit, weekStartDay);\n    var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;\n    var majorUnit = userMajorUnit || ceil(\n                        autoMajorUnit(autoMin.getTime(), autoMax.getTime()),\n                        baseUnitTime\n                    ) / baseUnitTime;\n    var actualUnits = duration(autoMin, autoMax, baseUnit);\n    var totalUnits = ceil(actualUnits, majorUnit);\n    var unitsToAdd = totalUnits - actualUnits;\n    var head = Math.floor(unitsToAdd / 2);\n    var tail = unitsToAdd - head;\n\n    if (!options.baseUnit) {\n        delete options.baseUnit;\n    }\n\n    options.baseUnit = options.baseUnit || baseUnit;\n    options.min = options.min || addDuration(autoMin, -head, baseUnit, weekStartDay);\n    options.max = options.max || addDuration(autoMax, tail, baseUnit, weekStartDay);\n    options.minorUnit = options.minorUnit || majorUnit / 5;\n    options.majorUnit = majorUnit;\n\n    return options;\n}\n\nsetDefaultOptions(DateValueAxis, {\n    type: DATE,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        dateFormats: DateLabelFormats\n    }\n});\n\nexport default DateValueAxis;\n"]},"metadata":{},"sourceType":"module"}