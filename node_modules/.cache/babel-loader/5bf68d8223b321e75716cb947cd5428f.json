{"ast":null,"code":"import CandlestickChart from '../candlestick-chart/candlestick-chart';\nimport VerticalBoxPlot from './vertical-box-plot';\nimport BoxPlot from './box-plot';\nimport ClusterLayout from '../layout/cluster-layout';\nimport areNumbers from '../utils/are-numbers';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { defined } from '../../common';\n\nvar BoxPlotChart = function (CandlestickChart) {\n  function BoxPlotChart() {\n    CandlestickChart.apply(this, arguments);\n  }\n\n  if (CandlestickChart) BoxPlotChart.__proto__ = CandlestickChart;\n  BoxPlotChart.prototype = Object.create(CandlestickChart && CandlestickChart.prototype);\n  BoxPlotChart.prototype.constructor = BoxPlotChart;\n\n  BoxPlotChart.prototype.addValue = function addValue(data, fields) {\n    var categoryIx = fields.categoryIx;\n    var category = fields.category;\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var ref = this;\n    var children = ref.children;\n    var options = ref.options;\n    var value = data.valueFields;\n    var valueParts = this.splitValue(value);\n    var hasValue = areNumbers(valueParts);\n    var dataItem = series.data[categoryIx];\n    var categoryPoints = this.categoryPoints[categoryIx];\n    var point;\n\n    if (!categoryPoints) {\n      this.categoryPoints[categoryIx] = categoryPoints = [];\n    }\n\n    if (hasValue) {\n      point = this.createPoint(data, fields);\n    }\n\n    var cluster = children[categoryIx];\n\n    if (!cluster) {\n      cluster = new ClusterLayout({\n        vertical: options.invertAxes,\n        gap: options.gap,\n        spacing: options.spacing,\n        rtl: !options.invertAxes && (this.chartService || {}).rtl\n      });\n      this.append(cluster);\n    }\n\n    if (point) {\n      this.updateRange(value, fields);\n      cluster.append(point);\n      point.categoryIx = categoryIx;\n      point.category = category;\n      point.series = series;\n      point.seriesIx = seriesIx;\n      point.owner = this;\n      point.dataItem = dataItem;\n    }\n\n    this.points.push(point);\n    categoryPoints.push(point);\n  };\n\n  BoxPlotChart.prototype.pointType = function pointType() {\n    if (this.options.invertAxes) {\n      return VerticalBoxPlot;\n    }\n\n    return BoxPlot;\n  };\n\n  BoxPlotChart.prototype.splitValue = function splitValue(value) {\n    return [value.lower, value.q1, value.median, value.q3, value.upper];\n  };\n\n  BoxPlotChart.prototype.updateRange = function updateRange(value, fields) {\n    var axisName = fields.series.axis;\n    var axisRange = this.valueAxisRanges[axisName];\n    var parts = this.splitValue(value).concat(this.filterOutliers(value.outliers));\n\n    if (defined(value.mean)) {\n      parts = parts.concat(value.mean);\n    }\n\n    axisRange = this.valueAxisRanges[axisName] = axisRange || {\n      min: MAX_VALUE,\n      max: MIN_VALUE\n    };\n    axisRange = this.valueAxisRanges[axisName] = {\n      min: Math.min.apply(Math, parts.concat([axisRange.min])),\n      max: Math.max.apply(Math, parts.concat([axisRange.max]))\n    };\n  };\n\n  BoxPlotChart.prototype.formatPointValue = function formatPointValue(point, format) {\n    var value = point.value;\n    return this.chartService.format.auto(format, value.lower, value.q1, value.median, value.q3, value.upper, value.mean, point.category);\n  };\n\n  BoxPlotChart.prototype.filterOutliers = function filterOutliers(items) {\n    var length = (items || []).length;\n    var result = [];\n\n    for (var i = 0; i < length; i++) {\n      var item = items[i];\n\n      if (defined(item) && item !== null) {\n        result.push(item);\n      }\n    }\n\n    return result;\n  };\n\n  return BoxPlotChart;\n}(CandlestickChart);\n\nexport default BoxPlotChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/box-plot-chart/box-plot-chart.js"],"names":["CandlestickChart","VerticalBoxPlot","BoxPlot","ClusterLayout","areNumbers","MIN_VALUE","MAX_VALUE","defined","BoxPlotChart","apply","arguments","__proto__","prototype","Object","create","constructor","addValue","data","fields","categoryIx","category","series","seriesIx","ref","children","options","value","valueFields","valueParts","splitValue","hasValue","dataItem","categoryPoints","point","createPoint","cluster","vertical","invertAxes","gap","spacing","rtl","chartService","append","updateRange","owner","points","push","pointType","lower","q1","median","q3","upper","axisName","axis","axisRange","valueAxisRanges","parts","concat","filterOutliers","outliers","mean","min","max","Math","formatPointValue","format","auto","items","length","result","i","item"],"mappings":"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","sourcesContent":["import CandlestickChart from '../candlestick-chart/candlestick-chart';\nimport VerticalBoxPlot from './vertical-box-plot';\nimport BoxPlot from './box-plot';\nimport ClusterLayout from '../layout/cluster-layout';\n\nimport areNumbers from '../utils/are-numbers';\n\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { defined } from '../../common';\n\nvar BoxPlotChart = (function (CandlestickChart) {\n    function BoxPlotChart () {\n        CandlestickChart.apply(this, arguments);\n    }\n\n    if ( CandlestickChart ) BoxPlotChart.__proto__ = CandlestickChart;\n    BoxPlotChart.prototype = Object.create( CandlestickChart && CandlestickChart.prototype );\n    BoxPlotChart.prototype.constructor = BoxPlotChart;\n\n    BoxPlotChart.prototype.addValue = function addValue (data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var ref = this;\n        var children = ref.children;\n        var options = ref.options;\n        var value = data.valueFields;\n        var valueParts = this.splitValue(value);\n        var hasValue = areNumbers(valueParts);\n        var dataItem = series.data[categoryIx];\n        var categoryPoints = this.categoryPoints[categoryIx];\n        var point;\n\n        if (!categoryPoints) {\n            this.categoryPoints[categoryIx] = categoryPoints = [];\n        }\n\n        if (hasValue) {\n            point = this.createPoint(data, fields);\n        }\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            cluster = new ClusterLayout({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (point) {\n            this.updateRange(value, fields);\n\n            cluster.append(point);\n\n            point.categoryIx = categoryIx;\n            point.category = category;\n            point.series = series;\n            point.seriesIx = seriesIx;\n            point.owner = this;\n            point.dataItem = dataItem;\n        }\n\n        this.points.push(point);\n        categoryPoints.push(point);\n    };\n\n    BoxPlotChart.prototype.pointType = function pointType () {\n        if (this.options.invertAxes) {\n            return VerticalBoxPlot;\n        }\n\n        return BoxPlot;\n    };\n\n    BoxPlotChart.prototype.splitValue = function splitValue (value) {\n        return [\n            value.lower, value.q1, value.median,\n            value.q3, value.upper\n        ];\n    };\n\n    BoxPlotChart.prototype.updateRange = function updateRange (value, fields) {\n        var axisName = fields.series.axis;\n        var axisRange = this.valueAxisRanges[axisName];\n        var parts = this.splitValue(value).concat(this.filterOutliers(value.outliers));\n\n        if (defined(value.mean)) {\n            parts = parts.concat(value.mean);\n        }\n\n        axisRange = this.valueAxisRanges[axisName] =\n            axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n        axisRange = this.valueAxisRanges[axisName] = {\n            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),\n            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))\n        };\n    };\n\n    BoxPlotChart.prototype.formatPointValue = function formatPointValue (point, format) {\n        var value = point.value;\n\n        return this.chartService.format.auto(format,\n            value.lower, value.q1, value.median,\n            value.q3, value.upper, value.mean, point.category\n        );\n    };\n\n    BoxPlotChart.prototype.filterOutliers = function filterOutliers (items) {\n        var length = (items || []).length;\n        var result = [];\n\n        for (var i = 0; i < length; i++) {\n            var item = items[i];\n            if (defined(item) && item !== null) {\n                result.push(item);\n            }\n        }\n\n        return result;\n    };\n\n    return BoxPlotChart;\n}(CandlestickChart));\n\nexport default BoxPlotChart;"]},"metadata":{},"sourceType":"module"}