{"ast":null,"code":"import BarChart from '../bar-chart/bar-chart';\nimport RangeBar from './range-bar';\nimport CategoricalChart from '../categorical-chart';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { isNumber } from '../../common';\n\nvar RangeBarChart = function (BarChart) {\n  function RangeBarChart() {\n    BarChart.apply(this, arguments);\n  }\n\n  if (BarChart) RangeBarChart.__proto__ = BarChart;\n  RangeBarChart.prototype = Object.create(BarChart && BarChart.prototype);\n  RangeBarChart.prototype.constructor = RangeBarChart;\n\n  RangeBarChart.prototype.pointType = function pointType() {\n    return RangeBar;\n  };\n\n  RangeBarChart.prototype.pointValue = function pointValue(data) {\n    return data.valueFields;\n  };\n\n  RangeBarChart.prototype.formatPointValue = function formatPointValue(point, format) {\n    if (point.value.from === null && point.value.to === null) {\n      return \"\";\n    }\n\n    return this.chartService.format.auto(format, point.value.from, point.value.to);\n  };\n\n  RangeBarChart.prototype.plotRange = function plotRange(point) {\n    if (!point) {\n      return 0;\n    }\n\n    return [point.value.from, point.value.to];\n  };\n\n  RangeBarChart.prototype.updateRange = function updateRange(value, fields) {\n    var axisName = fields.series.axis;\n    var from = value.from;\n    var to = value.to;\n    var axisRange = this.valueAxisRanges[axisName];\n\n    if (value !== null && isNumber(from) && isNumber(to)) {\n      axisRange = this.valueAxisRanges[axisName] = axisRange || {\n        min: MAX_VALUE,\n        max: MIN_VALUE\n      };\n      axisRange.min = Math.min(axisRange.min, from);\n      axisRange.max = Math.max(axisRange.max, from);\n      axisRange.min = Math.min(axisRange.min, to);\n      axisRange.max = Math.max(axisRange.max, to);\n    }\n  };\n\n  RangeBarChart.prototype.aboveAxis = function aboveAxis(point) {\n    var value = point.value;\n    return value.from < value.to;\n  };\n\n  return RangeBarChart;\n}(BarChart);\n\nRangeBarChart.prototype.plotLimits = CategoricalChart.prototype.plotLimits;\nexport default RangeBarChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/range-bar-chart/range-bar-chart.js"],"names":["BarChart","RangeBar","CategoricalChart","MIN_VALUE","MAX_VALUE","isNumber","RangeBarChart","apply","arguments","__proto__","prototype","Object","create","constructor","pointType","pointValue","data","valueFields","formatPointValue","point","format","value","from","to","chartService","auto","plotRange","updateRange","fields","axisName","series","axis","axisRange","valueAxisRanges","min","max","Math","aboveAxis","plotLimits"],"mappings":"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","sourcesContent":["import BarChart from '../bar-chart/bar-chart';\nimport RangeBar from './range-bar';\nimport CategoricalChart from '../categorical-chart';\n\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { isNumber } from '../../common';\n\nvar RangeBarChart = (function (BarChart) {\n    function RangeBarChart () {\n        BarChart.apply(this, arguments);\n    }\n\n    if ( BarChart ) RangeBarChart.__proto__ = BarChart;\n    RangeBarChart.prototype = Object.create( BarChart && BarChart.prototype );\n    RangeBarChart.prototype.constructor = RangeBarChart;\n\n    RangeBarChart.prototype.pointType = function pointType () {\n        return RangeBar;\n    };\n\n    RangeBarChart.prototype.pointValue = function pointValue (data) {\n        return data.valueFields;\n    };\n\n    RangeBarChart.prototype.formatPointValue = function formatPointValue (point, format) {\n        if (point.value.from === null && point.value.to === null) {\n            return \"\";\n        }\n\n        return this.chartService.format.auto(format, point.value.from, point.value.to);\n    };\n\n    RangeBarChart.prototype.plotRange = function plotRange (point) {\n        if (!point) {\n            return 0;\n        }\n\n        return [ point.value.from, point.value.to ];\n    };\n\n    RangeBarChart.prototype.updateRange = function updateRange (value, fields) {\n        var axisName = fields.series.axis;\n        var from = value.from;\n        var to = value.to;\n        var axisRange = this.valueAxisRanges[axisName];\n\n        if (value !== null && isNumber(from) && isNumber(to)) {\n            axisRange = this.valueAxisRanges[axisName] = axisRange || { min: MAX_VALUE, max: MIN_VALUE };\n\n            axisRange.min = Math.min(axisRange.min, from);\n            axisRange.max = Math.max(axisRange.max, from);\n\n            axisRange.min = Math.min(axisRange.min, to);\n            axisRange.max = Math.max(axisRange.max, to);\n        }\n    };\n\n    RangeBarChart.prototype.aboveAxis = function aboveAxis (point) {\n        var value = point.value;\n        return value.from < value.to;\n    };\n\n    return RangeBarChart;\n}(BarChart));\n\nRangeBarChart.prototype.plotLimits = CategoricalChart.prototype.plotLimits;\n\nexport default RangeBarChart;"]},"metadata":{},"sourceType":"module"}