{"ast":null,"code":"import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport { Class } from '../common';\nvar DIRECTION_ANGLE = 0.001; //any value that will make the endAngle bigger than the start angle will work here.\n\nvar ShapeBuilder = function (Class) {\n  function ShapeBuilder() {\n    Class.apply(this, arguments);\n  }\n\n  if (Class) ShapeBuilder.__proto__ = Class;\n  ShapeBuilder.prototype = Object.create(Class && Class.prototype);\n  ShapeBuilder.prototype.constructor = ShapeBuilder;\n\n  ShapeBuilder.prototype.createRing = function createRing(sector, options) {\n    var startAngle = sector.startAngle + 180;\n    var endAngle = sector.angle + startAngle; //required in order to avoid reversing the arc direction in cases like 0.000000000000001 + 100 === 100\n\n    if (sector.angle > 0 && startAngle === endAngle) {\n      endAngle += DIRECTION_ANGLE;\n    }\n\n    var center = new geom.Point(sector.center.x, sector.center.y);\n    var radius = Math.max(sector.radius, 0);\n    var innerRadius = Math.max(sector.innerRadius, 0);\n    var arc = new geom.Arc(center, {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radiusX: radius,\n      radiusY: radius\n    });\n    var path = draw.Path.fromArc(arc, options).close();\n\n    if (innerRadius) {\n      arc.radiusX = arc.radiusY = innerRadius;\n      var innerEnd = arc.pointAt(endAngle);\n      path.lineTo(innerEnd.x, innerEnd.y);\n      path.arc(endAngle, startAngle, innerRadius, innerRadius, true);\n    } else {\n      path.lineTo(center.x, center.y);\n    }\n\n    return path;\n  };\n\n  return ShapeBuilder;\n}(Class);\n\nShapeBuilder.current = new ShapeBuilder();\nexport default ShapeBuilder;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/shape-builder.js"],"names":["geometry","geom","drawing","draw","Class","DIRECTION_ANGLE","ShapeBuilder","apply","arguments","__proto__","prototype","Object","create","constructor","createRing","sector","options","startAngle","endAngle","angle","center","Point","x","y","radius","Math","max","innerRadius","arc","Arc","radiusX","radiusY","path","Path","fromArc","close","innerEnd","pointAt","lineTo","current"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,IAArB,EAA2BC,OAAO,IAAIC,IAAtC,QAAkD,yBAAlD;AACA,SAASC,KAAT,QAAsB,WAAtB;AAEA,IAAIC,eAAe,GAAG,KAAtB,C,CAA6B;;AAE7B,IAAIC,YAAY,GAAI,UAAUF,KAAV,EAAiB;AACjC,WAASE,YAAT,GAAyB;AACrBF,IAAAA,KAAK,CAACG,KAAN,CAAY,IAAZ,EAAkBC,SAAlB;AACH;;AAED,MAAKJ,KAAL,EAAaE,YAAY,CAACG,SAAb,GAAyBL,KAAzB;AACbE,EAAAA,YAAY,CAACI,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAeR,KAAK,IAAIA,KAAK,CAACM,SAA9B,CAAzB;AACAJ,EAAAA,YAAY,CAACI,SAAb,CAAuBG,WAAvB,GAAqCP,YAArC;;AAEAA,EAAAA,YAAY,CAACI,SAAb,CAAuBI,UAAvB,GAAoC,SAASA,UAAT,CAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AACtE,QAAIC,UAAU,GAAGF,MAAM,CAACE,UAAP,GAAoB,GAArC;AACA,QAAIC,QAAQ,GAAGH,MAAM,CAACI,KAAP,GAAeF,UAA9B,CAFsE,CAItE;;AACA,QAAIF,MAAM,CAACI,KAAP,GAAe,CAAf,IAAoBF,UAAU,KAAKC,QAAvC,EAAiD;AAC7CA,MAAAA,QAAQ,IAAIb,eAAZ;AACH;;AAED,QAAIe,MAAM,GAAG,IAAInB,IAAI,CAACoB,KAAT,CAAeN,MAAM,CAACK,MAAP,CAAcE,CAA7B,EAAgCP,MAAM,CAACK,MAAP,CAAcG,CAA9C,CAAb;AACA,QAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASX,MAAM,CAACS,MAAhB,EAAwB,CAAxB,CAAb;AACA,QAAIG,WAAW,GAAGF,IAAI,CAACC,GAAL,CAASX,MAAM,CAACY,WAAhB,EAA6B,CAA7B,CAAlB;AACA,QAAIC,GAAG,GAAG,IAAI3B,IAAI,CAAC4B,GAAT,CAAaT,MAAb,EAAqB;AAC3BH,MAAAA,UAAU,EAAEA,UADe;AAE3BC,MAAAA,QAAQ,EAAEA,QAFiB;AAG3BY,MAAAA,OAAO,EAAEN,MAHkB;AAI3BO,MAAAA,OAAO,EAAEP;AAJkB,KAArB,CAAV;AAMA,QAAIQ,IAAI,GAAG7B,IAAI,CAAC8B,IAAL,CAAUC,OAAV,CAAkBN,GAAlB,EAAuBZ,OAAvB,EAAgCmB,KAAhC,EAAX;;AAEA,QAAIR,WAAJ,EAAiB;AACbC,MAAAA,GAAG,CAACE,OAAJ,GAAcF,GAAG,CAACG,OAAJ,GAAcJ,WAA5B;AACA,UAAIS,QAAQ,GAAGR,GAAG,CAACS,OAAJ,CAAYnB,QAAZ,CAAf;AACAc,MAAAA,IAAI,CAACM,MAAL,CAAYF,QAAQ,CAACd,CAArB,EAAwBc,QAAQ,CAACb,CAAjC;AACAS,MAAAA,IAAI,CAACJ,GAAL,CAASV,QAAT,EAAmBD,UAAnB,EAA+BU,WAA/B,EAA4CA,WAA5C,EAAyD,IAAzD;AACH,KALD,MAKO;AACHK,MAAAA,IAAI,CAACM,MAAL,CAAYlB,MAAM,CAACE,CAAnB,EAAsBF,MAAM,CAACG,CAA7B;AACH;;AAED,WAAOS,IAAP;AACH,GA9BD;;AAgCA,SAAO1B,YAAP;AACH,CA1CmB,CA0ClBF,KA1CkB,CAApB;;AA4CAE,YAAY,CAACiC,OAAb,GAAuB,IAAIjC,YAAJ,EAAvB;AAEA,eAAeA,YAAf","sourcesContent":["import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport { Class } from '../common';\n\nvar DIRECTION_ANGLE = 0.001; //any value that will make the endAngle bigger than the start angle will work here.\n\nvar ShapeBuilder = (function (Class) {\n    function ShapeBuilder () {\n        Class.apply(this, arguments);\n    }\n\n    if ( Class ) ShapeBuilder.__proto__ = Class;\n    ShapeBuilder.prototype = Object.create( Class && Class.prototype );\n    ShapeBuilder.prototype.constructor = ShapeBuilder;\n\n    ShapeBuilder.prototype.createRing = function createRing (sector, options) {\n        var startAngle = sector.startAngle + 180;\n        var endAngle = sector.angle + startAngle;\n\n        //required in order to avoid reversing the arc direction in cases like 0.000000000000001 + 100 === 100\n        if (sector.angle > 0 && startAngle === endAngle) {\n            endAngle += DIRECTION_ANGLE;\n        }\n\n        var center = new geom.Point(sector.center.x, sector.center.y);\n        var radius = Math.max(sector.radius, 0);\n        var innerRadius = Math.max(sector.innerRadius, 0);\n        var arc = new geom.Arc(center, {\n            startAngle: startAngle,\n            endAngle: endAngle,\n            radiusX: radius,\n            radiusY: radius\n        });\n        var path = draw.Path.fromArc(arc, options).close();\n\n        if (innerRadius) {\n            arc.radiusX = arc.radiusY = innerRadius;\n            var innerEnd = arc.pointAt(endAngle);\n            path.lineTo(innerEnd.x, innerEnd.y);\n            path.arc(endAngle, startAngle, innerRadius, innerRadius, true);\n        } else {\n            path.lineTo(center.x, center.y);\n        }\n\n        return path;\n    };\n\n    return ShapeBuilder;\n}(Class));\n\nShapeBuilder.current = new ShapeBuilder();\n\nexport default ShapeBuilder;"]},"metadata":{},"sourceType":"module"}