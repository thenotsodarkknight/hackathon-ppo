{"ast":null,"code":"import IntlService from './intl-service';\nimport { FORMAT_REGEX } from '../common/constants';\nimport { isString } from '../common';\nvar FORMAT_REPLACE_REGEX = /\\{(\\d+)(:[^\\}]+)?\\}/g;\n\nvar FormatService = function FormatService(intlService) {\n  this._intlService = intlService;\n};\n\nvar prototypeAccessors = {\n  intl: {\n    configurable: true\n  }\n};\n\nprototypeAccessors.intl.get = function () {\n  return this._intlService || IntlService.implementation;\n};\n\nprototypeAccessors.intl.set = function (value) {\n  this._intlService = value;\n};\n\nFormatService.prototype.auto = function auto(formatString) {\n  var values = [],\n      len = arguments.length - 1;\n\n  while (len-- > 0) values[len] = arguments[len + 1];\n\n  var intl = this.intl;\n\n  if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n    return intl.format.apply(intl, [formatString].concat(values));\n  }\n\n  return intl.toString(values[0], formatString);\n};\n\nFormatService.prototype.localeAuto = function localeAuto(formatString, values, locale) {\n  var intl = this.intl;\n  var result;\n\n  if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n    result = formatString.replace(FORMAT_REPLACE_REGEX, function (match, index, placeholderFormat) {\n      var value = values[parseInt(index, 10)];\n      return intl.toString(value, placeholderFormat ? placeholderFormat.substring(1) : \"\", locale);\n    });\n  } else {\n    result = intl.toString(values[0], formatString, locale);\n  }\n\n  return result;\n};\n\nObject.defineProperties(FormatService.prototype, prototypeAccessors);\nexport default FormatService;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/services/format-service.js"],"names":["IntlService","FORMAT_REGEX","isString","FORMAT_REPLACE_REGEX","FormatService","intlService","_intlService","prototypeAccessors","intl","configurable","get","implementation","set","value","prototype","auto","formatString","values","len","arguments","length","match","format","apply","concat","toString","localeAuto","locale","result","replace","index","placeholderFormat","parseInt","substring","Object","defineProperties"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,QAAT,QAAyB,WAAzB;AAEA,IAAIC,oBAAoB,GAAG,sBAA3B;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,WAAvB,EAAoC;AACpD,OAAKC,YAAL,GAAoBD,WAApB;AACH,CAFD;;AAIA,IAAIE,kBAAkB,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,YAAY,EAAE;AAAhB;AAAR,CAAzB;;AAEAF,kBAAkB,CAACC,IAAnB,CAAwBE,GAAxB,GAA8B,YAAY;AACtC,SAAO,KAAKJ,YAAL,IAAqBN,WAAW,CAACW,cAAxC;AACH,CAFD;;AAIAJ,kBAAkB,CAACC,IAAnB,CAAwBI,GAAxB,GAA8B,UAAUC,KAAV,EAAiB;AAC3C,OAAKP,YAAL,GAAoBO,KAApB;AACH,CAFD;;AAIAT,aAAa,CAACU,SAAd,CAAwBC,IAAxB,GAA+B,SAASA,IAAT,CAAeC,YAAf,EAA6B;AACpD,MAAIC,MAAM,GAAG,EAAb;AAAA,MAAiBC,GAAG,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAA1C;;AACA,SAAQF,GAAG,KAAK,CAAhB,EAAoBD,MAAM,CAAEC,GAAF,CAAN,GAAgBC,SAAS,CAAED,GAAG,GAAG,CAAR,CAAzB;;AAExB,MAAIV,IAAI,GAAG,KAAKA,IAAhB;;AAEA,MAAIN,QAAQ,CAACc,YAAD,CAAR,IAA0BA,YAAY,CAACK,KAAb,CAAmBpB,YAAnB,CAA9B,EAAgE;AAC5D,WAAOO,IAAI,CAACc,MAAL,CAAYC,KAAZ,CAAkBf,IAAlB,EAAwB,CAAEQ,YAAF,EAAiBQ,MAAjB,CAAyBP,MAAzB,CAAxB,CAAP;AACH;;AAED,SAAOT,IAAI,CAACiB,QAAL,CAAcR,MAAM,CAAC,CAAD,CAApB,EAAyBD,YAAzB,CAAP;AACH,CAXD;;AAaAZ,aAAa,CAACU,SAAd,CAAwBY,UAAxB,GAAqC,SAASA,UAAT,CAAqBV,YAArB,EAAmCC,MAAnC,EAA2CU,MAA3C,EAAmD;AACpF,MAAInB,IAAI,GAAG,KAAKA,IAAhB;AACA,MAAIoB,MAAJ;;AAEA,MAAI1B,QAAQ,CAACc,YAAD,CAAR,IAA0BA,YAAY,CAACK,KAAb,CAAmBpB,YAAnB,CAA9B,EAAgE;AAC5D2B,IAAAA,MAAM,GAAGZ,YAAY,CAACa,OAAb,CAAqB1B,oBAArB,EAA2C,UAASkB,KAAT,EAAgBS,KAAhB,EAAuBC,iBAAvB,EAA0C;AAC1F,UAAIlB,KAAK,GAAGI,MAAM,CAACe,QAAQ,CAACF,KAAD,EAAQ,EAAR,CAAT,CAAlB;AAEA,aAAOtB,IAAI,CAACiB,QAAL,CAAcZ,KAAd,EAAqBkB,iBAAiB,GAAGA,iBAAiB,CAACE,SAAlB,CAA4B,CAA5B,CAAH,GAAoC,EAA1E,EAA8EN,MAA9E,CAAP;AACH,KAJQ,CAAT;AAKH,GAND,MAMO;AACHC,IAAAA,MAAM,GAAGpB,IAAI,CAACiB,QAAL,CAAcR,MAAM,CAAC,CAAD,CAApB,EAAyBD,YAAzB,EAAuCW,MAAvC,CAAT;AACH;;AAED,SAAOC,MAAP;AACH,CAfD;;AAiBAM,MAAM,CAACC,gBAAP,CAAyB/B,aAAa,CAACU,SAAvC,EAAkDP,kBAAlD;AAEA,eAAeH,aAAf","sourcesContent":["import IntlService from './intl-service';\nimport { FORMAT_REGEX } from '../common/constants';\nimport { isString } from '../common';\n\nvar FORMAT_REPLACE_REGEX = /\\{(\\d+)(:[^\\}]+)?\\}/g;\n\nvar FormatService = function FormatService(intlService) {\n    this._intlService = intlService;\n};\n\nvar prototypeAccessors = { intl: { configurable: true } };\n\nprototypeAccessors.intl.get = function () {\n    return this._intlService || IntlService.implementation;\n};\n\nprototypeAccessors.intl.set = function (value) {\n    this._intlService = value;\n};\n\nFormatService.prototype.auto = function auto (formatString) {\n        var values = [], len = arguments.length - 1;\n        while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];\n\n    var intl = this.intl;\n\n    if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n        return intl.format.apply(intl, [ formatString ].concat( values ));\n    }\n\n    return intl.toString(values[0], formatString);\n};\n\nFormatService.prototype.localeAuto = function localeAuto (formatString, values, locale) {\n    var intl = this.intl;\n    var result;\n\n    if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n        result = formatString.replace(FORMAT_REPLACE_REGEX, function(match, index, placeholderFormat) {\n            var value = values[parseInt(index, 10)];\n\n            return intl.toString(value, placeholderFormat ? placeholderFormat.substring(1) : \"\", locale);\n        });\n    } else {\n        result = intl.toString(values[0], formatString, locale);\n    }\n\n    return result;\n};\n\nObject.defineProperties( FormatService.prototype, prototypeAccessors );\n\nexport default FormatService;"]},"metadata":{},"sourceType":"module"}