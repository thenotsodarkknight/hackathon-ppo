{"ast":null,"code":"import Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION, X, Y } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions } from '../common';\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\nvar MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nvar NumericAxis = function (Axis) {\n  function NumericAxis(seriesMin, seriesMax, options, chartService) {\n    Axis.call(this, Object.assign({}, options, {\n      seriesMin: seriesMin,\n      seriesMax: seriesMax\n    }), chartService);\n  }\n\n  if (Axis) NumericAxis.__proto__ = Axis;\n  NumericAxis.prototype = Object.create(Axis && Axis.prototype);\n  NumericAxis.prototype.constructor = NumericAxis;\n\n  NumericAxis.prototype.initUserOptions = function initUserOptions(options) {\n    var autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n    this.totalOptions = totalAxisOptions(autoOptions, options);\n    return axisOptions(autoOptions, options);\n  };\n\n  NumericAxis.prototype.initFields = function initFields() {\n    this.totalMin = this.totalOptions.min;\n    this.totalMax = this.totalOptions.max;\n    this.totalMajorUnit = this.totalOptions.majorUnit;\n    this.seriesMin = this.options.seriesMin;\n    this.seriesMax = this.options.seriesMax;\n  };\n\n  NumericAxis.prototype.clone = function clone() {\n    return new NumericAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  };\n\n  NumericAxis.prototype.startValue = function startValue() {\n    return 0;\n  };\n\n  NumericAxis.prototype.range = function range() {\n    var options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  };\n\n  NumericAxis.prototype.getDivisions = function getDivisions(stepValue) {\n    if (stepValue === 0) {\n      return 1;\n    }\n\n    var options = this.options;\n    var range = options.max - options.min;\n    return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n  };\n\n  NumericAxis.prototype.getTickPositions = function getTickPositions(unit, skipUnit) {\n    var options = this.options;\n    var vertical = options.vertical;\n    var reverse = options.reverse;\n    var lineBox = this.lineBox();\n    var lineSize = vertical ? lineBox.height() : lineBox.width();\n    var range = options.max - options.min;\n    var scale = lineSize / range;\n    var step = unit * scale;\n    var divisions = this.getDivisions(unit);\n    var dir = (vertical ? -1 : 1) * (reverse ? -1 : 1);\n    var startEdge = dir === 1 ? 1 : 2;\n    var positions = [];\n    var pos = lineBox[(vertical ? Y : X) + startEdge];\n    var skipStep = 0;\n\n    if (skipUnit) {\n      skipStep = skipUnit / unit;\n    }\n\n    for (var idx = 0; idx < divisions; idx++) {\n      if (idx % skipStep !== 0) {\n        positions.push(round(pos, COORD_PRECISION));\n      }\n\n      pos = pos + step * dir;\n    }\n\n    return positions;\n  };\n\n  NumericAxis.prototype.getMajorTickPositions = function getMajorTickPositions() {\n    return this.getTickPositions(this.options.majorUnit);\n  };\n\n  NumericAxis.prototype.getMinorTickPositions = function getMinorTickPositions() {\n    return this.getTickPositions(this.options.minorUnit);\n  };\n\n  NumericAxis.prototype.getSlot = function getSlot(a, b, limit) {\n    if (limit === void 0) limit = false;\n    var options = this.options;\n    var vertical = options.vertical;\n    var reverse = options.reverse;\n    var valueAxis = vertical ? Y : X;\n    var lineBox = this.lineBox();\n    var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];\n    var lineSize = vertical ? lineBox.height() : lineBox.width();\n    var dir = reverse ? -1 : 1;\n    var step = dir * (lineSize / (options.max - options.min));\n    var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n    var start = a;\n    var end = b;\n\n    if (!defined(start)) {\n      start = end || 0;\n    }\n\n    if (!defined(end)) {\n      end = start || 0;\n    }\n\n    if (limit) {\n      start = Math.max(Math.min(start, options.max), options.min);\n      end = Math.max(Math.min(end, options.max), options.min);\n    }\n\n    var p1, p2;\n\n    if (vertical) {\n      p1 = options.max - Math.max(start, end);\n      p2 = options.max - Math.min(start, end);\n    } else {\n      p1 = Math.min(start, end) - options.min;\n      p2 = Math.max(start, end) - options.min;\n    }\n\n    slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));\n    slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));\n    return slotBox;\n  };\n\n  NumericAxis.prototype.getValue = function getValue(point) {\n    var options = this.options;\n    var vertical = options.vertical;\n    var reverse = options.reverse;\n    var max = Number(options.max);\n    var min = Number(options.min);\n    var valueAxis = vertical ? Y : X;\n    var lineBox = this.lineBox();\n    var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];\n    var lineSize = vertical ? lineBox.height() : lineBox.width();\n    var dir = reverse ? -1 : 1;\n    var offset = dir * (point[valueAxis] - lineStart);\n    var step = (max - min) / lineSize;\n    var valueOffset = offset * step;\n\n    if (offset < 0 || offset > lineSize) {\n      return null;\n    }\n\n    var value = vertical ? max - valueOffset : min + valueOffset;\n    return round(value, DEFAULT_PRECISION);\n  };\n\n  NumericAxis.prototype.translateRange = function translateRange(delta) {\n    var options = this.options;\n    var vertical = options.vertical;\n    var reverse = options.reverse;\n    var max = options.max;\n    var min = options.min;\n    var lineBox = this.lineBox();\n    var size = vertical ? lineBox.height() : lineBox.width();\n    var range = max - min;\n    var scale = size / range;\n    var offset = round(delta / scale, DEFAULT_PRECISION);\n\n    if ((vertical || reverse) && !(vertical && reverse)) {\n      offset = -offset;\n    }\n\n    return {\n      min: min + offset,\n      max: max + offset,\n      offset: offset\n    };\n  };\n\n  NumericAxis.prototype.scaleRange = function scaleRange(delta) {\n    var options = this.options;\n    var offset = -delta * options.majorUnit;\n    return {\n      min: options.min - offset,\n      max: options.max + offset\n    };\n  };\n\n  NumericAxis.prototype.labelsCount = function labelsCount() {\n    return this.getDivisions(this.options.majorUnit);\n  };\n\n  NumericAxis.prototype.createAxisLabel = function createAxisLabel(index, labelOptions) {\n    var options = this.options;\n    var value = round(options.min + index * options.majorUnit, DEFAULT_PRECISION);\n    var text = this.axisLabelText(value, null, labelOptions);\n    return new AxisLabel(value, text, index, null, labelOptions);\n  };\n\n  NumericAxis.prototype.shouldRenderNote = function shouldRenderNote(value) {\n    var range = this.range();\n    return range.min <= value && value <= range.max;\n  };\n\n  NumericAxis.prototype.pan = function pan(delta) {\n    var range = this.translateRange(delta);\n    return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n  };\n\n  NumericAxis.prototype.pointsRange = function pointsRange(start, end) {\n    var startValue = this.getValue(start);\n    var endValue = this.getValue(end);\n    var min = Math.min(startValue, endValue);\n    var max = Math.max(startValue, endValue);\n\n    if (this.isValidRange(min, max)) {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  };\n\n  NumericAxis.prototype.zoomRange = function zoomRange(delta) {\n    var ref = this;\n    var totalMin = ref.totalMin;\n    var totalMax = ref.totalMax;\n    var newRange = this.scaleRange(delta);\n    var min = limitValue(newRange.min, totalMin, totalMax);\n    var max = limitValue(newRange.max, totalMin, totalMax);\n\n    if (this.isValidRange(min, max)) {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  };\n\n  NumericAxis.prototype.isValidRange = function isValidRange(min, max) {\n    return max - min > MIN_VALUE_RANGE;\n  };\n\n  return NumericAxis;\n}(Axis);\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n  var narrowRange = options.narrowRange;\n  var autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n  var autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n  var majorUnit = autoMajorUnit(autoMin, autoMax);\n  var autoOptions = {\n    majorUnit: majorUnit\n  };\n\n  if (options.roundToMajorUnit !== false) {\n    if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n      autoMin -= majorUnit;\n    }\n\n    if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n      autoMax += majorUnit;\n    }\n  }\n\n  autoOptions.min = floor(autoMin, majorUnit);\n  autoOptions.max = ceil(autoMax, majorUnit);\n  return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n  return {\n    min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n    max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n    majorUnit: autoOptions.majorUnit\n  };\n}\n\nfunction clearNullValues(options, fields) {\n  for (var idx = 0; idx < fields.length; idx++) {\n    var field = fields[idx];\n\n    if (options[field] === null) {\n      options[field] = undefined;\n    }\n  }\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n  var options = userOptions;\n  var userSetMin, userSetMax;\n\n  if (userOptions) {\n    clearNullValues(userOptions, ['min', 'max']);\n    userSetMin = defined(userOptions.min);\n    userSetMax = defined(userOptions.max);\n    var userSetLimits = userSetMin || userSetMax;\n\n    if (userSetLimits) {\n      if (userOptions.min === userOptions.max) {\n        if (userOptions.min > 0) {\n          userOptions.min = 0;\n        } else {\n          userOptions.max = 1;\n        }\n      }\n    }\n\n    if (userOptions.majorUnit) {\n      autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n      autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n    } else if (userSetLimits) {\n      options = deepExtend(autoOptions, userOptions); // Determine an auto major unit after min/max have been set\n\n      autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n    }\n  }\n\n  autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n  var result = deepExtend(autoOptions, options);\n\n  if (result.min >= result.max) {\n    if (userSetMin && !userSetMax) {\n      result.max = result.min + result.majorUnit;\n    } else if (!userSetMin && userSetMax) {\n      result.min = result.max - result.majorUnit;\n    }\n  }\n\n  return result;\n}\n\nfunction remainderClose(value, divisor, ratio) {\n  var remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n  var threshold = divisor * (1 - ratio);\n  return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n  type: \"numeric\",\n  min: 0,\n  max: 1,\n  vertical: true,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    format: \"#.####################\"\n  },\n  zIndex: 1\n});\nexport default NumericAxis;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/numeric-axis.js"],"names":["Axis","AxisLabel","Box","BLACK","DEFAULT_PRECISION","COORD_PRECISION","X","Y","deepExtend","defined","limitValue","round","setDefaultOptions","autoMajorUnit","autoAxisMin","autoAxisMax","floor","ceil","limitCoordinate","MIN_VALUE_RANGE","Math","pow","NumericAxis","seriesMin","seriesMax","options","chartService","call","Object","assign","__proto__","prototype","create","constructor","initUserOptions","autoOptions","autoAxisOptions","totalOptions","totalAxisOptions","axisOptions","initFields","totalMin","min","totalMax","max","totalMajorUnit","majorUnit","clone","startValue","range","getDivisions","stepValue","getTickPositions","unit","skipUnit","vertical","reverse","lineBox","lineSize","height","width","scale","step","divisions","dir","startEdge","positions","pos","skipStep","idx","push","getMajorTickPositions","getMinorTickPositions","minorUnit","getSlot","a","b","limit","valueAxis","lineStart","slotBox","x1","y1","start","end","p1","p2","getValue","point","Number","offset","valueOffset","value","translateRange","delta","size","scaleRange","labelsCount","createAxisLabel","index","labelOptions","text","axisLabelText","shouldRenderNote","pan","limitRange","pointsRange","endValue","isValidRange","zoomRange","ref","newRange","narrowRange","autoMin","autoMax","roundToMajorUnit","remainderClose","clearNullValues","fields","length","field","undefined","userOptions","userSetMin","userSetMax","userSetLimits","result","divisor","ratio","remainder","abs","threshold","type","majorGridLines","visible","color","labels","format","zIndex"],"mappings":"AACA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,KAAT,EAAgBC,iBAAhB,EAAmCC,eAAnC,EAAoDC,CAApD,EAAuDC,CAAvD,QAAgE,qBAAhE;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,UAA9B,EAA0CC,KAA1C,EAAiDC,iBAAjD,QAA0E,WAA1E;AAEA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AAEA,IAAIC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACjB,iBAAD,GAAqB,CAAlC,CAAtB;;AAEA,IAAIkB,WAAW,GAAI,UAAUtB,IAAV,EAAgB;AAC/B,WAASsB,WAAT,CAAqBC,SAArB,EAAgCC,SAAhC,EAA2CC,OAA3C,EAAoDC,YAApD,EAAkE;AAC9D1B,IAAAA,IAAI,CAAC2B,IAAL,CAAU,IAAV,EAAgBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,OAAlB,EAA2B;AACvCF,MAAAA,SAAS,EAAEA,SAD4B;AAEvCC,MAAAA,SAAS,EAAEA;AAF4B,KAA3B,CAAhB,EAGIE,YAHJ;AAIH;;AAED,MAAK1B,IAAL,EAAYsB,WAAW,CAACQ,SAAZ,GAAwB9B,IAAxB;AACZsB,EAAAA,WAAW,CAACS,SAAZ,GAAwBH,MAAM,CAACI,MAAP,CAAehC,IAAI,IAAIA,IAAI,CAAC+B,SAA5B,CAAxB;AACAT,EAAAA,WAAW,CAACS,SAAZ,CAAsBE,WAAtB,GAAoCX,WAApC;;AAEAA,EAAAA,WAAW,CAACS,SAAZ,CAAsBG,eAAtB,GAAwC,SAASA,eAAT,CAA0BT,OAA1B,EAAmC;AACvE,QAAIU,WAAW,GAAGC,eAAe,CAACX,OAAO,CAACF,SAAT,EAAoBE,OAAO,CAACD,SAA5B,EAAuCC,OAAvC,CAAjC;AACA,SAAKY,YAAL,GAAoBC,gBAAgB,CAACH,WAAD,EAAcV,OAAd,CAApC;AAEA,WAAOc,WAAW,CAACJ,WAAD,EAAcV,OAAd,CAAlB;AACH,GALD;;AAOAH,EAAAA,WAAW,CAACS,SAAZ,CAAsBS,UAAtB,GAAmC,SAASA,UAAT,GAAuB;AACtD,SAAKC,QAAL,GAAgB,KAAKJ,YAAL,CAAkBK,GAAlC;AACA,SAAKC,QAAL,GAAgB,KAAKN,YAAL,CAAkBO,GAAlC;AACA,SAAKC,cAAL,GAAsB,KAAKR,YAAL,CAAkBS,SAAxC;AACA,SAAKvB,SAAL,GAAiB,KAAKE,OAAL,CAAaF,SAA9B;AACA,SAAKC,SAAL,GAAiB,KAAKC,OAAL,CAAaD,SAA9B;AACH,GAND;;AAQAF,EAAAA,WAAW,CAACS,SAAZ,CAAsBgB,KAAtB,GAA8B,SAASA,KAAT,GAAkB;AAC5C,WAAO,IAAIzB,WAAJ,CACH,KAAKC,SADF,EAEH,KAAKC,SAFF,EAGHI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKJ,OAAvB,CAHG,EAIH,KAAKC,YAJF,CAAP;AAMH,GAPD;;AASAJ,EAAAA,WAAW,CAACS,SAAZ,CAAsBiB,UAAtB,GAAmC,SAASA,UAAT,GAAuB;AACtD,WAAO,CAAP;AACH,GAFD;;AAIA1B,EAAAA,WAAW,CAACS,SAAZ,CAAsBkB,KAAtB,GAA8B,SAASA,KAAT,GAAkB;AAC5C,QAAIxB,OAAO,GAAG,KAAKA,OAAnB;AACA,WAAO;AAAEiB,MAAAA,GAAG,EAAEjB,OAAO,CAACiB,GAAf;AAAoBE,MAAAA,GAAG,EAAEnB,OAAO,CAACmB;AAAjC,KAAP;AACH,GAHD;;AAKAtB,EAAAA,WAAW,CAACS,SAAZ,CAAsBmB,YAAtB,GAAqC,SAASA,YAAT,CAAuBC,SAAvB,EAAkC;AACnE,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AACjB,aAAO,CAAP;AACH;;AAED,QAAI1B,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIwB,KAAK,GAAGxB,OAAO,CAACmB,GAAR,GAAcnB,OAAO,CAACiB,GAAlC;AAEA,WAAOtB,IAAI,CAACJ,KAAL,CAAWL,KAAK,CAACsC,KAAK,GAAGE,SAAT,EAAoB9C,eAApB,CAAhB,IAAwD,CAA/D;AACH,GATD;;AAWAiB,EAAAA,WAAW,CAACS,SAAZ,CAAsBqB,gBAAtB,GAAyC,SAASA,gBAAT,CAA2BC,IAA3B,EAAiCC,QAAjC,EAA2C;AAChF,QAAI7B,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAI8B,QAAQ,GAAG9B,OAAO,CAAC8B,QAAvB;AACA,QAAIC,OAAO,GAAG/B,OAAO,CAAC+B,OAAtB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAL,EAAd;AACA,QAAIC,QAAQ,GAAGH,QAAQ,GAAGE,OAAO,CAACE,MAAR,EAAH,GAAsBF,OAAO,CAACG,KAAR,EAA7C;AACA,QAAIX,KAAK,GAAGxB,OAAO,CAACmB,GAAR,GAAcnB,OAAO,CAACiB,GAAlC;AACA,QAAImB,KAAK,GAAGH,QAAQ,GAAGT,KAAvB;AACA,QAAIa,IAAI,GAAGT,IAAI,GAAGQ,KAAlB;AACA,QAAIE,SAAS,GAAG,KAAKb,YAAL,CAAkBG,IAAlB,CAAhB;AACA,QAAIW,GAAG,GAAG,CAACT,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAAjB,KAAuBC,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAAtC,CAAV;AACA,QAAIS,SAAS,GAAGD,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgB,CAAhC;AACA,QAAIE,SAAS,GAAG,EAAhB;AACA,QAAIC,GAAG,GAAGV,OAAO,CAAC,CAACF,QAAQ,GAAGhD,CAAH,GAAOD,CAAhB,IAAqB2D,SAAtB,CAAjB;AACA,QAAIG,QAAQ,GAAG,CAAf;;AAEA,QAAId,QAAJ,EAAc;AACVc,MAAAA,QAAQ,GAAGd,QAAQ,GAAGD,IAAtB;AACH;;AAED,SAAK,IAAIgB,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,SAAxB,EAAmCM,GAAG,EAAtC,EAA0C;AACtC,UAAIA,GAAG,GAAGD,QAAN,KAAmB,CAAvB,EAA0B;AACtBF,QAAAA,SAAS,CAACI,IAAV,CAAe3D,KAAK,CAACwD,GAAD,EAAM9D,eAAN,CAApB;AACH;;AAED8D,MAAAA,GAAG,GAAGA,GAAG,GAAGL,IAAI,GAAGE,GAAnB;AACH;;AAED,WAAOE,SAAP;AACH,GA7BD;;AA+BA5C,EAAAA,WAAW,CAACS,SAAZ,CAAsBwC,qBAAtB,GAA8C,SAASA,qBAAT,GAAkC;AAC5E,WAAO,KAAKnB,gBAAL,CAAsB,KAAK3B,OAAL,CAAaqB,SAAnC,CAAP;AACH,GAFD;;AAIAxB,EAAAA,WAAW,CAACS,SAAZ,CAAsByC,qBAAtB,GAA8C,SAASA,qBAAT,GAAkC;AAC5E,WAAO,KAAKpB,gBAAL,CAAsB,KAAK3B,OAAL,CAAagD,SAAnC,CAAP;AACH,GAFD;;AAIAnD,EAAAA,WAAW,CAACS,SAAZ,CAAsB2C,OAAtB,GAAgC,SAASA,OAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,KAAxB,EAA+B;AAC3D,QAAKA,KAAK,KAAK,KAAK,CAApB,EAAwBA,KAAK,GAAG,KAAR;AAExB,QAAIpD,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAI8B,QAAQ,GAAG9B,OAAO,CAAC8B,QAAvB;AACA,QAAIC,OAAO,GAAG/B,OAAO,CAAC+B,OAAtB;AACA,QAAIsB,SAAS,GAAGvB,QAAQ,GAAGhD,CAAH,GAAOD,CAA/B;AACA,QAAImD,OAAO,GAAG,KAAKA,OAAL,EAAd;AACA,QAAIsB,SAAS,GAAGtB,OAAO,CAACqB,SAAS,IAAItB,OAAO,GAAG,CAAH,GAAO,CAAlB,CAAV,CAAvB;AACA,QAAIE,QAAQ,GAAGH,QAAQ,GAAGE,OAAO,CAACE,MAAR,EAAH,GAAsBF,OAAO,CAACG,KAAR,EAA7C;AACA,QAAII,GAAG,GAAGR,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAAzB;AACA,QAAIM,IAAI,GAAGE,GAAG,IAAIN,QAAQ,IAAIjC,OAAO,CAACmB,GAAR,GAAcnB,OAAO,CAACiB,GAA1B,CAAZ,CAAd;AACA,QAAIsC,OAAO,GAAG,IAAI9E,GAAJ,CAAQuD,OAAO,CAACwB,EAAhB,EAAoBxB,OAAO,CAACyB,EAA5B,EAAgCzB,OAAO,CAACwB,EAAxC,EAA4CxB,OAAO,CAACyB,EAApD,CAAd;AAEA,QAAIC,KAAK,GAAGR,CAAZ;AACA,QAAIS,GAAG,GAAGR,CAAV;;AAEA,QAAI,CAACnE,OAAO,CAAC0E,KAAD,CAAZ,EAAqB;AACjBA,MAAAA,KAAK,GAAGC,GAAG,IAAI,CAAf;AACH;;AAED,QAAI,CAAC3E,OAAO,CAAC2E,GAAD,CAAZ,EAAmB;AACfA,MAAAA,GAAG,GAAGD,KAAK,IAAI,CAAf;AACH;;AAED,QAAIN,KAAJ,EAAW;AACPM,MAAAA,KAAK,GAAG/D,IAAI,CAACwB,GAAL,CAASxB,IAAI,CAACsB,GAAL,CAASyC,KAAT,EAAgB1D,OAAO,CAACmB,GAAxB,CAAT,EAAuCnB,OAAO,CAACiB,GAA/C,CAAR;AACA0C,MAAAA,GAAG,GAAGhE,IAAI,CAACwB,GAAL,CAASxB,IAAI,CAACsB,GAAL,CAAS0C,GAAT,EAAc3D,OAAO,CAACmB,GAAtB,CAAT,EAAqCnB,OAAO,CAACiB,GAA7C,CAAN;AACH;;AAED,QAAI2C,EAAJ,EAAQC,EAAR;;AAEA,QAAI/B,QAAJ,EAAc;AACV8B,MAAAA,EAAE,GAAG5D,OAAO,CAACmB,GAAR,GAAcxB,IAAI,CAACwB,GAAL,CAASuC,KAAT,EAAgBC,GAAhB,CAAnB;AACAE,MAAAA,EAAE,GAAG7D,OAAO,CAACmB,GAAR,GAAcxB,IAAI,CAACsB,GAAL,CAASyC,KAAT,EAAgBC,GAAhB,CAAnB;AACH,KAHD,MAGO;AACHC,MAAAA,EAAE,GAAGjE,IAAI,CAACsB,GAAL,CAASyC,KAAT,EAAgBC,GAAhB,IAAuB3D,OAAO,CAACiB,GAApC;AACA4C,MAAAA,EAAE,GAAGlE,IAAI,CAACwB,GAAL,CAASuC,KAAT,EAAgBC,GAAhB,IAAuB3D,OAAO,CAACiB,GAApC;AACH;;AAEDsC,IAAAA,OAAO,CAACF,SAAS,GAAG,CAAb,CAAP,GAAyB5D,eAAe,CAAC6D,SAAS,GAAGjB,IAAI,IAAIN,OAAO,GAAG8B,EAAH,GAAQD,EAAnB,CAAjB,CAAxC;AACAL,IAAAA,OAAO,CAACF,SAAS,GAAG,CAAb,CAAP,GAAyB5D,eAAe,CAAC6D,SAAS,GAAGjB,IAAI,IAAIN,OAAO,GAAG6B,EAAH,GAAQC,EAAnB,CAAjB,CAAxC;AAEA,WAAON,OAAP;AACH,GA5CD;;AA8CA1D,EAAAA,WAAW,CAACS,SAAZ,CAAsBwD,QAAtB,GAAiC,SAASA,QAAT,CAAmBC,KAAnB,EAA0B;AACvD,QAAI/D,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAI8B,QAAQ,GAAG9B,OAAO,CAAC8B,QAAvB;AACA,QAAIC,OAAO,GAAG/B,OAAO,CAAC+B,OAAtB;AACA,QAAIZ,GAAG,GAAG6C,MAAM,CAAChE,OAAO,CAACmB,GAAT,CAAhB;AACA,QAAIF,GAAG,GAAG+C,MAAM,CAAChE,OAAO,CAACiB,GAAT,CAAhB;AACA,QAAIoC,SAAS,GAAGvB,QAAQ,GAAGhD,CAAH,GAAOD,CAA/B;AACA,QAAImD,OAAO,GAAG,KAAKA,OAAL,EAAd;AACA,QAAIsB,SAAS,GAAGtB,OAAO,CAACqB,SAAS,IAAItB,OAAO,GAAG,CAAH,GAAO,CAAlB,CAAV,CAAvB;AACA,QAAIE,QAAQ,GAAGH,QAAQ,GAAGE,OAAO,CAACE,MAAR,EAAH,GAAsBF,OAAO,CAACG,KAAR,EAA7C;AACA,QAAII,GAAG,GAAGR,OAAO,GAAG,CAAC,CAAJ,GAAQ,CAAzB;AACA,QAAIkC,MAAM,GAAG1B,GAAG,IAAIwB,KAAK,CAACV,SAAD,CAAL,GAAmBC,SAAvB,CAAhB;AACA,QAAIjB,IAAI,GAAG,CAAClB,GAAG,GAAGF,GAAP,IAAcgB,QAAzB;AACA,QAAIiC,WAAW,GAAGD,MAAM,GAAG5B,IAA3B;;AAEA,QAAI4B,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAGhC,QAA3B,EAAqC;AACjC,aAAO,IAAP;AACH;;AAED,QAAIkC,KAAK,GAAGrC,QAAQ,GACZX,GAAG,GAAG+C,WADM,GAEZjD,GAAG,GAAGiD,WAFd;AAIA,WAAOhF,KAAK,CAACiF,KAAD,EAAQxF,iBAAR,CAAZ;AACH,GAxBD;;AA0BAkB,EAAAA,WAAW,CAACS,SAAZ,CAAsB8D,cAAtB,GAAuC,SAASA,cAAT,CAAyBC,KAAzB,EAAgC;AACnE,QAAIrE,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAI8B,QAAQ,GAAG9B,OAAO,CAAC8B,QAAvB;AACA,QAAIC,OAAO,GAAG/B,OAAO,CAAC+B,OAAtB;AACA,QAAIZ,GAAG,GAAGnB,OAAO,CAACmB,GAAlB;AACA,QAAIF,GAAG,GAAGjB,OAAO,CAACiB,GAAlB;AACA,QAAIe,OAAO,GAAG,KAAKA,OAAL,EAAd;AACA,QAAIsC,IAAI,GAAGxC,QAAQ,GAAGE,OAAO,CAACE,MAAR,EAAH,GAAsBF,OAAO,CAACG,KAAR,EAAzC;AACA,QAAIX,KAAK,GAAGL,GAAG,GAAGF,GAAlB;AACA,QAAImB,KAAK,GAAGkC,IAAI,GAAG9C,KAAnB;AACA,QAAIyC,MAAM,GAAG/E,KAAK,CAACmF,KAAK,GAAGjC,KAAT,EAAgBzD,iBAAhB,CAAlB;;AAEA,QAAI,CAACmD,QAAQ,IAAIC,OAAb,KAAyB,EAAED,QAAQ,IAAIC,OAAd,CAA7B,EAAsD;AAClDkC,MAAAA,MAAM,GAAG,CAACA,MAAV;AACH;;AAED,WAAO;AACHhD,MAAAA,GAAG,EAAEA,GAAG,GAAGgD,MADR;AAEH9C,MAAAA,GAAG,EAAEA,GAAG,GAAG8C,MAFR;AAGHA,MAAAA,MAAM,EAAEA;AAHL,KAAP;AAKH,GArBD;;AAuBApE,EAAAA,WAAW,CAACS,SAAZ,CAAsBiE,UAAtB,GAAmC,SAASA,UAAT,CAAqBF,KAArB,EAA4B;AAC3D,QAAIrE,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIiE,MAAM,GAAG,CAACI,KAAD,GAASrE,OAAO,CAACqB,SAA9B;AAEA,WAAO;AACHJ,MAAAA,GAAG,EAAEjB,OAAO,CAACiB,GAAR,GAAcgD,MADhB;AAEH9C,MAAAA,GAAG,EAAEnB,OAAO,CAACmB,GAAR,GAAc8C;AAFhB,KAAP;AAIH,GARD;;AAUApE,EAAAA,WAAW,CAACS,SAAZ,CAAsBkE,WAAtB,GAAoC,SAASA,WAAT,GAAwB;AACxD,WAAO,KAAK/C,YAAL,CAAkB,KAAKzB,OAAL,CAAaqB,SAA/B,CAAP;AACH,GAFD;;AAIAxB,EAAAA,WAAW,CAACS,SAAZ,CAAsBmE,eAAtB,GAAwC,SAASA,eAAT,CAA0BC,KAA1B,EAAiCC,YAAjC,EAA+C;AACnF,QAAI3E,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAImE,KAAK,GAAGjF,KAAK,CAACc,OAAO,CAACiB,GAAR,GAAeyD,KAAK,GAAG1E,OAAO,CAACqB,SAAhC,EAA4C1C,iBAA5C,CAAjB;AACA,QAAIiG,IAAI,GAAG,KAAKC,aAAL,CAAmBV,KAAnB,EAA0B,IAA1B,EAAgCQ,YAAhC,CAAX;AAEA,WAAO,IAAInG,SAAJ,CAAc2F,KAAd,EAAqBS,IAArB,EAA2BF,KAA3B,EAAkC,IAAlC,EAAwCC,YAAxC,CAAP;AACH,GAND;;AAQA9E,EAAAA,WAAW,CAACS,SAAZ,CAAsBwE,gBAAtB,GAAyC,SAASA,gBAAT,CAA2BX,KAA3B,EAAkC;AACvE,QAAI3C,KAAK,GAAG,KAAKA,KAAL,EAAZ;AACA,WAAOA,KAAK,CAACP,GAAN,IAAakD,KAAb,IAAsBA,KAAK,IAAI3C,KAAK,CAACL,GAA5C;AACH,GAHD;;AAKAtB,EAAAA,WAAW,CAACS,SAAZ,CAAsByE,GAAtB,GAA4B,SAASA,GAAT,CAAcV,KAAd,EAAqB;AAC7C,QAAI7C,KAAK,GAAG,KAAK4C,cAAL,CAAoBC,KAApB,CAAZ;AACA,WAAO,KAAKW,UAAL,CAAgBxD,KAAK,CAACP,GAAtB,EAA2BO,KAAK,CAACL,GAAjC,EAAsC,KAAKH,QAA3C,EAAqD,KAAKE,QAA1D,EAAoEM,KAAK,CAACyC,MAA1E,CAAP;AACH,GAHD;;AAKApE,EAAAA,WAAW,CAACS,SAAZ,CAAsB2E,WAAtB,GAAoC,SAASA,WAAT,CAAsBvB,KAAtB,EAA6BC,GAA7B,EAAkC;AAClE,QAAIpC,UAAU,GAAG,KAAKuC,QAAL,CAAcJ,KAAd,CAAjB;AACA,QAAIwB,QAAQ,GAAG,KAAKpB,QAAL,CAAcH,GAAd,CAAf;AACA,QAAI1C,GAAG,GAAGtB,IAAI,CAACsB,GAAL,CAASM,UAAT,EAAqB2D,QAArB,CAAV;AACA,QAAI/D,GAAG,GAAGxB,IAAI,CAACwB,GAAL,CAASI,UAAT,EAAqB2D,QAArB,CAAV;;AAEA,QAAI,KAAKC,YAAL,CAAkBlE,GAAlB,EAAuBE,GAAvB,CAAJ,EAAiC;AAC7B,aAAO;AACHF,QAAAA,GAAG,EAAEA,GADF;AAEHE,QAAAA,GAAG,EAAEA;AAFF,OAAP;AAIH;AACJ,GAZD;;AAcAtB,EAAAA,WAAW,CAACS,SAAZ,CAAsB8E,SAAtB,GAAkC,SAASA,SAAT,CAAoBf,KAApB,EAA2B;AACzD,QAAIgB,GAAG,GAAG,IAAV;AACA,QAAIrE,QAAQ,GAAGqE,GAAG,CAACrE,QAAnB;AACA,QAAIE,QAAQ,GAAGmE,GAAG,CAACnE,QAAnB;AACA,QAAIoE,QAAQ,GAAG,KAAKf,UAAL,CAAgBF,KAAhB,CAAf;AACA,QAAIpD,GAAG,GAAGhC,UAAU,CAACqG,QAAQ,CAACrE,GAAV,EAAeD,QAAf,EAAyBE,QAAzB,CAApB;AACA,QAAIC,GAAG,GAAGlC,UAAU,CAACqG,QAAQ,CAACnE,GAAV,EAAeH,QAAf,EAAyBE,QAAzB,CAApB;;AAEA,QAAI,KAAKiE,YAAL,CAAkBlE,GAAlB,EAAuBE,GAAvB,CAAJ,EAAiC;AAC7B,aAAO;AACHF,QAAAA,GAAG,EAAEA,GADF;AAEHE,QAAAA,GAAG,EAAEA;AAFF,OAAP;AAIH;AACJ,GAdD;;AAgBAtB,EAAAA,WAAW,CAACS,SAAZ,CAAsB6E,YAAtB,GAAqC,SAASA,YAAT,CAAuBlE,GAAvB,EAA4BE,GAA5B,EAAiC;AAClE,WAAOA,GAAG,GAAGF,GAAN,GAAYvB,eAAnB;AACH,GAFD;;AAIA,SAAOG,WAAP;AACH,CAjQkB,CAiQjBtB,IAjQiB,CAAnB;;AAmQA,SAASoC,eAAT,CAAyBb,SAAzB,EAAoCC,SAApC,EAA+CC,OAA/C,EAAwD;AACpD,MAAIuF,WAAW,GAAGvF,OAAO,CAACuF,WAA1B;AAEA,MAAIC,OAAO,GAAGnG,WAAW,CAACS,SAAD,EAAYC,SAAZ,EAAuBwF,WAAvB,CAAzB;AACA,MAAIE,OAAO,GAAGnG,WAAW,CAACQ,SAAD,EAAYC,SAAZ,EAAuBwF,WAAvB,CAAzB;AAEA,MAAIlE,SAAS,GAAGjC,aAAa,CAACoG,OAAD,EAAUC,OAAV,CAA7B;AACA,MAAI/E,WAAW,GAAG;AACdW,IAAAA,SAAS,EAAEA;AADG,GAAlB;;AAIA,MAAIrB,OAAO,CAAC0F,gBAAR,KAA6B,KAAjC,EAAwC;AACpC,QAAIF,OAAO,GAAG,CAAV,IAAeG,cAAc,CAACH,OAAD,EAAUnE,SAAV,EAAqB,IAAI,CAAzB,CAAjC,EAA8D;AAC1DmE,MAAAA,OAAO,IAAInE,SAAX;AACH;;AAED,QAAIoE,OAAO,GAAG,CAAV,IAAeE,cAAc,CAACF,OAAD,EAAUpE,SAAV,EAAqB,IAAI,CAAzB,CAAjC,EAA8D;AAC1DoE,MAAAA,OAAO,IAAIpE,SAAX;AACH;AACJ;;AAEDX,EAAAA,WAAW,CAACO,GAAZ,GAAkB1B,KAAK,CAACiG,OAAD,EAAUnE,SAAV,CAAvB;AACAX,EAAAA,WAAW,CAACS,GAAZ,GAAkB3B,IAAI,CAACiG,OAAD,EAAUpE,SAAV,CAAtB;AAEA,SAAOX,WAAP;AACH;;AAED,SAASG,gBAAT,CAA0BH,WAA1B,EAAuCV,OAAvC,EAAgD;AAC5C,SAAO;AACHiB,IAAAA,GAAG,EAAEjC,OAAO,CAACgB,OAAO,CAACiB,GAAT,CAAP,GAAuBtB,IAAI,CAACsB,GAAL,CAASP,WAAW,CAACO,GAArB,EAA0BjB,OAAO,CAACiB,GAAlC,CAAvB,GAAgEP,WAAW,CAACO,GAD9E;AAEHE,IAAAA,GAAG,EAAEnC,OAAO,CAACgB,OAAO,CAACmB,GAAT,CAAP,GAAuBxB,IAAI,CAACwB,GAAL,CAAST,WAAW,CAACS,GAArB,EAA0BnB,OAAO,CAACmB,GAAlC,CAAvB,GAAgET,WAAW,CAACS,GAF9E;AAGHE,IAAAA,SAAS,EAAEX,WAAW,CAACW;AAHpB,GAAP;AAKH;;AAED,SAASuE,eAAT,CAAyB5F,OAAzB,EAAkC6F,MAAlC,EAA0C;AACtC,OAAK,IAAIjD,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGiD,MAAM,CAACC,MAA/B,EAAuClD,GAAG,EAA1C,EAA8C;AAC1C,QAAImD,KAAK,GAAGF,MAAM,CAACjD,GAAD,CAAlB;;AACA,QAAI5C,OAAO,CAAC+F,KAAD,CAAP,KAAmB,IAAvB,EAA6B;AACzB/F,MAAAA,OAAO,CAAC+F,KAAD,CAAP,GAAiBC,SAAjB;AACH;AACJ;AACJ;;AAED,SAASlF,WAAT,CAAqBJ,WAArB,EAAkCuF,WAAlC,EAA+C;AAC3C,MAAIjG,OAAO,GAAGiG,WAAd;AACA,MAAIC,UAAJ,EAAgBC,UAAhB;;AAEA,MAAIF,WAAJ,EAAiB;AACbL,IAAAA,eAAe,CAACK,WAAD,EAAc,CAAE,KAAF,EAAS,KAAT,CAAd,CAAf;AAEAC,IAAAA,UAAU,GAAGlH,OAAO,CAACiH,WAAW,CAAChF,GAAb,CAApB;AACAkF,IAAAA,UAAU,GAAGnH,OAAO,CAACiH,WAAW,CAAC9E,GAAb,CAApB;AAEA,QAAIiF,aAAa,GAAGF,UAAU,IAAIC,UAAlC;;AAEA,QAAIC,aAAJ,EAAmB;AACf,UAAIH,WAAW,CAAChF,GAAZ,KAAoBgF,WAAW,CAAC9E,GAApC,EAAyC;AACrC,YAAI8E,WAAW,CAAChF,GAAZ,GAAkB,CAAtB,EAAyB;AACrBgF,UAAAA,WAAW,CAAChF,GAAZ,GAAkB,CAAlB;AACH,SAFD,MAEO;AACHgF,UAAAA,WAAW,CAAC9E,GAAZ,GAAkB,CAAlB;AACH;AACJ;AACJ;;AAED,QAAI8E,WAAW,CAAC5E,SAAhB,EAA2B;AACvBX,MAAAA,WAAW,CAACO,GAAZ,GAAkB1B,KAAK,CAACmB,WAAW,CAACO,GAAb,EAAkBgF,WAAW,CAAC5E,SAA9B,CAAvB;AACAX,MAAAA,WAAW,CAACS,GAAZ,GAAkB3B,IAAI,CAACkB,WAAW,CAACS,GAAb,EAAkB8E,WAAW,CAAC5E,SAA9B,CAAtB;AACH,KAHD,MAGO,IAAI+E,aAAJ,EAAmB;AACtBpG,MAAAA,OAAO,GAAGjB,UAAU,CAAC2B,WAAD,EAAcuF,WAAd,CAApB,CADsB,CAGtB;;AACAvF,MAAAA,WAAW,CAACW,SAAZ,GAAwBjC,aAAa,CAACY,OAAO,CAACiB,GAAT,EAAcjB,OAAO,CAACmB,GAAtB,CAArC;AACH;AACJ;;AAEDT,EAAAA,WAAW,CAACsC,SAAZ,GAAwB,CAAChD,OAAO,CAACqB,SAAR,IAAqBX,WAAW,CAACW,SAAlC,IAA+C,CAAvE;AAEA,MAAIgF,MAAM,GAAGtH,UAAU,CAAC2B,WAAD,EAAcV,OAAd,CAAvB;;AACA,MAAIqG,MAAM,CAACpF,GAAP,IAAcoF,MAAM,CAAClF,GAAzB,EAA8B;AAC1B,QAAI+E,UAAU,IAAI,CAACC,UAAnB,EAA+B;AAC3BE,MAAAA,MAAM,CAAClF,GAAP,GAAakF,MAAM,CAACpF,GAAP,GAAaoF,MAAM,CAAChF,SAAjC;AACH,KAFD,MAEO,IAAI,CAAC6E,UAAD,IAAeC,UAAnB,EAA+B;AAClCE,MAAAA,MAAM,CAACpF,GAAP,GAAaoF,MAAM,CAAClF,GAAP,GAAakF,MAAM,CAAChF,SAAjC;AACH;AACJ;;AAED,SAAOgF,MAAP;AACH;;AAED,SAASV,cAAT,CAAwBxB,KAAxB,EAA+BmC,OAA/B,EAAwCC,KAAxC,EAA+C;AAC3C,MAAIC,SAAS,GAAGtH,KAAK,CAACS,IAAI,CAAC8G,GAAL,CAAStC,KAAK,GAAGmC,OAAjB,CAAD,EAA4B3H,iBAA5B,CAArB;AACA,MAAI+H,SAAS,GAAGJ,OAAO,IAAI,IAAIC,KAAR,CAAvB;AAEA,SAAOC,SAAS,KAAK,CAAd,IAAmBA,SAAS,GAAGE,SAAtC;AACH;;AAEDvH,iBAAiB,CAACU,WAAD,EAAc;AAC3B8G,EAAAA,IAAI,EAAE,SADqB;AAE3B1F,EAAAA,GAAG,EAAE,CAFsB;AAG3BE,EAAAA,GAAG,EAAE,CAHsB;AAI3BW,EAAAA,QAAQ,EAAE,IAJiB;AAK3B8E,EAAAA,cAAc,EAAE;AACZC,IAAAA,OAAO,EAAE,IADG;AAEZ1E,IAAAA,KAAK,EAAE,CAFK;AAGZ2E,IAAAA,KAAK,EAAEpI;AAHK,GALW;AAU3BqI,EAAAA,MAAM,EAAE;AACJC,IAAAA,MAAM,EAAE;AADJ,GAVmB;AAa3BC,EAAAA,MAAM,EAAE;AAbmB,CAAd,CAAjB;AAgBA,eAAepH,WAAf","sourcesContent":["\nimport Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\n\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION, X, Y } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\n\nvar MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nvar NumericAxis = (function (Axis) {\n    function NumericAxis(seriesMin, seriesMax, options, chartService) {\n        Axis.call(this, Object.assign({}, options, {\n            seriesMin: seriesMin,\n            seriesMax: seriesMax\n        }), chartService);\n    }\n\n    if ( Axis ) NumericAxis.__proto__ = Axis;\n    NumericAxis.prototype = Object.create( Axis && Axis.prototype );\n    NumericAxis.prototype.constructor = NumericAxis;\n\n    NumericAxis.prototype.initUserOptions = function initUserOptions (options) {\n        var autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n        this.totalOptions = totalAxisOptions(autoOptions, options);\n\n        return axisOptions(autoOptions, options);\n    };\n\n    NumericAxis.prototype.initFields = function initFields () {\n        this.totalMin = this.totalOptions.min;\n        this.totalMax = this.totalOptions.max;\n        this.totalMajorUnit = this.totalOptions.majorUnit;\n        this.seriesMin = this.options.seriesMin;\n        this.seriesMax = this.options.seriesMax;\n    };\n\n    NumericAxis.prototype.clone = function clone () {\n        return new NumericAxis(\n            this.seriesMin,\n            this.seriesMax,\n            Object.assign({}, this.options),\n            this.chartService\n        );\n    };\n\n    NumericAxis.prototype.startValue = function startValue () {\n        return 0;\n    };\n\n    NumericAxis.prototype.range = function range () {\n        var options = this.options;\n        return { min: options.min, max: options.max };\n    };\n\n    NumericAxis.prototype.getDivisions = function getDivisions (stepValue) {\n        if (stepValue === 0) {\n            return 1;\n        }\n\n        var options = this.options;\n        var range = options.max - options.min;\n\n        return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n    };\n\n    NumericAxis.prototype.getTickPositions = function getTickPositions (unit, skipUnit) {\n        var options = this.options;\n        var vertical = options.vertical;\n        var reverse = options.reverse;\n        var lineBox = this.lineBox();\n        var lineSize = vertical ? lineBox.height() : lineBox.width();\n        var range = options.max - options.min;\n        var scale = lineSize / range;\n        var step = unit * scale;\n        var divisions = this.getDivisions(unit);\n        var dir = (vertical ? -1 : 1) * (reverse ? -1 : 1);\n        var startEdge = dir === 1 ? 1 : 2;\n        var positions = [];\n        var pos = lineBox[(vertical ? Y : X) + startEdge];\n        var skipStep = 0;\n\n        if (skipUnit) {\n            skipStep = skipUnit / unit;\n        }\n\n        for (var idx = 0; idx < divisions; idx++) {\n            if (idx % skipStep !== 0) {\n                positions.push(round(pos, COORD_PRECISION));\n            }\n\n            pos = pos + step * dir;\n        }\n\n        return positions;\n    };\n\n    NumericAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {\n        return this.getTickPositions(this.options.majorUnit);\n    };\n\n    NumericAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {\n        return this.getTickPositions(this.options.minorUnit);\n    };\n\n    NumericAxis.prototype.getSlot = function getSlot (a, b, limit) {\n        if ( limit === void 0 ) limit = false;\n\n        var options = this.options;\n        var vertical = options.vertical;\n        var reverse = options.reverse;\n        var valueAxis = vertical ? Y : X;\n        var lineBox = this.lineBox();\n        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];\n        var lineSize = vertical ? lineBox.height() : lineBox.width();\n        var dir = reverse ? -1 : 1;\n        var step = dir * (lineSize / (options.max - options.min));\n        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n\n        var start = a;\n        var end = b;\n\n        if (!defined(start)) {\n            start = end || 0;\n        }\n\n        if (!defined(end)) {\n            end = start || 0;\n        }\n\n        if (limit) {\n            start = Math.max(Math.min(start, options.max), options.min);\n            end = Math.max(Math.min(end, options.max), options.min);\n        }\n\n        var p1, p2;\n\n        if (vertical) {\n            p1 = options.max - Math.max(start, end);\n            p2 = options.max - Math.min(start, end);\n        } else {\n            p1 = Math.min(start, end) - options.min;\n            p2 = Math.max(start, end) - options.min;\n        }\n\n        slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));\n        slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));\n\n        return slotBox;\n    };\n\n    NumericAxis.prototype.getValue = function getValue (point) {\n        var options = this.options;\n        var vertical = options.vertical;\n        var reverse = options.reverse;\n        var max = Number(options.max);\n        var min = Number(options.min);\n        var valueAxis = vertical ? Y : X;\n        var lineBox = this.lineBox();\n        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];\n        var lineSize = vertical ? lineBox.height() : lineBox.width();\n        var dir = reverse ? -1 : 1;\n        var offset = dir * (point[valueAxis] - lineStart);\n        var step = (max - min) / lineSize;\n        var valueOffset = offset * step;\n\n        if (offset < 0 || offset > lineSize) {\n            return null;\n        }\n\n        var value = vertical ?\n                max - valueOffset :\n                min + valueOffset;\n\n        return round(value, DEFAULT_PRECISION);\n    };\n\n    NumericAxis.prototype.translateRange = function translateRange (delta) {\n        var options = this.options;\n        var vertical = options.vertical;\n        var reverse = options.reverse;\n        var max = options.max;\n        var min = options.min;\n        var lineBox = this.lineBox();\n        var size = vertical ? lineBox.height() : lineBox.width();\n        var range = max - min;\n        var scale = size / range;\n        var offset = round(delta / scale, DEFAULT_PRECISION);\n\n        if ((vertical || reverse) && !(vertical && reverse )) {\n            offset = -offset;\n        }\n\n        return {\n            min: min + offset,\n            max: max + offset,\n            offset: offset\n        };\n    };\n\n    NumericAxis.prototype.scaleRange = function scaleRange (delta) {\n        var options = this.options;\n        var offset = -delta * options.majorUnit;\n\n        return {\n            min: options.min - offset,\n            max: options.max + offset\n        };\n    };\n\n    NumericAxis.prototype.labelsCount = function labelsCount () {\n        return this.getDivisions(this.options.majorUnit);\n    };\n\n    NumericAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {\n        var options = this.options;\n        var value = round(options.min + (index * options.majorUnit), DEFAULT_PRECISION);\n        var text = this.axisLabelText(value, null, labelOptions);\n\n        return new AxisLabel(value, text, index, null, labelOptions);\n    };\n\n    NumericAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {\n        var range = this.range();\n        return range.min <= value && value <= range.max;\n    };\n\n    NumericAxis.prototype.pan = function pan (delta) {\n        var range = this.translateRange(delta);\n        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n    };\n\n    NumericAxis.prototype.pointsRange = function pointsRange (start, end) {\n        var startValue = this.getValue(start);\n        var endValue = this.getValue(end);\n        var min = Math.min(startValue, endValue);\n        var max = Math.max(startValue, endValue);\n\n        if (this.isValidRange(min, max)) {\n            return {\n                min: min,\n                max: max\n            };\n        }\n    };\n\n    NumericAxis.prototype.zoomRange = function zoomRange (delta) {\n        var ref = this;\n        var totalMin = ref.totalMin;\n        var totalMax = ref.totalMax;\n        var newRange = this.scaleRange(delta);\n        var min = limitValue(newRange.min, totalMin, totalMax);\n        var max = limitValue(newRange.max, totalMin, totalMax);\n\n        if (this.isValidRange(min, max)) {\n            return {\n                min: min,\n                max: max\n            };\n        }\n    };\n\n    NumericAxis.prototype.isValidRange = function isValidRange (min, max) {\n        return max - min > MIN_VALUE_RANGE;\n    };\n\n    return NumericAxis;\n}(Axis));\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n    var narrowRange = options.narrowRange;\n\n    var autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n    var autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n\n    var majorUnit = autoMajorUnit(autoMin, autoMax);\n    var autoOptions = {\n        majorUnit: majorUnit\n    };\n\n    if (options.roundToMajorUnit !== false) {\n        if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n            autoMin -= majorUnit;\n        }\n\n        if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n            autoMax += majorUnit;\n        }\n    }\n\n    autoOptions.min = floor(autoMin, majorUnit);\n    autoOptions.max = ceil(autoMax, majorUnit);\n\n    return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n    return {\n        min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n        max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n        majorUnit: autoOptions.majorUnit\n    };\n}\n\nfunction clearNullValues(options, fields) {\n    for (var idx = 0; idx < fields.length; idx++) {\n        var field = fields[idx];\n        if (options[field] === null) {\n            options[field] = undefined;\n        }\n    }\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n    var options = userOptions;\n    var userSetMin, userSetMax;\n\n    if (userOptions) {\n        clearNullValues(userOptions, [ 'min', 'max' ]);\n\n        userSetMin = defined(userOptions.min);\n        userSetMax = defined(userOptions.max);\n\n        var userSetLimits = userSetMin || userSetMax;\n\n        if (userSetLimits) {\n            if (userOptions.min === userOptions.max) {\n                if (userOptions.min > 0) {\n                    userOptions.min = 0;\n                } else {\n                    userOptions.max = 1;\n                }\n            }\n        }\n\n        if (userOptions.majorUnit) {\n            autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n            autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n        } else if (userSetLimits) {\n            options = deepExtend(autoOptions, userOptions);\n\n            // Determine an auto major unit after min/max have been set\n            autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n        }\n    }\n\n    autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n\n    var result = deepExtend(autoOptions, options);\n    if (result.min >= result.max) {\n        if (userSetMin && !userSetMax) {\n            result.max = result.min + result.majorUnit;\n        } else if (!userSetMin && userSetMax) {\n            result.min = result.max - result.majorUnit;\n        }\n    }\n\n    return result;\n}\n\nfunction remainderClose(value, divisor, ratio) {\n    var remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n    var threshold = divisor * (1 - ratio);\n\n    return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n    type: \"numeric\",\n    min: 0,\n    max: 1,\n    vertical: true,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        format: \"#.####################\"\n    },\n    zIndex: 1\n});\n\nexport default NumericAxis;\n"]},"metadata":{},"sourceType":"module"}