{"ast":null,"code":"/**\n * Returns the axis with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The axis name.\n * @returns {ChartAxis} - The axis with a corresponding name.\n */\nvar findAxisByName = function findAxisByName(chartComponent, name) {\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.findAxisByName(name);\n  }\n};\n/**\n * Returns the pane at the specified index.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {number} index - The pane index.\n * @returns {ChartPane} - The pane at the specified index.\n */\n\n\nvar findPaneByIndex = function findPaneByIndex(chartComponent, index) {\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.findPaneByIndex(index);\n  }\n};\n/**\n * Returns the pane with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The name of the pane.\n * @returns {ChartPane} - The pane with the provided name.\n */\n\n\nvar findPaneByName = function findPaneByName(chartComponent, name) {\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.findPaneByName(name);\n  }\n};\n/**\n * Exports a Chart component as a Drawing `Scene`.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {any} options - The parameters for the export operation.\n * @returns {Group} - The root Group of the scene.\n */\n\n\nvar exportVisual = function exportVisual(chartComponent, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.exportVisual(options);\n  }\n};\n\nexport { findAxisByName, findPaneByIndex, findPaneByName, exportVisual };","map":{"version":3,"sources":["../../../src/methods/index.ts"],"names":[],"mappings":"AAIA;;;;;;;AAOA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,cAAD,EAAyB,IAAzB,EAAqC;AACxD,MAAI,cAAc,IAAI,cAAc,CAAC,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAQ,cAAc,CAAC,aAAf,CAAqC,cAArC,CAAoD,IAApD,CAAR;AACH;AACJ,CAJD;AAMA;;;;;;;;;AAOA,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,cAAD,EAAyB,KAAzB,EAAsC;AAC1D,MAAI,cAAc,IAAI,cAAc,CAAC,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAQ,cAAc,CAAC,aAAf,CAAqC,eAArC,CAAqD,KAArD,CAAR;AACH;AACJ,CAJD;AAMA;;;;;;;;;AAOA,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,cAAD,EAAyB,IAAzB,EAAqC;AACxD,MAAI,cAAc,IAAI,cAAc,CAAC,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAQ,cAAc,CAAC,aAAf,CAAqC,cAArC,CAAoD,IAApD,CAAR;AACH;AACJ,CAJD;AAMA;;;;;;;;;AAOA,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,cAAD,EAAyB,OAAzB,EAA0C;AAAjB,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAiB;;AAC3D,MAAI,cAAc,IAAI,cAAc,CAAC,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAQ,cAAc,CAAC,aAAf,CAAqC,YAArC,CAAkD,OAAlD,CAAR;AACH;AACJ,CAJD;;AAMA,SAAS,cAAT,EAAyB,eAAzB,EAA0C,cAA1C,EAA0D,YAA1D","sourceRoot":"","sourcesContent":["/**\n * Returns the axis with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The axis name.\n * @returns {ChartAxis} - The axis with a corresponding name.\n */\nvar findAxisByName = function (chartComponent, name) {\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.findAxisByName(name);\n    }\n};\n/**\n * Returns the pane at the specified index.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {number} index - The pane index.\n * @returns {ChartPane} - The pane at the specified index.\n */\nvar findPaneByIndex = function (chartComponent, index) {\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.findPaneByIndex(index);\n    }\n};\n/**\n * Returns the pane with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The name of the pane.\n * @returns {ChartPane} - The pane with the provided name.\n */\nvar findPaneByName = function (chartComponent, name) {\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.findPaneByName(name);\n    }\n};\n/**\n * Exports a Chart component as a Drawing `Scene`.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {any} options - The parameters for the export operation.\n * @returns {Group} - The root Group of the scene.\n */\nvar exportVisual = function (chartComponent, options) {\n    if (options === void 0) { options = {}; }\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.exportVisual(options);\n    }\n};\nexport { findAxisByName, findPaneByIndex, findPaneByName, exportVisual };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}