{"ast":null,"code":"import CategoricalChart from '../categorical-chart';\nimport LinePoint from './line-point';\nimport LineSegment from './line-segment';\nimport StepLineSegment from './step-line-segment';\nimport SplineSegment from './spline-segment';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport { ZERO, SMOOTH, STEP } from '../constants';\nimport { deepExtend, defined, isFunction } from '../../common';\n\nvar LineChart = function (CategoricalChart) {\n  function LineChart() {\n    CategoricalChart.apply(this, arguments);\n  }\n\n  if (CategoricalChart) LineChart.__proto__ = CategoricalChart;\n  LineChart.prototype = Object.create(CategoricalChart && CategoricalChart.prototype);\n  LineChart.prototype.constructor = LineChart;\n\n  LineChart.prototype.render = function render() {\n    CategoricalChart.prototype.render.call(this);\n    this.updateStackRange();\n    this.renderSegments();\n  };\n\n  LineChart.prototype.pointType = function pointType() {\n    return LinePoint;\n  };\n\n  LineChart.prototype.createPoint = function createPoint(data, fields) {\n    var categoryIx = fields.categoryIx;\n    var category = fields.category;\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var missingValues = this.seriesMissingValues(series);\n    var value = data.valueFields.value;\n\n    if (!defined(value) || value === null) {\n      if (missingValues === ZERO) {\n        value = 0;\n      } else {\n        return null;\n      }\n    }\n\n    var pointOptions = this.pointOptions(series, seriesIx);\n    pointOptions = this.evalPointOptions(pointOptions, value, category, categoryIx, series, seriesIx);\n    var color = data.fields.color || series.color;\n\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n\n    var point = new LinePoint(value, pointOptions);\n    point.color = color;\n    this.append(point);\n    return point;\n  };\n\n  LineChart.prototype.plotRange = function plotRange(point) {\n    var this$1 = this;\n    var plotValue = this.plotValue(point);\n\n    if (this.options.isStacked) {\n      var categoryIx = point.categoryIx;\n      var categoryPoints = this.categoryPoints[categoryIx];\n\n      for (var i = 0; i < categoryPoints.length; i++) {\n        var other = categoryPoints[i];\n\n        if (point === other) {\n          break;\n        }\n\n        plotValue += this$1.plotValue(other);\n\n        if (this$1.options.isStacked100) {\n          plotValue = Math.min(plotValue, 1);\n        }\n      }\n    }\n\n    return [plotValue, plotValue];\n  };\n\n  LineChart.prototype.createSegment = function createSegment(linePoints, currentSeries, seriesIx) {\n    var style = currentSeries.style;\n    var pointType;\n\n    if (style === STEP) {\n      pointType = StepLineSegment;\n    } else if (style === SMOOTH) {\n      pointType = SplineSegment;\n    } else {\n      pointType = LineSegment;\n    }\n\n    return new pointType(linePoints, currentSeries, seriesIx);\n  };\n\n  LineChart.prototype.animationPoints = function animationPoints() {\n    var points = this.points;\n    var result = [];\n\n    for (var idx = 0; idx < points.length; idx++) {\n      result.push((points[idx] || {}).marker);\n    }\n\n    return result.concat(this._segments);\n  };\n\n  return LineChart;\n}(CategoricalChart);\n\ndeepExtend(LineChart.prototype, LineChartMixin, ClipAnimationMixin);\nexport default LineChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/line-chart/line-chart.js"],"names":["CategoricalChart","LinePoint","LineSegment","StepLineSegment","SplineSegment","LineChartMixin","ClipAnimationMixin","ZERO","SMOOTH","STEP","deepExtend","defined","isFunction","LineChart","apply","arguments","__proto__","prototype","Object","create","constructor","render","call","updateStackRange","renderSegments","pointType","createPoint","data","fields","categoryIx","category","series","seriesIx","missingValues","seriesMissingValues","value","valueFields","pointOptions","evalPointOptions","color","point","append","plotRange","this$1","plotValue","options","isStacked","categoryPoints","i","length","other","isStacked100","Math","min","createSegment","linePoints","currentSeries","style","animationPoints","points","result","idx","push","marker","concat","_segments"],"mappings":"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","sourcesContent":["import CategoricalChart from '../categorical-chart';\nimport LinePoint from './line-point';\nimport LineSegment from './line-segment';\nimport StepLineSegment from './step-line-segment';\nimport SplineSegment from './spline-segment';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\n\nimport { ZERO, SMOOTH, STEP } from '../constants';\n\nimport { deepExtend, defined, isFunction } from '../../common';\n\nvar LineChart = (function (CategoricalChart) {\n    function LineChart () {\n        CategoricalChart.apply(this, arguments);\n    }\n\n    if ( CategoricalChart ) LineChart.__proto__ = CategoricalChart;\n    LineChart.prototype = Object.create( CategoricalChart && CategoricalChart.prototype );\n    LineChart.prototype.constructor = LineChart;\n\n    LineChart.prototype.render = function render () {\n\n        CategoricalChart.prototype.render.call(this);\n\n        this.updateStackRange();\n        this.renderSegments();\n    };\n\n    LineChart.prototype.pointType = function pointType () {\n        return LinePoint;\n    };\n\n    LineChart.prototype.createPoint = function createPoint (data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var missingValues = this.seriesMissingValues(series);\n        var value = data.valueFields.value;\n\n        if (!defined(value) || value === null) {\n            if (missingValues === ZERO) {\n                value = 0;\n            } else {\n                return null;\n            }\n        }\n\n        var pointOptions = this.pointOptions(series, seriesIx);\n        pointOptions = this.evalPointOptions(\n            pointOptions, value, category, categoryIx, series, seriesIx\n        );\n\n        var color = data.fields.color || series.color;\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var point = new LinePoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    };\n\n    LineChart.prototype.plotRange = function plotRange (point) {\n        var this$1 = this;\n\n        var plotValue = this.plotValue(point);\n\n        if (this.options.isStacked) {\n            var categoryIx = point.categoryIx;\n            var categoryPoints = this.categoryPoints[categoryIx];\n\n            for (var i = 0; i < categoryPoints.length; i++) {\n                var other = categoryPoints[i];\n\n                if (point === other) {\n                    break;\n                }\n\n                plotValue += this$1.plotValue(other);\n\n                if (this$1.options.isStacked100) {\n                    plotValue = Math.min(plotValue, 1);\n                }\n            }\n\n        }\n\n        return [ plotValue, plotValue ];\n    };\n\n    LineChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {\n        var style = currentSeries.style;\n        var pointType;\n\n        if (style === STEP) {\n            pointType = StepLineSegment;\n        } else if (style === SMOOTH) {\n            pointType = SplineSegment;\n        } else {\n            pointType = LineSegment;\n        }\n\n        return new pointType(linePoints, currentSeries, seriesIx);\n    };\n\n    LineChart.prototype.animationPoints = function animationPoints () {\n        var points = this.points;\n        var result = [];\n        for (var idx = 0; idx < points.length; idx++) {\n            result.push((points[idx] || {}).marker);\n        }\n        return result.concat(this._segments);\n    };\n\n    return LineChart;\n}(CategoricalChart));\n\ndeepExtend(LineChart.prototype, LineChartMixin, ClipAnimationMixin);\n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}