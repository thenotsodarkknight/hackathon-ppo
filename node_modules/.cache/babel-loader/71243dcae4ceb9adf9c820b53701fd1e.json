{"ast":null,"code":"import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\nvar DONUT_SECTOR_ANIM_DELAY = 50;\n\nvar DonutChart = function (PieChart) {\n  function DonutChart() {\n    PieChart.apply(this, arguments);\n  }\n\n  if (PieChart) DonutChart.__proto__ = PieChart;\n  DonutChart.prototype = Object.create(PieChart && PieChart.prototype);\n  DonutChart.prototype.constructor = DonutChart;\n\n  DonutChart.prototype.addValue = function addValue(value, sector, fields) {\n    var segmentOptions = deepExtend({}, fields.series, {\n      index: fields.index\n    });\n    this.evalSegmentOptions(segmentOptions, value, fields);\n    this.createLegendItem(value, segmentOptions, fields);\n\n    if (!value || fields.visible === false) {\n      return;\n    }\n\n    var segment = new DonutSegment(value, sector, segmentOptions);\n    Object.assign(segment, fields);\n    this.append(segment);\n    this.points.push(segment);\n  };\n\n  DonutChart.prototype.reflow = function reflow(targetBox) {\n    var this$1 = this;\n    var options = this.options;\n    var box = targetBox.clone();\n    var space = 5;\n    var minWidth = Math.min(box.width(), box.height());\n    var halfMinWidth = minWidth / 2;\n    var defaultPadding = minWidth - minWidth * 0.85;\n    var series = options.series;\n    var seriesCount = series.length;\n    var padding = valueOrDefault(options.padding, defaultPadding);\n    padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n    var totalSize = halfMinWidth - padding;\n    var seriesWithoutSize = 0;\n    var holeSize;\n\n    for (var i = 0; i < seriesCount; i++) {\n      var currentSeries = series[i];\n\n      if (i === 0) {\n        if (defined(currentSeries.holeSize)) {\n          holeSize = currentSeries.holeSize;\n          totalSize -= currentSeries.holeSize;\n        }\n      }\n\n      if (defined(currentSeries.size)) {\n        totalSize -= currentSeries.size;\n      } else {\n        seriesWithoutSize++;\n      }\n\n      if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n        totalSize -= currentSeries.margin;\n      }\n    }\n\n    if (!defined(holeSize)) {\n      var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n      holeSize = currentSize * 0.75;\n      totalSize -= holeSize;\n    }\n\n    var innerRadius = holeSize;\n    var margin = 0;\n    var size, radius;\n    this.seriesConfigs = [];\n\n    for (var i$1 = 0; i$1 < seriesCount; i$1++) {\n      var currentSeries$1 = series[i$1];\n      size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);\n      innerRadius += margin;\n      radius = innerRadius + size;\n      this$1.seriesConfigs.push({\n        innerRadius: innerRadius,\n        radius: radius\n      });\n      margin = currentSeries$1.margin || 0;\n      innerRadius = radius;\n    }\n\n    PieChart.prototype.reflow.call(this, targetBox);\n  };\n\n  DonutChart.prototype.animationDelay = function animationDelay(categoryIndex, seriesIndex, seriesCount) {\n    return categoryIndex * DONUT_SECTOR_ANIM_DELAY + INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1);\n  };\n\n  return DonutChart;\n}(PieChart);\n\nsetDefaultOptions(DonutChart, {\n  startAngle: 90,\n  connectors: {\n    width: 2,\n    color: \"#939393\",\n    padding: 8\n  }\n});\nexport default DonutChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/donut-chart/donut-chart.js"],"names":["PieChart","DonutSegment","INITIAL_ANIMATION_DURATION","deepExtend","defined","setDefaultOptions","valueOrDefault","DONUT_SECTOR_ANIM_DELAY","DonutChart","apply","arguments","__proto__","prototype","Object","create","constructor","addValue","value","sector","fields","segmentOptions","series","index","evalSegmentOptions","createLegendItem","visible","segment","assign","append","points","push","reflow","targetBox","this$1","options","box","clone","space","minWidth","Math","min","width","height","halfMinWidth","defaultPadding","seriesCount","length","padding","totalSize","seriesWithoutSize","holeSize","i","currentSeries","size","margin","currentSize","innerRadius","radius","seriesConfigs","i$1","currentSeries$1","call","animationDelay","categoryIndex","seriesIndex","startAngle","connectors","color"],"mappings":"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","sourcesContent":["import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\n\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\n\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\n\nvar DONUT_SECTOR_ANIM_DELAY = 50;\n\nvar DonutChart = (function (PieChart) {\n    function DonutChart () {\n        PieChart.apply(this, arguments);\n    }\n\n    if ( PieChart ) DonutChart.__proto__ = PieChart;\n    DonutChart.prototype = Object.create( PieChart && PieChart.prototype );\n    DonutChart.prototype.constructor = DonutChart;\n\n    DonutChart.prototype.addValue = function addValue (value, sector, fields) {\n        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });\n        this.evalSegmentOptions(segmentOptions, value, fields);\n\n        this.createLegendItem(value, segmentOptions, fields);\n\n        if (!value || fields.visible === false) {\n            return;\n        }\n\n        var segment = new DonutSegment(value, sector, segmentOptions);\n\n        Object.assign(segment, fields);\n        this.append(segment);\n        this.points.push(segment);\n    };\n\n    DonutChart.prototype.reflow = function reflow (targetBox) {\n        var this$1 = this;\n\n        var options = this.options;\n        var box = targetBox.clone();\n        var space = 5;\n        var minWidth = Math.min(box.width(), box.height());\n        var halfMinWidth = minWidth / 2;\n        var defaultPadding = minWidth - minWidth * 0.85;\n        var series = options.series;\n        var seriesCount = series.length;\n\n        var padding = valueOrDefault(options.padding, defaultPadding);\n        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n\n        var totalSize = halfMinWidth - padding;\n        var seriesWithoutSize = 0;\n        var holeSize;\n\n        for (var i = 0; i < seriesCount; i++) {\n            var currentSeries = series[i];\n            if (i === 0) {\n                if (defined(currentSeries.holeSize)) {\n                    holeSize = currentSeries.holeSize;\n                    totalSize -= currentSeries.holeSize;\n                }\n            }\n\n            if (defined(currentSeries.size)) {\n                totalSize -= currentSeries.size;\n            } else {\n                seriesWithoutSize++;\n            }\n\n            if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n                totalSize -= currentSeries.margin;\n            }\n        }\n\n        if (!defined(holeSize)) {\n            var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n            holeSize = currentSize * 0.75;\n            totalSize -= holeSize;\n        }\n\n        var innerRadius = holeSize;\n        var margin = 0;\n        var size, radius;\n\n        this.seriesConfigs = [];\n\n        for (var i$1 = 0; i$1 < seriesCount; i$1++) {\n            var currentSeries$1 = series[i$1];\n            size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);\n            innerRadius += margin;\n            radius = innerRadius + size;\n            this$1.seriesConfigs.push({ innerRadius: innerRadius, radius: radius });\n            margin = currentSeries$1.margin || 0;\n            innerRadius = radius;\n        }\n\n        PieChart.prototype.reflow.call(this, targetBox);\n    };\n\n    DonutChart.prototype.animationDelay = function animationDelay (categoryIndex, seriesIndex, seriesCount) {\n        return categoryIndex * DONUT_SECTOR_ANIM_DELAY +\n            (INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1));\n    };\n\n    return DonutChart;\n}(PieChart));\n\n\nsetDefaultOptions(DonutChart, {\n    startAngle: 90,\n    connectors: {\n        width: 2,\n        color: \"#939393\",\n        padding: 8\n    }\n});\n\nexport default DonutChart;"]},"metadata":{},"sourceType":"module"}