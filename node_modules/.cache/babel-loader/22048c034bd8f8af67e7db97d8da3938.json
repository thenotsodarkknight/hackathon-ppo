{"ast":null,"code":"import { ChartElement } from '../../core';\nimport { X, Y } from '../../common/constants';\nimport { setDefaultOptions } from '../../common';\nimport { forEach, forEachReverse } from './utils';\n\nvar ClusterLayout = function (ChartElement) {\n  function ClusterLayout(options) {\n    ChartElement.call(this, options);\n    this.forEach = options.rtl ? forEachReverse : forEach;\n  }\n\n  if (ChartElement) ClusterLayout.__proto__ = ChartElement;\n  ClusterLayout.prototype = Object.create(ChartElement && ChartElement.prototype);\n  ClusterLayout.prototype.constructor = ClusterLayout;\n\n  ClusterLayout.prototype.reflow = function reflow(box) {\n    var ref = this.options;\n    var vertical = ref.vertical;\n    var gap = ref.gap;\n    var spacing = ref.spacing;\n    var children = this.children;\n    var count = children.length;\n    var axis = vertical ? Y : X;\n    var slots = count + gap + spacing * (count - 1);\n    var slotSize = (vertical ? box.height() : box.width()) / slots;\n    var position = box[axis + 1] + slotSize * (gap / 2);\n    this.forEach(children, function (child, idx) {\n      var childBox = (child.box || box).clone();\n      childBox[axis + 1] = position;\n      childBox[axis + 2] = position + slotSize;\n      child.reflow(childBox);\n\n      if (idx < count - 1) {\n        position += slotSize * spacing;\n      }\n\n      position += slotSize;\n    });\n  };\n\n  return ClusterLayout;\n}(ChartElement);\n\nsetDefaultOptions(ClusterLayout, {\n  vertical: false,\n  gap: 0,\n  spacing: 0\n});\nexport default ClusterLayout;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/layout/cluster-layout.js"],"names":["ChartElement","X","Y","setDefaultOptions","forEach","forEachReverse","ClusterLayout","options","call","rtl","__proto__","prototype","Object","create","constructor","reflow","box","ref","vertical","gap","spacing","children","count","length","axis","slots","slotSize","height","width","position","child","idx","childBox","clone"],"mappings":"AAAA,SAASA,YAAT,QAA6B,YAA7B;AAEA,SAASC,CAAT,EAAYC,CAAZ,QAAqB,wBAArB;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,OAAT,EAAkBC,cAAlB,QAAwC,SAAxC;;AAEA,IAAIC,aAAa,GAAI,UAAUN,YAAV,EAAwB;AACzC,WAASM,aAAT,CAAuBC,OAAvB,EAAgC;AAC5BP,IAAAA,YAAY,CAACQ,IAAb,CAAkB,IAAlB,EAAwBD,OAAxB;AAEA,SAAKH,OAAL,GAAeG,OAAO,CAACE,GAAR,GAAcJ,cAAd,GAA+BD,OAA9C;AACH;;AAED,MAAKJ,YAAL,EAAoBM,aAAa,CAACI,SAAd,GAA0BV,YAA1B;AACpBM,EAAAA,aAAa,CAACK,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAeb,YAAY,IAAIA,YAAY,CAACW,SAA5C,CAA1B;AACAL,EAAAA,aAAa,CAACK,SAAd,CAAwBG,WAAxB,GAAsCR,aAAtC;;AAEAA,EAAAA,aAAa,CAACK,SAAd,CAAwBI,MAAxB,GAAiC,SAASA,MAAT,CAAiBC,GAAjB,EAAsB;AACnD,QAAIC,GAAG,GAAG,KAAKV,OAAf;AACA,QAAIW,QAAQ,GAAGD,GAAG,CAACC,QAAnB;AACA,QAAIC,GAAG,GAAGF,GAAG,CAACE,GAAd;AACA,QAAIC,OAAO,GAAGH,GAAG,CAACG,OAAlB;AACA,QAAIC,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIC,KAAK,GAAGD,QAAQ,CAACE,MAArB;AACA,QAAIC,IAAI,GAAGN,QAAQ,GAAGhB,CAAH,GAAOD,CAA1B;AACA,QAAIwB,KAAK,GAAGH,KAAK,GAAGH,GAAR,GAAeC,OAAO,IAAIE,KAAK,GAAG,CAAZ,CAAlC;AACA,QAAII,QAAQ,GAAG,CAACR,QAAQ,GAAGF,GAAG,CAACW,MAAJ,EAAH,GAAkBX,GAAG,CAACY,KAAJ,EAA3B,IAA0CH,KAAzD;AACA,QAAII,QAAQ,GAAGb,GAAG,CAACQ,IAAI,GAAG,CAAR,CAAH,GAAgBE,QAAQ,IAAIP,GAAG,GAAG,CAAV,CAAvC;AAEA,SAAKf,OAAL,CAAaiB,QAAb,EAAuB,UAAUS,KAAV,EAAiBC,GAAjB,EAAsB;AACzC,UAAIC,QAAQ,GAAG,CAACF,KAAK,CAACd,GAAN,IAAaA,GAAd,EAAmBiB,KAAnB,EAAf;AAEAD,MAAAA,QAAQ,CAACR,IAAI,GAAG,CAAR,CAAR,GAAqBK,QAArB;AACAG,MAAAA,QAAQ,CAACR,IAAI,GAAG,CAAR,CAAR,GAAqBK,QAAQ,GAAGH,QAAhC;AAEAI,MAAAA,KAAK,CAACf,MAAN,CAAaiB,QAAb;;AACA,UAAID,GAAG,GAAGT,KAAK,GAAG,CAAlB,EAAqB;AACjBO,QAAAA,QAAQ,IAAKH,QAAQ,GAAGN,OAAxB;AACH;;AAEDS,MAAAA,QAAQ,IAAIH,QAAZ;AACH,KAZD;AAaH,GAzBD;;AA2BA,SAAOpB,aAAP;AACH,CAvCoB,CAuCnBN,YAvCmB,CAArB;;AAyCAG,iBAAiB,CAACG,aAAD,EAAgB;AAC7BY,EAAAA,QAAQ,EAAE,KADmB;AAE7BC,EAAAA,GAAG,EAAE,CAFwB;AAG7BC,EAAAA,OAAO,EAAE;AAHoB,CAAhB,CAAjB;AAMA,eAAed,aAAf","sourcesContent":["import { ChartElement } from '../../core';\n\nimport { X, Y } from '../../common/constants';\nimport { setDefaultOptions } from '../../common';\nimport { forEach, forEachReverse } from './utils';\n\nvar ClusterLayout = (function (ChartElement) {\n    function ClusterLayout(options) {\n        ChartElement.call(this, options);\n\n        this.forEach = options.rtl ? forEachReverse : forEach;\n    }\n\n    if ( ChartElement ) ClusterLayout.__proto__ = ChartElement;\n    ClusterLayout.prototype = Object.create( ChartElement && ChartElement.prototype );\n    ClusterLayout.prototype.constructor = ClusterLayout;\n\n    ClusterLayout.prototype.reflow = function reflow (box) {\n        var ref = this.options;\n        var vertical = ref.vertical;\n        var gap = ref.gap;\n        var spacing = ref.spacing;\n        var children = this.children;\n        var count = children.length;\n        var axis = vertical ? Y : X;\n        var slots = count + gap + (spacing * (count - 1));\n        var slotSize = (vertical ? box.height() : box.width()) / slots;\n        var position = box[axis + 1] + slotSize * (gap / 2);\n\n        this.forEach(children, function (child, idx) {\n            var childBox = (child.box || box).clone();\n\n            childBox[axis + 1] = position;\n            childBox[axis + 2] = position + slotSize;\n\n            child.reflow(childBox);\n            if (idx < count - 1) {\n                position += (slotSize * spacing);\n            }\n\n            position += slotSize;\n        });\n    };\n\n    return ClusterLayout;\n}(ChartElement));\n\nsetDefaultOptions(ClusterLayout, {\n    vertical: false,\n    gap: 0,\n    spacing: 0\n});\n\nexport default ClusterLayout;"]},"metadata":{},"sourceType":"module"}