{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport { ChartElement, CategoryAxis } from '../../core';\nimport CrosshairTooltip from './crosshair-tooltip';\nimport { BLACK, X, Y } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nvar Crosshair = function (ChartElement) {\n  function Crosshair(chartService, axis, options) {\n    ChartElement.call(this, options);\n    this.axis = axis;\n    this.stickyMode = axis instanceof CategoryAxis;\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.visible) {\n      this.tooltip = new CrosshairTooltip(chartService, this, deepExtend({}, tooltipOptions, {\n        stickyMode: this.stickyMode\n      }));\n    }\n  }\n\n  if (ChartElement) Crosshair.__proto__ = ChartElement;\n  Crosshair.prototype = Object.create(ChartElement && ChartElement.prototype);\n  Crosshair.prototype.constructor = Crosshair;\n\n  Crosshair.prototype.showAt = function showAt(point) {\n    this.point = point;\n    this.moveLine();\n    this.line.visible(true);\n\n    if (this.tooltip) {\n      this.tooltip.showAt(point);\n    }\n  };\n\n  Crosshair.prototype.hide = function hide() {\n    this.line.visible(false);\n\n    if (this.tooltip) {\n      this.tooltip.hide();\n    }\n  };\n\n  Crosshair.prototype.moveLine = function moveLine() {\n    var ref = this;\n    var axis = ref.axis;\n    var point = ref.point;\n    var vertical = axis.options.vertical;\n    var box = this.getBox();\n    var dim = vertical ? Y : X;\n    var lineStart = new geom.Point(box.x1, box.y1);\n    var lineEnd;\n\n    if (vertical) {\n      lineEnd = new geom.Point(box.x2, box.y1);\n    } else {\n      lineEnd = new geom.Point(box.x1, box.y2);\n    }\n\n    if (point) {\n      if (this.stickyMode) {\n        var slot = axis.getSlot(axis.pointCategoryIndex(point));\n        lineStart[dim] = lineEnd[dim] = slot.center()[dim];\n      } else {\n        lineStart[dim] = lineEnd[dim] = point[dim];\n      }\n    }\n\n    this.box = box;\n    this.line.moveTo(lineStart).lineTo(lineEnd);\n  };\n\n  Crosshair.prototype.getBox = function getBox() {\n    var axis = this.axis;\n    var axes = axis.pane.axes;\n    var length = axes.length;\n    var vertical = axis.options.vertical;\n    var box = axis.lineBox().clone();\n    var dim = vertical ? X : Y;\n    var axisLineBox;\n\n    for (var i = 0; i < length; i++) {\n      var currentAxis = axes[i];\n\n      if (currentAxis.options.vertical !== vertical) {\n        if (!axisLineBox) {\n          axisLineBox = currentAxis.lineBox().clone();\n        } else {\n          axisLineBox.wrap(currentAxis.lineBox());\n        }\n      }\n    }\n\n    box[dim + 1] = axisLineBox[dim + 1];\n    box[dim + 2] = axisLineBox[dim + 2];\n    return box;\n  };\n\n  Crosshair.prototype.createVisual = function createVisual() {\n    ChartElement.prototype.createVisual.call(this);\n    var options = this.options;\n    this.line = new draw.Path({\n      stroke: {\n        color: options.color,\n        width: options.width,\n        opacity: options.opacity,\n        dashType: options.dashType\n      },\n      visible: false\n    });\n    this.moveLine();\n    this.visual.append(this.line);\n  };\n\n  Crosshair.prototype.destroy = function destroy() {\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n\n    ChartElement.prototype.destroy.call(this);\n  };\n\n  return Crosshair;\n}(ChartElement);\n\nsetDefaultOptions(Crosshair, {\n  color: BLACK,\n  width: 2,\n  zIndex: -1,\n  tooltip: {\n    visible: false\n  }\n});\nexport default Crosshair;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/crosshair/crosshair.js"],"names":["drawing","draw","geometry","geom","ChartElement","CategoryAxis","CrosshairTooltip","BLACK","X","Y","deepExtend","setDefaultOptions","Crosshair","chartService","axis","options","call","stickyMode","tooltipOptions","tooltip","visible","__proto__","prototype","Object","create","constructor","showAt","point","moveLine","line","hide","ref","vertical","box","getBox","dim","lineStart","Point","x1","y1","lineEnd","x2","y2","slot","getSlot","pointCategoryIndex","center","moveTo","lineTo","axes","pane","length","lineBox","clone","axisLineBox","i","currentAxis","wrap","createVisual","Path","stroke","color","width","opacity","dashType","visual","append","destroy","zIndex"],"mappings":"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","sourcesContent":["import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\n\nimport { ChartElement, CategoryAxis } from '../../core';\nimport CrosshairTooltip from './crosshair-tooltip';\n\nimport { BLACK, X, Y } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nvar Crosshair = (function (ChartElement) {\n    function Crosshair(chartService, axis, options) {\n        ChartElement.call(this, options);\n\n        this.axis = axis;\n        this.stickyMode = axis instanceof CategoryAxis;\n\n        var tooltipOptions = this.options.tooltip;\n\n        if (tooltipOptions.visible) {\n            this.tooltip = new CrosshairTooltip(chartService, this,\n                deepExtend({}, tooltipOptions, { stickyMode: this.stickyMode })\n            );\n        }\n    }\n\n    if ( ChartElement ) Crosshair.__proto__ = ChartElement;\n    Crosshair.prototype = Object.create( ChartElement && ChartElement.prototype );\n    Crosshair.prototype.constructor = Crosshair;\n\n    Crosshair.prototype.showAt = function showAt (point) {\n        this.point = point;\n        this.moveLine();\n        this.line.visible(true);\n\n        if (this.tooltip) {\n            this.tooltip.showAt(point);\n        }\n    };\n\n    Crosshair.prototype.hide = function hide () {\n        this.line.visible(false);\n\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    };\n\n    Crosshair.prototype.moveLine = function moveLine () {\n        var ref = this;\n        var axis = ref.axis;\n        var point = ref.point;\n        var vertical = axis.options.vertical;\n        var box = this.getBox();\n        var dim = vertical ? Y : X;\n        var lineStart = new geom.Point(box.x1, box.y1);\n        var lineEnd;\n\n        if (vertical) {\n            lineEnd = new geom.Point(box.x2, box.y1);\n        } else {\n            lineEnd = new geom.Point(box.x1, box.y2);\n        }\n\n        if (point) {\n            if (this.stickyMode) {\n                var slot = axis.getSlot(axis.pointCategoryIndex(point));\n                lineStart[dim] = lineEnd[dim] = slot.center()[dim];\n            } else {\n                lineStart[dim] = lineEnd[dim] = point[dim];\n            }\n        }\n\n        this.box = box;\n\n        this.line.moveTo(lineStart).lineTo(lineEnd);\n    };\n\n    Crosshair.prototype.getBox = function getBox () {\n        var axis = this.axis;\n        var axes = axis.pane.axes;\n        var length = axes.length;\n        var vertical = axis.options.vertical;\n        var box = axis.lineBox().clone();\n        var dim = vertical ? X : Y;\n        var axisLineBox;\n\n        for (var i = 0; i < length; i++) {\n            var currentAxis = axes[i];\n            if (currentAxis.options.vertical !== vertical) {\n                if (!axisLineBox) {\n                    axisLineBox = currentAxis.lineBox().clone();\n                } else {\n                    axisLineBox.wrap(currentAxis.lineBox());\n                }\n            }\n        }\n\n        box[dim + 1] = axisLineBox[dim + 1];\n        box[dim + 2] = axisLineBox[dim + 2];\n\n        return box;\n    };\n\n    Crosshair.prototype.createVisual = function createVisual () {\n        ChartElement.prototype.createVisual.call(this);\n\n        var options = this.options;\n        this.line = new draw.Path({\n            stroke: {\n                color: options.color,\n                width: options.width,\n                opacity: options.opacity,\n                dashType: options.dashType\n            },\n            visible: false\n        });\n\n        this.moveLine();\n        this.visual.append(this.line);\n    };\n\n    Crosshair.prototype.destroy = function destroy () {\n        if (this.tooltip) {\n            this.tooltip.destroy();\n        }\n\n        ChartElement.prototype.destroy.call(this);\n    };\n\n    return Crosshair;\n}(ChartElement));\n\nsetDefaultOptions(Crosshair, {\n    color: BLACK,\n    width: 2,\n    zIndex: -1,\n    tooltip: {\n        visible: false\n    }\n});\n\nexport default Crosshair;"]},"metadata":{},"sourceType":"module"}