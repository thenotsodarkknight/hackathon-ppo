{"ast":null,"code":"import SeriesBinder from '../series-binder';\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\nvar STD_ERR = \"stderr\";\nvar STD_DEV = \"stddev\";\nvar percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nvar standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nvar ErrorRangeCalculator = function (Class) {\n  function ErrorRangeCalculator(errorValue, series, field) {\n    Class.call(this);\n    this.initGlobalRanges(errorValue, series, field);\n  }\n\n  if (Class) ErrorRangeCalculator.__proto__ = Class;\n  ErrorRangeCalculator.prototype = Object.create(Class && Class.prototype);\n  ErrorRangeCalculator.prototype.constructor = ErrorRangeCalculator;\n\n  ErrorRangeCalculator.prototype.initGlobalRanges = function initGlobalRanges(errorValue, series, field) {\n    var data = series.data;\n    var deviationMatch = standardDeviationRegex.exec(errorValue);\n\n    if (deviationMatch) {\n      this.valueGetter = this.createValueGetter(series, field);\n      var average = this.getAverage(data);\n      var deviation = this.getStandardDeviation(data, average, false);\n      var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n      var errorRange = {\n        low: average.value - deviation * multiple,\n        high: average.value + deviation * multiple\n      };\n\n      this.globalRange = function () {\n        return errorRange;\n      };\n    } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n      this.valueGetter = this.createValueGetter(series, field);\n      var standardError = this.getStandardError(data, this.getAverage(data));\n\n      this.globalRange = function (value) {\n        return {\n          low: value - standardError,\n          high: value + standardError\n        };\n      };\n    }\n  };\n\n  ErrorRangeCalculator.prototype.createValueGetter = function createValueGetter(series, field) {\n    var data = series.data;\n    var binder = SeriesBinder.current;\n    var valueFields = binder.valueFields(series);\n    var item = defined(data[0]) ? data[0] : {};\n    var valueGetter;\n\n    if (isArray(item)) {\n      var index = field ? valueFields.indexOf(field) : 0;\n      valueGetter = getter(\"[\" + index + \"]\");\n    } else if (isNumber(item)) {\n      valueGetter = getter();\n    } else if (typeof item === OBJECT) {\n      var srcValueFields = binder.sourceFields(series, valueFields);\n      valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n    }\n\n    return valueGetter;\n  };\n\n  ErrorRangeCalculator.prototype.getErrorRange = function getErrorRange(pointValue, errorValue) {\n    var low, high, value;\n\n    if (!defined(errorValue)) {\n      return null;\n    }\n\n    if (this.globalRange) {\n      return this.globalRange(pointValue);\n    }\n\n    if (isArray(errorValue)) {\n      low = pointValue - errorValue[0];\n      high = pointValue + errorValue[1];\n    } else if (isNumber(value = parseFloat(errorValue))) {\n      low = pointValue - value;\n      high = pointValue + value;\n    } else if (value = percentRegex.exec(errorValue)) {\n      var percentValue = pointValue * (parseFloat(value[1]) / 100);\n      low = pointValue - Math.abs(percentValue);\n      high = pointValue + Math.abs(percentValue);\n    } else {\n      throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n    }\n\n    return {\n      low: low,\n      high: high\n    };\n  };\n\n  ErrorRangeCalculator.prototype.getStandardError = function getStandardError(data, average) {\n    return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n  };\n\n  ErrorRangeCalculator.prototype.getStandardDeviation = function getStandardDeviation(data, average, isSample) {\n    var this$1 = this;\n    var length = data.length;\n    var total = isSample ? average.count - 1 : average.count;\n    var squareDifferenceSum = 0;\n\n    for (var idx = 0; idx < length; idx++) {\n      var value = this$1.valueGetter(data[idx]);\n\n      if (isNumber(value)) {\n        squareDifferenceSum += Math.pow(value - average.value, 2);\n      }\n    }\n\n    return Math.sqrt(squareDifferenceSum / total);\n  };\n\n  ErrorRangeCalculator.prototype.getAverage = function getAverage(data) {\n    var this$1 = this;\n    var length = data.length;\n    var sum = 0;\n    var count = 0;\n\n    for (var idx = 0; idx < length; idx++) {\n      var value = this$1.valueGetter(data[idx]);\n\n      if (isNumber(value)) {\n        sum += value;\n        count++;\n      }\n    }\n\n    return {\n      value: sum / count,\n      count: count\n    };\n  };\n\n  return ErrorRangeCalculator;\n}(Class);\n\nexport default ErrorRangeCalculator;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/error-bars/error-range-calculator.js"],"names":["SeriesBinder","OBJECT","Class","defined","getter","isArray","isNumber","STD_ERR","STD_DEV","percentRegex","standardDeviationRegex","RegExp","ErrorRangeCalculator","errorValue","series","field","call","initGlobalRanges","__proto__","prototype","Object","create","constructor","data","deviationMatch","exec","valueGetter","createValueGetter","average","getAverage","deviation","getStandardDeviation","multiple","parseFloat","errorRange","low","value","high","globalRange","indexOf","standardError","getStandardError","binder","current","valueFields","item","index","srcValueFields","sourceFields","getErrorRange","pointValue","percentValue","Math","abs","Error","sqrt","count","isSample","this$1","length","total","squareDifferenceSum","idx","pow","sum"],"mappings":"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","sourcesContent":["import SeriesBinder from '../series-binder';\n\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\n\nvar STD_ERR = \"stderr\";\nvar STD_DEV = \"stddev\";\nvar percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nvar standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nvar ErrorRangeCalculator = (function (Class) {\n    function ErrorRangeCalculator(errorValue, series, field) {\n        Class.call(this);\n\n        this.initGlobalRanges(errorValue, series, field);\n    }\n\n    if ( Class ) ErrorRangeCalculator.__proto__ = Class;\n    ErrorRangeCalculator.prototype = Object.create( Class && Class.prototype );\n    ErrorRangeCalculator.prototype.constructor = ErrorRangeCalculator;\n\n    ErrorRangeCalculator.prototype.initGlobalRanges = function initGlobalRanges (errorValue, series, field) {\n        var data = series.data;\n        var deviationMatch = standardDeviationRegex.exec(errorValue);\n\n        if (deviationMatch) {\n            this.valueGetter = this.createValueGetter(series, field);\n\n            var average = this.getAverage(data);\n            var deviation = this.getStandardDeviation(data, average, false);\n            var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n            var errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };\n\n            this.globalRange = function() {\n                return errorRange;\n            };\n        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n            this.valueGetter = this.createValueGetter(series, field);\n            var standardError = this.getStandardError(data, this.getAverage(data));\n\n            this.globalRange = function(value) {\n                return { low: value - standardError, high: value + standardError };\n            };\n        }\n    };\n\n    ErrorRangeCalculator.prototype.createValueGetter = function createValueGetter (series, field) {\n        var data = series.data;\n        var binder = SeriesBinder.current;\n        var valueFields = binder.valueFields(series);\n        var item = defined(data[0]) ? data[0] : {};\n        var valueGetter;\n\n        if (isArray(item)) {\n            var index = field ? valueFields.indexOf(field) : 0;\n            valueGetter = getter(\"[\" + index + \"]\");\n        } else if (isNumber(item)) {\n            valueGetter = getter();\n        } else if (typeof item === OBJECT) {\n            var srcValueFields = binder.sourceFields(series, valueFields);\n            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n        }\n\n        return valueGetter;\n    };\n\n    ErrorRangeCalculator.prototype.getErrorRange = function getErrorRange (pointValue, errorValue) {\n        var low, high, value;\n\n        if (!defined(errorValue)) {\n            return null;\n        }\n\n        if (this.globalRange) {\n            return this.globalRange(pointValue);\n        }\n\n        if (isArray(errorValue)) {\n            low = pointValue - errorValue[0];\n            high = pointValue + errorValue[1];\n        } else if (isNumber(value = parseFloat(errorValue))) {\n            low = pointValue - value;\n            high = pointValue + value;\n        } else if ((value = percentRegex.exec(errorValue))) {\n            var percentValue = pointValue * (parseFloat(value[1]) / 100);\n            low = pointValue - Math.abs(percentValue);\n            high = pointValue + Math.abs(percentValue);\n        } else {\n            throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n        }\n\n        return { low: low, high: high };\n    };\n\n    ErrorRangeCalculator.prototype.getStandardError = function getStandardError (data, average) {\n        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n    };\n\n    ErrorRangeCalculator.prototype.getStandardDeviation = function getStandardDeviation (data, average, isSample) {\n        var this$1 = this;\n\n        var length = data.length;\n        var total = isSample ? average.count - 1 : average.count;\n        var squareDifferenceSum = 0;\n\n        for (var idx = 0; idx < length; idx++) {\n            var value = this$1.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                squareDifferenceSum += Math.pow(value - average.value, 2);\n            }\n        }\n\n        return Math.sqrt(squareDifferenceSum / total);\n    };\n\n    ErrorRangeCalculator.prototype.getAverage = function getAverage (data) {\n        var this$1 = this;\n\n        var length = data.length;\n        var sum = 0;\n        var count = 0;\n\n        for (var idx = 0; idx < length; idx++) {\n            var value = this$1.valueGetter(data[idx]);\n            if (isNumber(value)) {\n                sum += value;\n                count++;\n            }\n        }\n\n        return {\n            value: sum / count,\n            count: count\n        };\n    };\n\n    return ErrorRangeCalculator;\n}(Class));\n\nexport default ErrorRangeCalculator;"]},"metadata":{},"sourceType":"module"}