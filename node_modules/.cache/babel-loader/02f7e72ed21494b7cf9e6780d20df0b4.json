{"ast":null,"code":"import { logToConsole } from '../drawing-utils';\n\nvar FontLoader = function FontLoader() {};\n\nFontLoader.fetchFonts = function fetchFonts(options, fonts, state) {\n  if (state === void 0) state = {\n    depth: 0\n  };\n  var MAX_DEPTH = 5;\n\n  if (!options || state.depth > MAX_DEPTH || !document.fonts) {\n    return;\n  }\n\n  Object.keys(options).forEach(function (key) {\n    var value = options[key];\n\n    if (key === \"dataSource\" || key[0] === \"$\" || !value) {\n      return;\n    }\n\n    if (key === \"font\") {\n      fonts.push(value);\n    } else if (typeof value === \"object\") {\n      state.depth++;\n      FontLoader.fetchFonts(value, fonts, state);\n      state.depth--;\n    }\n  });\n};\n\nFontLoader.loadFonts = function loadFonts(fonts, callback) {\n  var promises = [];\n\n  if (fonts.length > 0 && document.fonts) {\n    try {\n      promises = fonts.map(function (font) {\n        return document.fonts.load(font);\n      });\n    } catch (e) {\n      // Silence font-loading errors\n      logToConsole(e);\n    }\n\n    Promise.all(promises).then(callback, callback);\n  } else {\n    callback();\n  }\n};\n\nFontLoader.preloadFonts = function preloadFonts(options, callback) {\n  var fonts = [];\n  FontLoader.fetchFonts(options, fonts);\n  FontLoader.loadFonts(fonts, callback);\n};\n\nexport default FontLoader;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/common/font-loader.js"],"names":["logToConsole","FontLoader","fetchFonts","options","fonts","state","depth","MAX_DEPTH","document","Object","keys","forEach","key","value","push","loadFonts","callback","promises","length","map","font","load","e","Promise","all","then","preloadFonts"],"mappings":"AAAA,SAASA,YAAT,QAA6B,kBAA7B;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,GAAuB,CAAE,CAA1C;;AAEAA,UAAU,CAACC,UAAX,GAAwB,SAASA,UAAT,CAAqBC,OAArB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;AAC5D,MAAKA,KAAK,KAAK,KAAK,CAApB,EAAwBA,KAAK,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAR;AAE5B,MAAIC,SAAS,GAAG,CAAhB;;AAEA,MAAI,CAACJ,OAAD,IAAYE,KAAK,CAACC,KAAN,GAAcC,SAA1B,IAAuC,CAACC,QAAQ,CAACJ,KAArD,EAA4D;AACxD;AACH;;AAEDK,EAAAA,MAAM,CAACC,IAAP,CAAYP,OAAZ,EAAqBQ,OAArB,CAA6B,UAASC,GAAT,EAAc;AACvC,QAAIC,KAAK,GAAGV,OAAO,CAACS,GAAD,CAAnB;;AACA,QAAIA,GAAG,KAAK,YAAR,IAAwBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAnC,IAA0C,CAACC,KAA/C,EAAsD;AAClD;AACH;;AAED,QAAID,GAAG,KAAK,MAAZ,EAAoB;AAChBR,MAAAA,KAAK,CAACU,IAAN,CAAWD,KAAX;AACH,KAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClCR,MAAAA,KAAK,CAACC,KAAN;AACAL,MAAAA,UAAU,CAACC,UAAX,CAAsBW,KAAtB,EAA6BT,KAA7B,EAAoCC,KAApC;AACAA,MAAAA,KAAK,CAACC,KAAN;AACH;AACJ,GAbD;AAcH,CAvBD;;AAyBAL,UAAU,CAACc,SAAX,GAAuB,SAASA,SAAT,CAAoBX,KAApB,EAA2BY,QAA3B,EAAqC;AACxD,MAAIC,QAAQ,GAAG,EAAf;;AAEA,MAAIb,KAAK,CAACc,MAAN,GAAe,CAAf,IAAoBV,QAAQ,CAACJ,KAAjC,EAAwC;AACpC,QAAI;AACAa,MAAAA,QAAQ,GAAGb,KAAK,CAACe,GAAN,CAAU,UAASC,IAAT,EAAe;AAChC,eAAOZ,QAAQ,CAACJ,KAAT,CAAeiB,IAAf,CAAoBD,IAApB,CAAP;AACH,OAFU,CAAX;AAGH,KAJD,CAIE,OAAOE,CAAP,EAAU;AACR;AACAtB,MAAAA,YAAY,CAACsB,CAAD,CAAZ;AACH;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ,EAAsBQ,IAAtB,CAA2BT,QAA3B,EAAqCA,QAArC;AACH,GAXD,MAWO;AACHA,IAAAA,QAAQ;AACX;AACJ,CAjBD;;AAmBAf,UAAU,CAACyB,YAAX,GAA0B,SAASA,YAAT,CAAuBvB,OAAvB,EAAgCa,QAAhC,EAA0C;AAChE,MAAIZ,KAAK,GAAG,EAAZ;AACAH,EAAAA,UAAU,CAACC,UAAX,CAAsBC,OAAtB,EAA+BC,KAA/B;AAEAH,EAAAA,UAAU,CAACc,SAAX,CAAqBX,KAArB,EAA4BY,QAA5B;AACH,CALD;;AAOA,eAAef,UAAf","sourcesContent":["import { logToConsole } from '../drawing-utils';\n\nvar FontLoader = function FontLoader () {};\n\nFontLoader.fetchFonts = function fetchFonts (options, fonts, state) {\n        if ( state === void 0 ) state = { depth: 0 };\n\n    var MAX_DEPTH = 5;\n\n    if (!options || state.depth > MAX_DEPTH || !document.fonts) {\n        return;\n    }\n\n    Object.keys(options).forEach(function(key) {\n        var value = options[key];\n        if (key === \"dataSource\" || key[0] === \"$\" || !value) {\n            return;\n        }\n\n        if (key === \"font\") {\n            fonts.push(value);\n        } else if (typeof value === \"object\") {\n            state.depth++;\n            FontLoader.fetchFonts(value, fonts, state);\n            state.depth--;\n        }\n    });\n};\n\nFontLoader.loadFonts = function loadFonts (fonts, callback) {\n    var promises = [];\n\n    if (fonts.length > 0 && document.fonts) {\n        try {\n            promises = fonts.map(function(font) {\n                return document.fonts.load(font);\n            });\n        } catch (e) {\n            // Silence font-loading errors\n            logToConsole(e);\n        }\n\n        Promise.all(promises).then(callback, callback);\n    } else {\n        callback();\n    }\n};\n\nFontLoader.preloadFonts = function preloadFonts (options, callback) {\n    var fonts = [];\n    FontLoader.fetchFonts(options, fonts);\n\n    FontLoader.loadFonts(fonts, callback);\n};\n\nexport default FontLoader;"]},"metadata":{},"sourceType":"module"}