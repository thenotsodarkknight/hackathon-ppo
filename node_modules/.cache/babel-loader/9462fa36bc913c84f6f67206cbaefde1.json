{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Point, Box } from '../../core';\nimport { FADEIN, INITIAL_ANIMATION_DURATION } from '../constants';\nimport { setDefaultOptions, alignPathToPixel } from '../../common';\nvar DEFAULT_ERROR_BAR_WIDTH = 4;\n\nvar ErrorBarBase = function (ChartElement) {\n  function ErrorBarBase(low, high, isVertical, chart, series, options) {\n    ChartElement.call(this, options);\n    this.low = low;\n    this.high = high;\n    this.isVertical = isVertical;\n    this.chart = chart;\n    this.series = series;\n  }\n\n  if (ChartElement) ErrorBarBase.__proto__ = ChartElement;\n  ErrorBarBase.prototype = Object.create(ChartElement && ChartElement.prototype);\n  ErrorBarBase.prototype.constructor = ErrorBarBase;\n\n  ErrorBarBase.prototype.reflow = function reflow(targetBox) {\n    var endCaps = this.options.endCaps;\n    var isVertical = this.isVertical;\n    var axis = this.getAxis();\n    var valueBox = axis.getSlot(this.low, this.high);\n    var centerBox = targetBox.center();\n    var capsWidth = this.getCapsWidth(targetBox, isVertical);\n    var capValue = isVertical ? centerBox.x : centerBox.y;\n    var capStart = capValue - capsWidth;\n    var capEnd = capValue + capsWidth;\n    var linePoints;\n\n    if (isVertical) {\n      linePoints = [new Point(centerBox.x, valueBox.y1), new Point(centerBox.x, valueBox.y2)];\n\n      if (endCaps) {\n        linePoints.push(new Point(capStart, valueBox.y1), new Point(capEnd, valueBox.y1), new Point(capStart, valueBox.y2), new Point(capEnd, valueBox.y2));\n      }\n\n      this.box = new Box(capStart, valueBox.y1, capEnd, valueBox.y2);\n    } else {\n      linePoints = [new Point(valueBox.x1, centerBox.y), new Point(valueBox.x2, centerBox.y)];\n\n      if (endCaps) {\n        linePoints.push(new Point(valueBox.x1, capStart), new Point(valueBox.x1, capEnd), new Point(valueBox.x2, capStart), new Point(valueBox.x2, capEnd));\n      }\n\n      this.box = new Box(valueBox.x1, capStart, valueBox.x2, capEnd);\n    }\n\n    this.linePoints = linePoints;\n  };\n\n  ErrorBarBase.prototype.getCapsWidth = function getCapsWidth(box, isVertical) {\n    var boxSize = isVertical ? box.width() : box.height();\n    var capsWidth = Math.min(Math.floor(boxSize / 2), DEFAULT_ERROR_BAR_WIDTH) || DEFAULT_ERROR_BAR_WIDTH;\n    return capsWidth;\n  };\n\n  ErrorBarBase.prototype.createVisual = function createVisual() {\n    var this$1 = this;\n    var options = this.options;\n    var visual = options.visual;\n\n    if (visual) {\n      this.visual = visual({\n        low: this.low,\n        high: this.high,\n        rect: this.box.toRect(),\n        sender: this.getSender(),\n        options: {\n          endCaps: options.endCaps,\n          color: options.color,\n          line: options.line\n        },\n        createVisual: function createVisual() {\n          this$1.createDefaultVisual();\n          var defaultVisual = this$1.visual;\n          delete this$1.visual;\n          return defaultVisual;\n        }\n      });\n    } else {\n      this.createDefaultVisual();\n    }\n  };\n\n  ErrorBarBase.prototype.createDefaultVisual = function createDefaultVisual() {\n    var this$1 = this;\n    var ref = this;\n    var options = ref.options;\n    var linePoints = ref.linePoints;\n    var lineOptions = {\n      stroke: {\n        color: options.color,\n        width: options.line.width,\n        dashType: options.line.dashType\n      }\n    };\n    ChartElement.prototype.createVisual.call(this);\n\n    for (var idx = 0; idx < linePoints.length; idx += 2) {\n      var line = new draw.Path(lineOptions).moveTo(linePoints[idx].x, linePoints[idx].y).lineTo(linePoints[idx + 1].x, linePoints[idx + 1].y);\n      alignPathToPixel(line);\n      this$1.visual.append(line);\n    }\n  };\n\n  return ErrorBarBase;\n}(ChartElement);\n\nsetDefaultOptions(ErrorBarBase, {\n  animation: {\n    type: FADEIN,\n    delay: INITIAL_ANIMATION_DURATION\n  },\n  endCaps: true,\n  line: {\n    width: 2\n  },\n  zIndex: 1\n});\nexport default ErrorBarBase;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/error-bars/error-bar-base.js"],"names":["drawing","draw","ChartElement","Point","Box","FADEIN","INITIAL_ANIMATION_DURATION","setDefaultOptions","alignPathToPixel","DEFAULT_ERROR_BAR_WIDTH","ErrorBarBase","low","high","isVertical","chart","series","options","call","__proto__","prototype","Object","create","constructor","reflow","targetBox","endCaps","axis","getAxis","valueBox","getSlot","centerBox","center","capsWidth","getCapsWidth","capValue","x","y","capStart","capEnd","linePoints","y1","y2","push","box","x1","x2","boxSize","width","height","Math","min","floor","createVisual","this$1","visual","rect","toRect","sender","getSender","color","line","createDefaultVisual","defaultVisual","ref","lineOptions","stroke","dashType","idx","length","Path","moveTo","lineTo","append","animation","type","delay","zIndex"],"mappings":"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","sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport { ChartElement, Point, Box } from '../../core';\n\nimport { FADEIN, INITIAL_ANIMATION_DURATION } from '../constants';\n\nimport { setDefaultOptions, alignPathToPixel } from '../../common';\n\nvar DEFAULT_ERROR_BAR_WIDTH = 4;\n\nvar ErrorBarBase = (function (ChartElement) {\n    function ErrorBarBase(low, high, isVertical, chart, series, options) {\n        ChartElement.call(this, options);\n\n        this.low = low;\n        this.high = high;\n        this.isVertical = isVertical;\n        this.chart = chart;\n        this.series = series;\n    }\n\n    if ( ChartElement ) ErrorBarBase.__proto__ = ChartElement;\n    ErrorBarBase.prototype = Object.create( ChartElement && ChartElement.prototype );\n    ErrorBarBase.prototype.constructor = ErrorBarBase;\n\n    ErrorBarBase.prototype.reflow = function reflow (targetBox) {\n        var endCaps = this.options.endCaps;\n        var isVertical = this.isVertical;\n        var axis = this.getAxis();\n        var valueBox = axis.getSlot(this.low, this.high);\n        var centerBox = targetBox.center();\n        var capsWidth = this.getCapsWidth(targetBox, isVertical);\n        var capValue = isVertical ? centerBox.x : centerBox.y;\n        var capStart = capValue - capsWidth;\n        var capEnd = capValue + capsWidth;\n        var linePoints;\n\n        if (isVertical) {\n            linePoints = [\n                new Point(centerBox.x, valueBox.y1),\n                new Point(centerBox.x, valueBox.y2)\n            ];\n            if (endCaps) {\n                linePoints.push(new Point(capStart, valueBox.y1),\n                    new Point(capEnd, valueBox.y1),\n                    new Point(capStart, valueBox.y2),\n                    new Point(capEnd, valueBox.y2));\n            }\n            this.box = new Box(capStart, valueBox.y1, capEnd, valueBox.y2);\n        } else {\n            linePoints = [\n                new Point(valueBox.x1, centerBox.y),\n                new Point(valueBox.x2, centerBox.y)\n            ];\n            if (endCaps) {\n                linePoints.push(new Point(valueBox.x1, capStart),\n                    new Point(valueBox.x1, capEnd),\n                    new Point(valueBox.x2, capStart),\n                    new Point(valueBox.x2, capEnd));\n            }\n            this.box = new Box(valueBox.x1, capStart, valueBox.x2, capEnd);\n        }\n\n        this.linePoints = linePoints;\n    };\n\n    ErrorBarBase.prototype.getCapsWidth = function getCapsWidth (box, isVertical) {\n        var boxSize = isVertical ? box.width() : box.height();\n        var capsWidth = Math.min(Math.floor(boxSize / 2), DEFAULT_ERROR_BAR_WIDTH) || DEFAULT_ERROR_BAR_WIDTH;\n\n        return capsWidth;\n    };\n\n    ErrorBarBase.prototype.createVisual = function createVisual () {\n        var this$1 = this;\n\n        var options = this.options;\n        var visual = options.visual;\n\n        if (visual) {\n            this.visual = visual({\n                low: this.low,\n                high: this.high,\n                rect: this.box.toRect(),\n                sender: this.getSender(),\n                options: {\n                    endCaps: options.endCaps,\n                    color: options.color,\n                    line: options.line\n                },\n                createVisual: function () {\n                    this$1.createDefaultVisual();\n                    var defaultVisual = this$1.visual;\n                    delete this$1.visual;\n                    return defaultVisual;\n                }\n            });\n        } else {\n            this.createDefaultVisual();\n        }\n    };\n\n    ErrorBarBase.prototype.createDefaultVisual = function createDefaultVisual () {\n        var this$1 = this;\n\n        var ref = this;\n        var options = ref.options;\n        var linePoints = ref.linePoints;\n        var lineOptions = {\n            stroke: {\n                color: options.color,\n                width: options.line.width,\n                dashType: options.line.dashType\n            }\n        };\n\n        ChartElement.prototype.createVisual.call(this);\n\n        for (var idx = 0; idx < linePoints.length; idx += 2) {\n            var line = new draw.Path(lineOptions)\n                .moveTo(linePoints[idx].x, linePoints[idx].y)\n                .lineTo(linePoints[idx + 1].x, linePoints[idx + 1].y);\n\n            alignPathToPixel(line);\n            this$1.visual.append(line);\n        }\n    };\n\n    return ErrorBarBase;\n}(ChartElement));\n\nsetDefaultOptions(ErrorBarBase, {\n    animation: {\n        type: FADEIN,\n        delay: INITIAL_ANIMATION_DURATION\n    },\n    endCaps: true,\n    line: {\n        width: 2\n    },\n    zIndex: 1\n});\n\nexport default ErrorBarBase;"]},"metadata":{},"sourceType":"module"}