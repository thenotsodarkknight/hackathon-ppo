{"ast":null,"code":"import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport { RadarLogarithmicAxis, RadarNumericAxis } from '../../core';\nimport { LOGARITHMIC } from '../constants';\nimport { getSpacing } from '../../common';\nimport { Y, CENTER } from '../../common/constants';\nvar DEFAULT_PADDING = 0.15;\n\nvar PolarPlotAreaBase = function (PlotAreaBase) {\n  function PolarPlotAreaBase() {\n    PlotAreaBase.apply(this, arguments);\n  }\n\n  if (PlotAreaBase) PolarPlotAreaBase.__proto__ = PlotAreaBase;\n  PolarPlotAreaBase.prototype = Object.create(PlotAreaBase && PlotAreaBase.prototype);\n  PolarPlotAreaBase.prototype.constructor = PolarPlotAreaBase;\n\n  PolarPlotAreaBase.prototype.initFields = function initFields() {\n    this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n  };\n\n  PolarPlotAreaBase.prototype.render = function render() {\n    this.addToLegend(this.series);\n    this.createPolarAxis();\n    this.createCharts();\n    this.createValueAxis();\n  };\n\n  PolarPlotAreaBase.prototype.alignAxes = function alignAxes() {\n    var axis = this.valueAxis;\n    var range = axis.range();\n    var crossingValue = axis.options.reverse ? range.max : range.min;\n    var slot = axis.getSlot(crossingValue);\n    var center = this.polarAxis.getSlot(0).center;\n    var axisBox = axis.box.translate(center.x - slot.x1, center.y - slot.y1);\n    axis.reflow(axisBox);\n  };\n\n  PolarPlotAreaBase.prototype.createValueAxis = function createValueAxis() {\n    var tracker = this.valueAxisRangeTracker;\n    var defaultRange = tracker.query();\n    var axisOptions = this.valueAxisOptions({\n      roundToMajorUnit: false,\n      zIndex: -1\n    });\n    var axisType, axisDefaultRange;\n\n    if (axisOptions.type === LOGARITHMIC) {\n      axisType = RadarLogarithmicAxis;\n      axisDefaultRange = {\n        min: 0.1,\n        max: 1\n      };\n    } else {\n      axisType = RadarNumericAxis;\n      axisDefaultRange = {\n        min: 0,\n        max: 1\n      };\n    }\n\n    var range = tracker.query(name) || defaultRange || axisDefaultRange;\n\n    if (range && defaultRange) {\n      range.min = Math.min(range.min, defaultRange.min);\n      range.max = Math.max(range.max, defaultRange.max);\n    }\n\n    var valueAxis = new axisType(range.min, range.max, axisOptions, this.chartService);\n    this.valueAxis = valueAxis;\n    this.appendAxis(valueAxis);\n  };\n\n  PolarPlotAreaBase.prototype.reflowAxes = function reflowAxes() {\n    var ref = this;\n    var options = ref.options.plotArea;\n    var valueAxis = ref.valueAxis;\n    var polarAxis = ref.polarAxis;\n    var box = ref.box;\n    var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;\n    var padding = getSpacing(options.padding || {}, defaultPadding);\n    var paddingBox = box.clone().unpad(padding);\n    var axisBox = paddingBox.clone();\n    axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());\n    axisBox.align(paddingBox, Y, CENTER);\n    var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);\n    polarAxis.reflow(axisBox);\n    valueAxis.reflow(valueAxisBox);\n    var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();\n    valueAxis.reflow(valueAxis.box.unpad({\n      top: heightDiff\n    }));\n    this.axisBox = axisBox;\n    this.alignAxes(axisBox);\n  };\n\n  PolarPlotAreaBase.prototype.backgroundBox = function backgroundBox() {\n    return this.box;\n  };\n\n  PolarPlotAreaBase.prototype.detachLabels = function detachLabels() {};\n\n  return PolarPlotAreaBase;\n}(PlotAreaBase);\n\nexport default PolarPlotAreaBase;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/plotarea/polar-plotarea-base.js"],"names":["PlotAreaBase","AxisGroupRangeTracker","RadarLogarithmicAxis","RadarNumericAxis","LOGARITHMIC","getSpacing","Y","CENTER","DEFAULT_PADDING","PolarPlotAreaBase","apply","arguments","__proto__","prototype","Object","create","constructor","initFields","valueAxisRangeTracker","render","addToLegend","series","createPolarAxis","createCharts","createValueAxis","alignAxes","axis","valueAxis","range","crossingValue","options","reverse","max","min","slot","getSlot","center","polarAxis","axisBox","box","translate","x","x1","y","y1","reflow","tracker","defaultRange","query","axisOptions","valueAxisOptions","roundToMajorUnit","zIndex","axisType","axisDefaultRange","type","name","Math","chartService","appendAxis","reflowAxes","ref","plotArea","defaultPadding","width","height","padding","paddingBox","clone","unpad","y2","align","valueAxisBox","shrink","heightDiff","lineBox","top","backgroundBox","detachLabels"],"mappings":"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","sourcesContent":["import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport { RadarLogarithmicAxis, RadarNumericAxis } from '../../core';\n\nimport { LOGARITHMIC } from '../constants';\n\nimport { getSpacing } from '../../common';\nimport { Y, CENTER } from '../../common/constants';\n\nvar DEFAULT_PADDING = 0.15;\n\nvar PolarPlotAreaBase = (function (PlotAreaBase) {\n    function PolarPlotAreaBase () {\n        PlotAreaBase.apply(this, arguments);\n    }\n\n    if ( PlotAreaBase ) PolarPlotAreaBase.__proto__ = PlotAreaBase;\n    PolarPlotAreaBase.prototype = Object.create( PlotAreaBase && PlotAreaBase.prototype );\n    PolarPlotAreaBase.prototype.constructor = PolarPlotAreaBase;\n\n    PolarPlotAreaBase.prototype.initFields = function initFields () {\n        this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n    };\n\n    PolarPlotAreaBase.prototype.render = function render () {\n        this.addToLegend(this.series);\n        this.createPolarAxis();\n        this.createCharts();\n        this.createValueAxis();\n    };\n\n    PolarPlotAreaBase.prototype.alignAxes = function alignAxes () {\n        var axis = this.valueAxis;\n        var range = axis.range();\n        var crossingValue = axis.options.reverse ? range.max : range.min;\n        var slot = axis.getSlot(crossingValue);\n        var center = this.polarAxis.getSlot(0).center;\n        var axisBox = axis.box.translate(\n            center.x - slot.x1,\n            center.y - slot.y1\n        );\n\n        axis.reflow(axisBox);\n    };\n\n    PolarPlotAreaBase.prototype.createValueAxis = function createValueAxis () {\n        var tracker = this.valueAxisRangeTracker;\n        var defaultRange = tracker.query();\n        var axisOptions = this.valueAxisOptions({\n            roundToMajorUnit: false,\n            zIndex: -1\n        });\n        var axisType, axisDefaultRange;\n\n        if (axisOptions.type === LOGARITHMIC) {\n            axisType = RadarLogarithmicAxis;\n            axisDefaultRange = { min: 0.1, max: 1 };\n        } else {\n            axisType = RadarNumericAxis;\n            axisDefaultRange = { min: 0, max: 1 };\n        }\n\n        var range = tracker.query(name) || defaultRange || axisDefaultRange;\n\n        if (range && defaultRange) {\n            range.min = Math.min(range.min, defaultRange.min);\n            range.max = Math.max(range.max, defaultRange.max);\n        }\n\n        var valueAxis = new axisType(\n            range.min, range.max,\n            axisOptions,\n            this.chartService\n        );\n\n        this.valueAxis = valueAxis;\n        this.appendAxis(valueAxis);\n    };\n\n    PolarPlotAreaBase.prototype.reflowAxes = function reflowAxes () {\n        var ref = this;\n        var options = ref.options.plotArea;\n        var valueAxis = ref.valueAxis;\n        var polarAxis = ref.polarAxis;\n        var box = ref.box;\n        var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;\n        var padding = getSpacing(options.padding || {}, defaultPadding);\n        var paddingBox = box.clone().unpad(padding);\n        var axisBox = paddingBox.clone();\n\n        axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());\n        axisBox.align(paddingBox, Y, CENTER);\n\n        var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);\n\n        polarAxis.reflow(axisBox);\n        valueAxis.reflow(valueAxisBox);\n        var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();\n        valueAxis.reflow(valueAxis.box.unpad({ top: heightDiff }));\n\n        this.axisBox = axisBox;\n        this.alignAxes(axisBox);\n    };\n\n    PolarPlotAreaBase.prototype.backgroundBox = function backgroundBox () {\n        return this.box;\n    };\n\n    PolarPlotAreaBase.prototype.detachLabels = function detachLabels () {};\n\n    return PolarPlotAreaBase;\n}(PlotAreaBase));\n\nexport default PolarPlotAreaBase;\n"]},"metadata":{},"sourceType":"module"}