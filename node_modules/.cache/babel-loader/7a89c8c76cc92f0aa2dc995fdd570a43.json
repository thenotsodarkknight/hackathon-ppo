{"ast":null,"code":"var getTouch = function (domEvent) {\n  return {\n    x: {\n      location: domEvent.pageX\n    },\n    y: {\n      location: domEvent.pageY\n    }\n  };\n};\n\nvar eventArgs = function (e, previousArgs) {\n  var pointers = e.pointers;\n  var pointer = pointers[0];\n  var xLocation = pointer.pageX;\n  var yLocation = pointer.pageY;\n  var distance = 0;\n\n  if (pointers.length > 1) {\n    var pointer1 = pointers[0];\n    var pointer2 = pointers[1];\n    distance = Math.sqrt(Math.pow(pointer1.pageX - pointer2.pageX, 2) + Math.pow(pointer1.pageY - pointer2.pageY, 2));\n  }\n\n  return {\n    distance: distance,\n    event: e.srcEvent,\n    preventDefault: function () {\n      e.preventDefault();\n    },\n    target: e.target,\n    touches: pointers.map(getTouch),\n    type: e.type,\n    x: {\n      delta: previousArgs ? xLocation - previousArgs.x.location : 0,\n      initialDelta: e.deltaX,\n      location: xLocation,\n      startLocation: xLocation - e.deltaX\n    },\n    y: {\n      delta: previousArgs ? yLocation - previousArgs.y.location : 0,\n      initialDelta: e.deltaY,\n      location: yLocation,\n      startLocation: yLocation - e.deltaY\n    }\n  };\n};\n\nfunction shouldBindGroup(groupNames, events) {\n  for (var idx = 0; idx < groupNames.length; idx++) {\n    if (events[groupNames[idx]]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar eventGroups = [{\n  end: 'panend',\n  move: 'panmove',\n  start: 'panstart'\n}, {\n  gesturechange: 'pinchmove',\n  gestureend: 'pinchend',\n  gesturestart: 'pinchstart'\n}, {\n  press: 'press'\n}, {\n  tap: 'tap'\n}];\n/**\n * @hidden\n */\n\nvar DomEvents =\n/** @class */\nfunction () {\n  function DomEvents(hammerInstance, events) {\n    this.hammerInstance = hammerInstance;\n    this.eventHandlers = {};\n    this.tap = this.tap.bind(this);\n    this.press = this.press.bind(this);\n    this.panstart = this.panstart.bind(this);\n    this.panmove = this.panmove.bind(this);\n    this.panend = this.panend.bind(this);\n    this.pinchstart = this.pinchstart.bind(this);\n    this.pinchmove = this.pinchmove.bind(this);\n    this.pinchend = this.pinchend.bind(this);\n\n    if (events) {\n      this.bind(events);\n    }\n  }\n\n  DomEvents.prototype.tap = function (e) {\n    this.trigger('tap', e);\n  };\n\n  DomEvents.prototype.press = function (e) {\n    this.trigger('press', e);\n  };\n\n  DomEvents.prototype.panstart = function (e) {\n    delete this.previous;\n    this.previous = this.trigger('start', e);\n  };\n\n  DomEvents.prototype.panmove = function (e) {\n    this.previous = this.trigger('move', e);\n  };\n\n  DomEvents.prototype.panend = function (e) {\n    this.trigger('end', e);\n    delete this.previous;\n  };\n\n  DomEvents.prototype.pinchstart = function (e) {\n    this.trigger('gesturestart', e);\n  };\n\n  DomEvents.prototype.pinchmove = function (e) {\n    this.trigger('gesturechange', e);\n  };\n\n  DomEvents.prototype.pinchend = function (e) {\n    this.trigger('gestureend', e);\n  };\n\n  DomEvents.prototype.trigger = function (name, e) {\n    var args = eventArgs(e, this.previous);\n\n    if (this.eventHandlers[name]) {\n      this.eventHandlers[name](args);\n    }\n\n    return args;\n  };\n\n  DomEvents.prototype.bind = function (events) {\n    if (events === void 0) {\n      events = {};\n    }\n\n    this.unbind();\n    this.eventHandlers = events;\n\n    for (var idx = 0; idx < eventGroups.length; idx++) {\n      var eventGroup = eventGroups[idx];\n      var groupNames = Object.keys(eventGroup);\n\n      if (shouldBindGroup(groupNames, events)) {\n        for (var nameIdx = 0; nameIdx < groupNames.length; nameIdx++) {\n          var name_1 = eventGroup[groupNames[nameIdx]];\n          this.hammerInstance.on(name_1, this[name_1]);\n        }\n      }\n    }\n  };\n\n  DomEvents.prototype.unbind = function () {\n    if (this.hammerInstance) {\n      this.hammerInstance.off();\n    }\n\n    this.eventHandlers = {};\n  };\n\n  DomEvents.prototype.destroy = function () {\n    if (this.hammerInstance) {\n      this.hammerInstance.destroy();\n      delete this.hammerInstance;\n    }\n\n    delete this.eventHandlers;\n  };\n\n  DomEvents.prototype.toggleDrag = function (enable) {\n    this.toggle('pan', enable);\n  };\n\n  DomEvents.prototype.toggleZoom = function (enable) {\n    this.toggle('pinch', enable);\n  };\n\n  DomEvents.prototype.toggle = function (recognizer, enable) {\n    if (this.hammerInstance) {\n      var instanceRecognizer = this.hammerInstance.get(recognizer);\n      instanceRecognizer.set({\n        enable: enable\n      });\n    }\n  };\n\n  return DomEvents;\n}();\n\nexport { DomEvents };","map":{"version":3,"sources":["../../../src/events/dom-events.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var getTouch = function (domEvent) {\n    return {\n        x: {\n            location: domEvent.pageX\n        },\n        y: {\n            location: domEvent.pageY\n        }\n    };\n};\nvar eventArgs = function (e, previousArgs) {\n    var pointers = e.pointers;\n    var pointer = pointers[0];\n    var xLocation = pointer.pageX;\n    var yLocation = pointer.pageY;\n    var distance = 0;\n    if (pointers.length > 1) {\n        var pointer1 = pointers[0];\n        var pointer2 = pointers[1];\n        distance = Math.sqrt(Math.pow(pointer1.pageX - pointer2.pageX, 2) +\n            Math.pow(pointer1.pageY - pointer2.pageY, 2));\n    }\n    return {\n        distance: distance,\n        event: e.srcEvent,\n        preventDefault: function () {\n            e.preventDefault();\n        },\n        target: e.target,\n        touches: pointers.map(getTouch),\n        type: e.type,\n        x: {\n            delta: previousArgs ? xLocation - previousArgs.x.location : 0,\n            initialDelta: e.deltaX,\n            location: xLocation,\n            startLocation: xLocation - e.deltaX\n        },\n        y: {\n            delta: previousArgs ? yLocation - previousArgs.y.location : 0,\n            initialDelta: e.deltaY,\n            location: yLocation,\n            startLocation: yLocation - e.deltaY\n        }\n    };\n};\nfunction shouldBindGroup(groupNames, events) {\n    for (var idx = 0; idx < groupNames.length; idx++) {\n        if (events[groupNames[idx]]) {\n            return true;\n        }\n    }\n    return false;\n}\nvar eventGroups = [{\n        end: 'panend',\n        move: 'panmove',\n        start: 'panstart'\n    }, {\n        gesturechange: 'pinchmove',\n        gestureend: 'pinchend',\n        gesturestart: 'pinchstart'\n    }, {\n        press: 'press'\n    }, {\n        tap: 'tap'\n    }];\n/**\n * @hidden\n */\nvar DomEvents = /** @class */ (function () {\n    function DomEvents(hammerInstance, events) {\n        this.hammerInstance = hammerInstance;\n        this.eventHandlers = {};\n        this.tap = this.tap.bind(this);\n        this.press = this.press.bind(this);\n        this.panstart = this.panstart.bind(this);\n        this.panmove = this.panmove.bind(this);\n        this.panend = this.panend.bind(this);\n        this.pinchstart = this.pinchstart.bind(this);\n        this.pinchmove = this.pinchmove.bind(this);\n        this.pinchend = this.pinchend.bind(this);\n        if (events) {\n            this.bind(events);\n        }\n    }\n    DomEvents.prototype.tap = function (e) {\n        this.trigger('tap', e);\n    };\n    DomEvents.prototype.press = function (e) {\n        this.trigger('press', e);\n    };\n    DomEvents.prototype.panstart = function (e) {\n        delete this.previous;\n        this.previous = this.trigger('start', e);\n    };\n    DomEvents.prototype.panmove = function (e) {\n        this.previous = this.trigger('move', e);\n    };\n    DomEvents.prototype.panend = function (e) {\n        this.trigger('end', e);\n        delete this.previous;\n    };\n    DomEvents.prototype.pinchstart = function (e) {\n        this.trigger('gesturestart', e);\n    };\n    DomEvents.prototype.pinchmove = function (e) {\n        this.trigger('gesturechange', e);\n    };\n    DomEvents.prototype.pinchend = function (e) {\n        this.trigger('gestureend', e);\n    };\n    DomEvents.prototype.trigger = function (name, e) {\n        var args = eventArgs(e, this.previous);\n        if (this.eventHandlers[name]) {\n            this.eventHandlers[name](args);\n        }\n        return args;\n    };\n    DomEvents.prototype.bind = function (events) {\n        if (events === void 0) { events = {}; }\n        this.unbind();\n        this.eventHandlers = events;\n        for (var idx = 0; idx < eventGroups.length; idx++) {\n            var eventGroup = eventGroups[idx];\n            var groupNames = Object.keys(eventGroup);\n            if (shouldBindGroup(groupNames, events)) {\n                for (var nameIdx = 0; nameIdx < groupNames.length; nameIdx++) {\n                    var name_1 = eventGroup[groupNames[nameIdx]];\n                    this.hammerInstance.on(name_1, this[name_1]);\n                }\n            }\n        }\n    };\n    DomEvents.prototype.unbind = function () {\n        if (this.hammerInstance) {\n            this.hammerInstance.off();\n        }\n        this.eventHandlers = {};\n    };\n    DomEvents.prototype.destroy = function () {\n        if (this.hammerInstance) {\n            this.hammerInstance.destroy();\n            delete this.hammerInstance;\n        }\n        delete this.eventHandlers;\n    };\n    DomEvents.prototype.toggleDrag = function (enable) {\n        this.toggle('pan', enable);\n    };\n    DomEvents.prototype.toggleZoom = function (enable) {\n        this.toggle('pinch', enable);\n    };\n    DomEvents.prototype.toggle = function (recognizer, enable) {\n        if (this.hammerInstance) {\n            var instanceRecognizer = this.hammerInstance.get(recognizer);\n            instanceRecognizer.set({\n                enable: enable\n            });\n        }\n    };\n    return DomEvents;\n}());\nexport { DomEvents };\n//# sourceMappingURL=dom-events.js.map"]},"metadata":{},"sourceType":"module"}