{"ast":null,"code":"import { DEFAULT_PRECISION } from '../../common/constants';\nimport { round } from '../../common';\nexport default function autoMajorUnit(min, max) {\n  var diff = round(max - min, DEFAULT_PRECISION - 1);\n\n  if (diff === 0) {\n    if (max === 0) {\n      return 0.1;\n    }\n\n    diff = Math.abs(max);\n  }\n\n  var scale = Math.pow(10, Math.floor(Math.log(diff) / Math.log(10)));\n  var relativeValue = round(diff / scale, DEFAULT_PRECISION);\n  var scaleMultiplier = 1;\n\n  if (relativeValue < 1.904762) {\n    scaleMultiplier = 0.2;\n  } else if (relativeValue < 4.761904) {\n    scaleMultiplier = 0.5;\n  } else if (relativeValue < 9.523809) {\n    scaleMultiplier = 1;\n  } else {\n    scaleMultiplier = 2;\n  }\n\n  return round(scale * scaleMultiplier, DEFAULT_PRECISION);\n}","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/utils/auto-major-unit.js"],"names":["DEFAULT_PRECISION","round","autoMajorUnit","min","max","diff","Math","abs","scale","pow","floor","log","relativeValue","scaleMultiplier"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,wBAAlC;AACA,SAASC,KAAT,QAAsB,cAAtB;AAEA,eAAe,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,MAAIC,IAAI,GAAGJ,KAAK,CAACG,GAAG,GAAGD,GAAP,EAAYH,iBAAiB,GAAG,CAAhC,CAAhB;;AAEA,MAAIK,IAAI,KAAK,CAAb,EAAgB;AACZ,QAAID,GAAG,KAAK,CAAZ,EAAe;AACX,aAAO,GAAP;AACH;;AAEDC,IAAAA,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,GAAT,CAAP;AACH;;AAED,MAAII,KAAK,GAAGF,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaH,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACK,GAAL,CAASN,IAAT,IAAiBC,IAAI,CAACK,GAAL,CAAS,EAAT,CAA5B,CAAb,CAAZ;AACA,MAAIC,aAAa,GAAGX,KAAK,CAAEI,IAAI,GAAGG,KAAT,EAAiBR,iBAAjB,CAAzB;AACA,MAAIa,eAAe,GAAG,CAAtB;;AAEA,MAAID,aAAa,GAAG,QAApB,EAA8B;AAC1BC,IAAAA,eAAe,GAAG,GAAlB;AACH,GAFD,MAEO,IAAID,aAAa,GAAG,QAApB,EAA8B;AACjCC,IAAAA,eAAe,GAAG,GAAlB;AACH,GAFM,MAEA,IAAID,aAAa,GAAG,QAApB,EAA8B;AACjCC,IAAAA,eAAe,GAAG,CAAlB;AACH,GAFM,MAEA;AACHA,IAAAA,eAAe,GAAG,CAAlB;AACH;;AAED,SAAOZ,KAAK,CAACO,KAAK,GAAGK,eAAT,EAA0Bb,iBAA1B,CAAZ;AACH","sourcesContent":["import { DEFAULT_PRECISION } from '../../common/constants';\nimport { round } from '../../common';\n\nexport default function autoMajorUnit(min, max) {\n    var diff = round(max - min, DEFAULT_PRECISION - 1);\n\n    if (diff === 0) {\n        if (max === 0) {\n            return 0.1;\n        }\n\n        diff = Math.abs(max);\n    }\n\n    var scale = Math.pow(10, Math.floor(Math.log(diff) / Math.log(10)));\n    var relativeValue = round((diff / scale), DEFAULT_PRECISION);\n    var scaleMultiplier = 1;\n\n    if (relativeValue < 1.904762) {\n        scaleMultiplier = 0.2;\n    } else if (relativeValue < 4.761904) {\n        scaleMultiplier = 0.5;\n    } else if (relativeValue < 9.523809) {\n        scaleMultiplier = 1;\n    } else {\n        scaleMultiplier = 2;\n    }\n\n    return round(scale * scaleMultiplier, DEFAULT_PRECISION);\n}"]},"metadata":{},"sourceType":"module"}