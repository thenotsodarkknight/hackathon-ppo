{"ast":null,"code":"import CategoricalChart from '../categorical-chart';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport RangeAreaPoint from './range-area-point';\nimport RangeAreaSegment from './range-area-segment';\nimport SplineRangeAreaSegment from './spline-range-area-segment';\nimport StepRangeAreaSegment from './step-range-area-segment';\nimport { Box } from '../../core';\nimport { ZERO } from '../constants';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { isNumber } from '../../common';\nimport { deepExtend, isFunction } from '../../common';\nimport { hasValue } from '../utils';\n\nvar RangeAreaChart = function (CategoricalChart) {\n  function RangeAreaChart() {\n    CategoricalChart.apply(this, arguments);\n  }\n\n  if (CategoricalChart) RangeAreaChart.__proto__ = CategoricalChart;\n  RangeAreaChart.prototype = Object.create(CategoricalChart && CategoricalChart.prototype);\n  RangeAreaChart.prototype.constructor = RangeAreaChart;\n\n  RangeAreaChart.prototype.render = function render() {\n    CategoricalChart.prototype.render.call(this);\n    this.renderSegments();\n  };\n\n  RangeAreaChart.prototype.pointType = function pointType() {\n    return RangeAreaPoint;\n  };\n\n  RangeAreaChart.prototype.createPoint = function createPoint(data, fields) {\n    var categoryIx = fields.categoryIx;\n    var category = fields.category;\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var value = data.valueFields;\n\n    if (!hasValue(value.from) && !hasValue(value.to)) {\n      if (this.seriesMissingValues(series) === ZERO) {\n        value = {\n          from: 0,\n          to: 0\n        };\n      } else {\n        return null;\n      }\n    }\n\n    var pointOptions = this.pointOptions(series, seriesIx);\n    pointOptions = this.evalPointOptions(pointOptions, value, category, categoryIx, series, seriesIx);\n    var color = data.fields.color || series.color;\n\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n\n    var point = new RangeAreaPoint(value, pointOptions);\n    point.color = color;\n    this.append(point);\n    return point;\n  };\n\n  RangeAreaChart.prototype.createSegment = function createSegment(linePoints, currentSeries, seriesIx) {\n    var style = (currentSeries.line || {}).style;\n    var segmentType;\n\n    if (style === \"smooth\") {\n      segmentType = SplineRangeAreaSegment;\n    } else if (style === \"step\") {\n      segmentType = StepRangeAreaSegment;\n    } else {\n      segmentType = RangeAreaSegment;\n    }\n\n    return new segmentType(linePoints, currentSeries, seriesIx);\n  };\n\n  RangeAreaChart.prototype.plotRange = function plotRange(point, startValue) {\n    if (!point) {\n      return [startValue, startValue];\n    }\n\n    return [point.value.from, point.value.to];\n  };\n\n  RangeAreaChart.prototype.valueSlot = function valueSlot(valueAxis, plotRange) {\n    var fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);\n    var toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);\n\n    if (fromSlot && toSlot) {\n      return {\n        from: fromSlot,\n        to: toSlot\n      };\n    }\n  };\n\n  RangeAreaChart.prototype.pointSlot = function pointSlot(categorySlot, valueSlot) {\n    var from = valueSlot.from;\n    var to = valueSlot.to;\n    var fromSlot, toSlot;\n\n    if (this.options.invertAxes) {\n      fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);\n      toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);\n    } else {\n      fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);\n      toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);\n    }\n\n    return {\n      from: fromSlot,\n      to: toSlot\n    };\n  };\n\n  RangeAreaChart.prototype.addValue = function addValue(data, fields) {\n    var valueFields = data.valueFields;\n\n    if (!isNumber(valueFields.from)) {\n      valueFields.from = valueFields.to;\n    }\n\n    if (!isNumber(valueFields.to)) {\n      valueFields.to = valueFields.from;\n    }\n\n    CategoricalChart.prototype.addValue.call(this, data, fields);\n  };\n\n  RangeAreaChart.prototype.updateRange = function updateRange(value, fields) {\n    if (value !== null && isNumber(value.from) && isNumber(value.to)) {\n      var axisName = fields.series.axis;\n      var axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || {\n        min: MAX_VALUE,\n        max: MIN_VALUE\n      };\n      var from = value.from;\n      var to = value.to;\n      axisRange.min = Math.min(axisRange.min, from, to);\n      axisRange.max = Math.max(axisRange.max, from, to);\n    }\n  };\n\n  RangeAreaChart.prototype.formatPointValue = function formatPointValue(point, format) {\n    var value = point.value;\n    return this.chartService.format.auto(format, value.from, value.to);\n  };\n\n  RangeAreaChart.prototype.animationPoints = function animationPoints() {\n    var points = this.points;\n    var result = [];\n\n    for (var idx = 0; idx < points.length; idx++) {\n      var point = points[idx];\n\n      if (point) {\n        result.push((point.fromPoint || {}).marker);\n        result.push((point.toPoint || {}).marker);\n      }\n    }\n\n    return result.concat(this._segments);\n  };\n\n  return RangeAreaChart;\n}(CategoricalChart);\n\ndeepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);\nexport default RangeAreaChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/range-area-chart/range-area-chart.js"],"names":["CategoricalChart","LineChartMixin","ClipAnimationMixin","RangeAreaPoint","RangeAreaSegment","SplineRangeAreaSegment","StepRangeAreaSegment","Box","ZERO","MIN_VALUE","MAX_VALUE","isNumber","deepExtend","isFunction","hasValue","RangeAreaChart","apply","arguments","__proto__","prototype","Object","create","constructor","render","call","renderSegments","pointType","createPoint","data","fields","categoryIx","category","series","seriesIx","value","valueFields","from","to","seriesMissingValues","pointOptions","evalPointOptions","color","point","append","createSegment","linePoints","currentSeries","style","line","segmentType","plotRange","startValue","valueSlot","valueAxis","fromSlot","getSlot","options","clip","toSlot","pointSlot","categorySlot","invertAxes","x1","y1","x2","y2","addValue","updateRange","axisName","axis","axisRange","valueAxisRanges","min","max","Math","formatPointValue","format","chartService","auto","animationPoints","points","result","idx","length","push","fromPoint","marker","toPoint","concat","_segments"],"mappings":"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","sourcesContent":["import CategoricalChart from '../categorical-chart';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport RangeAreaPoint from './range-area-point';\nimport RangeAreaSegment from './range-area-segment';\nimport SplineRangeAreaSegment from './spline-range-area-segment';\nimport StepRangeAreaSegment from './step-range-area-segment';\n\nimport { Box } from '../../core';\nimport { ZERO } from '../constants';\nimport { MIN_VALUE, MAX_VALUE } from '../../common/constants';\nimport { isNumber } from '../../common';\nimport { deepExtend, isFunction } from '../../common';\nimport { hasValue } from '../utils';\n\nvar RangeAreaChart = (function (CategoricalChart) {\n    function RangeAreaChart () {\n        CategoricalChart.apply(this, arguments);\n    }\n\n    if ( CategoricalChart ) RangeAreaChart.__proto__ = CategoricalChart;\n    RangeAreaChart.prototype = Object.create( CategoricalChart && CategoricalChart.prototype );\n    RangeAreaChart.prototype.constructor = RangeAreaChart;\n\n    RangeAreaChart.prototype.render = function render () {\n        CategoricalChart.prototype.render.call(this);\n\n        this.renderSegments();\n    };\n\n    RangeAreaChart.prototype.pointType = function pointType () {\n        return RangeAreaPoint;\n    };\n\n    RangeAreaChart.prototype.createPoint = function createPoint (data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var value = data.valueFields;\n\n        if (!hasValue(value.from) && !hasValue(value.to)) {\n            if (this.seriesMissingValues(series) === ZERO) {\n                value = {\n                    from: 0,\n                    to: 0\n                };\n            } else {\n                return null;\n            }\n        }\n\n        var pointOptions = this.pointOptions(series, seriesIx);\n        pointOptions = this.evalPointOptions(\n            pointOptions, value, category, categoryIx, series, seriesIx\n        );\n\n        var color = data.fields.color || series.color;\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var point = new RangeAreaPoint(value, pointOptions);\n        point.color = color;\n\n        this.append(point);\n\n        return point;\n    };\n\n    RangeAreaChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {\n        var style = (currentSeries.line || {}).style;\n        var segmentType;\n        if (style === \"smooth\") {\n            segmentType = SplineRangeAreaSegment;\n        } else if (style === \"step\") {\n            segmentType = StepRangeAreaSegment;\n        } else {\n            segmentType = RangeAreaSegment;\n        }\n\n        return new segmentType(linePoints, currentSeries, seriesIx);\n    };\n\n    RangeAreaChart.prototype.plotRange = function plotRange (point, startValue) {\n        if (!point) {\n            return [ startValue, startValue ];\n        }\n\n        return [ point.value.from, point.value.to ];\n    };\n\n    RangeAreaChart.prototype.valueSlot = function valueSlot (valueAxis, plotRange) {\n        var fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);\n        var toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);\n        if (fromSlot && toSlot) {\n            return {\n                from: fromSlot,\n                to: toSlot\n            };\n        }\n    };\n\n    RangeAreaChart.prototype.pointSlot = function pointSlot (categorySlot, valueSlot) {\n        var from = valueSlot.from;\n        var to = valueSlot.to;\n        var fromSlot, toSlot;\n\n        if (this.options.invertAxes) {\n            fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);\n            toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);\n        } else {\n            fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);\n            toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);\n        }\n\n        return {\n            from: fromSlot,\n            to: toSlot\n        };\n    };\n\n    RangeAreaChart.prototype.addValue = function addValue (data, fields) {\n        var valueFields = data.valueFields;\n        if (!isNumber(valueFields.from)) {\n            valueFields.from = valueFields.to;\n        }\n\n        if (!isNumber(valueFields.to)) {\n            valueFields.to = valueFields.from;\n        }\n\n        CategoricalChart.prototype.addValue.call(this, data, fields);\n    };\n\n    RangeAreaChart.prototype.updateRange = function updateRange (value, fields) {\n        if (value !== null && isNumber(value.from) && isNumber(value.to)) {\n            var axisName = fields.series.axis;\n            var axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };\n            var from = value.from;\n            var to = value.to;\n\n            axisRange.min = Math.min(axisRange.min, from, to);\n            axisRange.max = Math.max(axisRange.max, from, to);\n        }\n    };\n\n    RangeAreaChart.prototype.formatPointValue = function formatPointValue (point, format) {\n        var value = point.value;\n\n        return this.chartService.format.auto(format, value.from, value.to);\n    };\n\n    RangeAreaChart.prototype.animationPoints = function animationPoints () {\n        var points = this.points;\n        var result = [];\n        for (var idx = 0; idx < points.length; idx++) {\n            var point = points[idx];\n            if (point) {\n                result.push((point.fromPoint || {}).marker);\n                result.push((point.toPoint || {}).marker);\n            }\n        }\n\n        return result.concat(this._segments);\n    };\n\n    return RangeAreaChart;\n}(CategoricalChart));\n\ndeepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);\n\nexport default RangeAreaChart;\n"]},"metadata":{},"sourceType":"module"}