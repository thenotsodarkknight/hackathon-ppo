{"ast":null,"code":"import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport ScatterChart from '../scatter-charts/scatter-chart';\nimport ScatterLineChart from '../scatter-charts/scatter-line-chart';\nimport BubbleChart from '../bubble-chart/bubble-chart';\nimport SeriesBinder from '../series-binder';\nimport { NumericAxis, LogarithmicAxis, DateValueAxis, Point } from '../../core';\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport equalsIgnoreCase from '../utils/equals-ignore-case';\nimport singleItemOrArray from '../utils/single-item-or-array';\nimport { SCATTER, SCATTER_LINE, BUBBLE, LOGARITHMIC } from '../constants';\nimport { DATE } from '../../common/constants';\nimport { deepExtend, eventElement, grep, inArray, setDefaultOptions } from '../../common';\n\nvar XYPlotArea = function (PlotAreaBase) {\n  function XYPlotArea() {\n    PlotAreaBase.apply(this, arguments);\n  }\n\n  if (PlotAreaBase) XYPlotArea.__proto__ = PlotAreaBase;\n  XYPlotArea.prototype = Object.create(PlotAreaBase && PlotAreaBase.prototype);\n  XYPlotArea.prototype.constructor = XYPlotArea;\n\n  XYPlotArea.prototype.initFields = function initFields() {\n    this.namedXAxes = {};\n    this.namedYAxes = {};\n    this.xAxisRangeTracker = new AxisGroupRangeTracker();\n    this.yAxisRangeTracker = new AxisGroupRangeTracker();\n  };\n\n  XYPlotArea.prototype.render = function render(panes) {\n    var this$1 = this;\n    if (panes === void 0) panes = this.panes;\n    var seriesByPane = this.groupSeriesByPane();\n\n    for (var i = 0; i < panes.length; i++) {\n      var pane = panes[i];\n      var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n      this$1.addToLegend(paneSeries);\n      var filteredSeries = this$1.filterVisibleSeries(paneSeries);\n\n      if (!filteredSeries) {\n        continue;\n      }\n\n      this$1.createScatterChart(filterSeriesByType(filteredSeries, SCATTER), pane);\n      this$1.createScatterLineChart(filterSeriesByType(filteredSeries, SCATTER_LINE), pane);\n      this$1.createBubbleChart(filterSeriesByType(filteredSeries, BUBBLE), pane);\n    }\n\n    this.createAxes(panes);\n  };\n\n  XYPlotArea.prototype.appendChart = function appendChart(chart, pane) {\n    this.xAxisRangeTracker.update(chart.xAxisRanges);\n    this.yAxisRangeTracker.update(chart.yAxisRanges);\n    PlotAreaBase.prototype.appendChart.call(this, chart, pane);\n  };\n\n  XYPlotArea.prototype.removeAxis = function removeAxis(axis) {\n    var axisName = axis.options.name;\n    PlotAreaBase.prototype.removeAxis.call(this, axis);\n\n    if (axis.options.vertical) {\n      this.yAxisRangeTracker.reset(axisName);\n      delete this.namedYAxes[axisName];\n    } else {\n      this.xAxisRangeTracker.reset(axisName);\n      delete this.namedXAxes[axisName];\n    }\n\n    if (axis === this.axisX) {\n      delete this.axisX;\n    }\n\n    if (axis === this.axisY) {\n      delete this.axisY;\n    }\n  }; // TODO: Refactor, optionally use series.pane option\n\n\n  XYPlotArea.prototype.seriesPaneName = function seriesPaneName(series) {\n    var options = this.options;\n    var xAxisName = series.xAxis;\n    var xAxisOptions = [].concat(options.xAxis);\n    var xAxis = grep(xAxisOptions, function (a) {\n      return a.name === xAxisName;\n    })[0];\n    var yAxisName = series.yAxis;\n    var yAxisOptions = [].concat(options.yAxis);\n    var yAxis = grep(yAxisOptions, function (a) {\n      return a.name === yAxisName;\n    })[0];\n    var panes = options.panes || [{}];\n    var defaultPaneName = panes[0].name || \"default\";\n    var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;\n    return paneName;\n  };\n\n  XYPlotArea.prototype.createScatterChart = function createScatterChart(series, pane) {\n    if (series.length > 0) {\n      this.appendChart(new ScatterChart(this, {\n        series: series,\n        clip: pane.options.clip\n      }), pane);\n    }\n  };\n\n  XYPlotArea.prototype.createScatterLineChart = function createScatterLineChart(series, pane) {\n    if (series.length > 0) {\n      this.appendChart(new ScatterLineChart(this, {\n        series: series,\n        clip: pane.options.clip\n      }), pane);\n    }\n  };\n\n  XYPlotArea.prototype.createBubbleChart = function createBubbleChart(series, pane) {\n    if (series.length > 0) {\n      this.appendChart(new BubbleChart(this, {\n        series: series,\n        clip: pane.options.clip\n      }), pane);\n    }\n  };\n\n  XYPlotArea.prototype.createXYAxis = function createXYAxis(options, vertical, axisIndex) {\n    var axisName = options.name;\n    var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;\n    var tracker = vertical ? this.yAxisRangeTracker : this.xAxisRangeTracker;\n    var axisOptions = deepExtend({\n      reverse: !vertical && this.chartService.rtl\n    }, options, {\n      vertical: vertical\n    });\n    var isLog = equalsIgnoreCase(axisOptions.type, LOGARITHMIC);\n    var defaultRange = tracker.query();\n    var defaultAxisRange = isLog ? {\n      min: 0.1,\n      max: 1\n    } : {\n      min: 0,\n      max: 1\n    };\n    var range = tracker.query(axisName) || defaultRange || defaultAxisRange;\n    var typeSamples = [axisOptions.min, axisOptions.max];\n    var series = this.series;\n\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var seriesAxisName = currentSeries[vertical ? \"yAxis\" : \"xAxis\"];\n\n      if (seriesAxisName === axisOptions.name || axisIndex === 0 && !seriesAxisName) {\n        var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;\n        typeSamples.push(firstPointValue[vertical ? \"y\" : \"x\"]);\n        break;\n      }\n    }\n\n    if (axisIndex === 0 && defaultRange) {\n      range.min = Math.min(range.min, defaultRange.min);\n      range.max = Math.max(range.max, defaultRange.max);\n    }\n\n    var inferredDate;\n\n    for (var i = 0; i < typeSamples.length; i++) {\n      if (typeSamples[i] instanceof Date) {\n        inferredDate = true;\n        break;\n      }\n    }\n\n    var axisType;\n\n    if (equalsIgnoreCase(axisOptions.type, DATE) || !axisOptions.type && inferredDate) {\n      axisType = DateValueAxis;\n    } else if (isLog) {\n      axisType = LogarithmicAxis;\n    } else {\n      axisType = NumericAxis;\n    }\n\n    var axis = new axisType(range.min, range.max, axisOptions, this.chartService);\n    axis.axisIndex = axisIndex;\n\n    if (axisName) {\n      if (namedAxes[axisName]) {\n        throw new Error((vertical ? \"Y\" : \"X\") + \" axis with name \" + axisName + \" is already defined\");\n      }\n\n      namedAxes[axisName] = axis;\n    }\n\n    this.appendAxis(axis);\n    return axis;\n  };\n\n  XYPlotArea.prototype.createAxes = function createAxes(panes) {\n    var this$1 = this;\n    var options = this.options;\n    var xAxesOptions = [].concat(options.xAxis);\n    var xAxes = [];\n    var yAxesOptions = [].concat(options.yAxis);\n    var yAxes = [];\n\n    for (var idx = 0; idx < xAxesOptions.length; idx++) {\n      var axisPane = this$1.findPane(xAxesOptions[idx].pane);\n\n      if (inArray(axisPane, panes)) {\n        xAxes.push(this$1.createXYAxis(xAxesOptions[idx], false, idx));\n      }\n    }\n\n    for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {\n      var axisPane$1 = this$1.findPane(yAxesOptions[idx$1].pane);\n\n      if (inArray(axisPane$1, panes)) {\n        yAxes.push(this$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));\n      }\n    }\n\n    this.axisX = this.axisX || xAxes[0];\n    this.axisY = this.axisY || yAxes[0];\n  };\n\n  XYPlotArea.prototype._dispatchEvent = function _dispatchEvent(chart, e, eventType) {\n    var coords = chart._eventCoordinates(e);\n\n    var point = new Point(coords.x, coords.y);\n    var allAxes = this.axes;\n    var length = allAxes.length;\n    var xValues = [];\n    var yValues = [];\n\n    for (var i = 0; i < length; i++) {\n      var axis = allAxes[i];\n      var values = axis.options.vertical ? yValues : xValues;\n      var currentValue = axis.getValue(point);\n\n      if (currentValue !== null) {\n        values.push(currentValue);\n      }\n    }\n\n    if (xValues.length > 0 && yValues.length > 0) {\n      chart.trigger(eventType, {\n        element: eventElement(e),\n        originalEvent: e,\n        x: singleItemOrArray(xValues),\n        y: singleItemOrArray(yValues)\n      });\n    }\n  };\n\n  XYPlotArea.prototype.updateAxisOptions = function updateAxisOptions$1(axis, options) {\n    var vertical = axis.options.vertical;\n    var axes = this.groupAxes(this.panes);\n    var index = (vertical ? axes.y : axes.x).indexOf(axis);\n    updateAxisOptions(this.options, index, vertical, options);\n    updateAxisOptions(this.originalOptions, index, vertical, options);\n  };\n\n  return XYPlotArea;\n}(PlotAreaBase);\n\nfunction updateAxisOptions(targetOptions, axisIndex, vertical, options) {\n  var axisOptions = [].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis)[axisIndex];\n  deepExtend(axisOptions, options);\n}\n\nsetDefaultOptions(XYPlotArea, {\n  xAxis: {},\n  yAxis: {}\n});\ndeepExtend(XYPlotArea.prototype, PlotAreaEventsMixin);\nexport default XYPlotArea;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/plotarea/xy-plotarea.js"],"names":["PlotAreaBase","AxisGroupRangeTracker","PlotAreaEventsMixin","ScatterChart","ScatterLineChart","BubbleChart","SeriesBinder","NumericAxis","LogarithmicAxis","DateValueAxis","Point","filterSeriesByType","equalsIgnoreCase","singleItemOrArray","SCATTER","SCATTER_LINE","BUBBLE","LOGARITHMIC","DATE","deepExtend","eventElement","grep","inArray","setDefaultOptions","XYPlotArea","apply","arguments","__proto__","prototype","Object","create","constructor","initFields","namedXAxes","namedYAxes","xAxisRangeTracker","yAxisRangeTracker","render","panes","this$1","seriesByPane","groupSeriesByPane","i","length","pane","paneSeries","options","name","addToLegend","filteredSeries","filterVisibleSeries","createScatterChart","createScatterLineChart","createBubbleChart","createAxes","appendChart","chart","update","xAxisRanges","yAxisRanges","call","removeAxis","axis","axisName","vertical","reset","axisX","axisY","seriesPaneName","series","xAxisName","xAxis","xAxisOptions","concat","a","yAxisName","yAxis","yAxisOptions","defaultPaneName","paneName","clip","createXYAxis","axisIndex","namedAxes","tracker","axisOptions","reverse","chartService","rtl","isLog","type","defaultRange","query","defaultAxisRange","min","max","range","typeSamples","seriesIx","currentSeries","seriesAxisName","firstPointValue","current","bindPoint","valueFields","push","Math","inferredDate","Date","axisType","Error","appendAxis","xAxesOptions","xAxes","yAxesOptions","yAxes","idx","axisPane","findPane","idx$1","axisPane$1","_dispatchEvent","e","eventType","coords","_eventCoordinates","point","x","y","allAxes","axes","xValues","yValues","values","currentValue","getValue","trigger","element","originalEvent","updateAxisOptions","updateAxisOptions$1","groupAxes","index","indexOf","originalOptions","targetOptions"],"mappings":"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","sourcesContent":["import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport ScatterChart from '../scatter-charts/scatter-chart';\nimport ScatterLineChart from '../scatter-charts/scatter-line-chart';\nimport BubbleChart from '../bubble-chart/bubble-chart';\nimport SeriesBinder from '../series-binder';\n\nimport { NumericAxis, LogarithmicAxis, DateValueAxis, Point } from '../../core';\n\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport equalsIgnoreCase from '../utils/equals-ignore-case';\nimport singleItemOrArray from '../utils/single-item-or-array';\n\nimport { SCATTER, SCATTER_LINE, BUBBLE, LOGARITHMIC } from '../constants';\n\nimport { DATE } from '../../common/constants';\nimport { deepExtend, eventElement, grep, inArray, setDefaultOptions } from '../../common';\n\nvar XYPlotArea = (function (PlotAreaBase) {\n    function XYPlotArea () {\n        PlotAreaBase.apply(this, arguments);\n    }\n\n    if ( PlotAreaBase ) XYPlotArea.__proto__ = PlotAreaBase;\n    XYPlotArea.prototype = Object.create( PlotAreaBase && PlotAreaBase.prototype );\n    XYPlotArea.prototype.constructor = XYPlotArea;\n\n    XYPlotArea.prototype.initFields = function initFields () {\n        this.namedXAxes = {};\n        this.namedYAxes = {};\n\n        this.xAxisRangeTracker = new AxisGroupRangeTracker();\n        this.yAxisRangeTracker = new AxisGroupRangeTracker();\n    };\n\n    XYPlotArea.prototype.render = function render (panes) {\n        var this$1 = this;\n        if ( panes === void 0 ) panes = this.panes;\n\n        var seriesByPane = this.groupSeriesByPane();\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n            this$1.addToLegend(paneSeries);\n            var filteredSeries = this$1.filterVisibleSeries(paneSeries);\n\n            if (!filteredSeries) {\n                continue;\n            }\n\n            this$1.createScatterChart(\n                filterSeriesByType(filteredSeries, SCATTER),\n                pane\n            );\n\n            this$1.createScatterLineChart(\n                filterSeriesByType(filteredSeries, SCATTER_LINE),\n                pane\n            );\n\n            this$1.createBubbleChart(\n                filterSeriesByType(filteredSeries, BUBBLE),\n                pane\n            );\n        }\n\n        this.createAxes(panes);\n    };\n\n    XYPlotArea.prototype.appendChart = function appendChart (chart, pane) {\n        this.xAxisRangeTracker.update(chart.xAxisRanges);\n        this.yAxisRangeTracker.update(chart.yAxisRanges);\n\n        PlotAreaBase.prototype.appendChart.call(this, chart, pane);\n    };\n\n    XYPlotArea.prototype.removeAxis = function removeAxis (axis) {\n        var axisName = axis.options.name;\n\n        PlotAreaBase.prototype.removeAxis.call(this, axis);\n\n        if (axis.options.vertical) {\n            this.yAxisRangeTracker.reset(axisName);\n            delete this.namedYAxes[axisName];\n        } else {\n            this.xAxisRangeTracker.reset(axisName);\n            delete this.namedXAxes[axisName];\n        }\n\n        if (axis === this.axisX) {\n            delete this.axisX;\n        }\n\n        if (axis === this.axisY) {\n            delete this.axisY;\n        }\n    };\n\n    // TODO: Refactor, optionally use series.pane option\n    XYPlotArea.prototype.seriesPaneName = function seriesPaneName (series) {\n        var options = this.options;\n        var xAxisName = series.xAxis;\n        var xAxisOptions = [].concat(options.xAxis);\n        var xAxis = grep(xAxisOptions, function(a) { return a.name === xAxisName; })[0];\n        var yAxisName = series.yAxis;\n        var yAxisOptions = [].concat(options.yAxis);\n        var yAxis = grep(yAxisOptions, function(a) { return a.name === yAxisName; })[0];\n        var panes = options.panes || [ {} ];\n        var defaultPaneName = panes[0].name || \"default\";\n        var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;\n\n        return paneName;\n    };\n\n    XYPlotArea.prototype.createScatterChart = function createScatterChart (series, pane) {\n        if (series.length > 0) {\n            this.appendChart(\n                new ScatterChart(this, { series: series, clip: pane.options.clip }),\n                pane\n            );\n        }\n    };\n\n    XYPlotArea.prototype.createScatterLineChart = function createScatterLineChart (series, pane) {\n        if (series.length > 0) {\n            this.appendChart(\n                new ScatterLineChart(this, { series: series, clip: pane.options.clip }),\n                pane\n            );\n        }\n    };\n\n    XYPlotArea.prototype.createBubbleChart = function createBubbleChart (series, pane) {\n        if (series.length > 0) {\n            this.appendChart(\n                new BubbleChart(this, { series: series, clip: pane.options.clip }),\n                pane\n            );\n        }\n    };\n\n    XYPlotArea.prototype.createXYAxis = function createXYAxis (options, vertical, axisIndex) {\n        var axisName = options.name;\n        var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;\n        var tracker = vertical ? this.yAxisRangeTracker : this.xAxisRangeTracker;\n        var axisOptions = deepExtend({ reverse: !vertical && this.chartService.rtl }, options, { vertical: vertical });\n        var isLog = equalsIgnoreCase(axisOptions.type, LOGARITHMIC);\n        var defaultRange = tracker.query();\n        var defaultAxisRange = isLog ? { min: 0.1, max: 1 } : { min: 0, max: 1 };\n        var range = tracker.query(axisName) || defaultRange || defaultAxisRange;\n        var typeSamples = [ axisOptions.min, axisOptions.max ];\n        var series = this.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var seriesAxisName = currentSeries[vertical ? \"yAxis\" : \"xAxis\"];\n            if ((seriesAxisName === axisOptions.name) || (axisIndex === 0 && !seriesAxisName)) {\n                var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;\n                typeSamples.push(firstPointValue[vertical ? \"y\" : \"x\"]);\n\n                break;\n            }\n        }\n\n        if (axisIndex === 0 && defaultRange) {\n            range.min = Math.min(range.min, defaultRange.min);\n            range.max = Math.max(range.max, defaultRange.max);\n        }\n\n        var inferredDate;\n\n        for (var i = 0; i < typeSamples.length; i++) {\n            if (typeSamples[i] instanceof Date) {\n                inferredDate = true;\n                break;\n            }\n        }\n\n        var axisType;\n        if (equalsIgnoreCase(axisOptions.type, DATE) || (!axisOptions.type && inferredDate)) {\n            axisType = DateValueAxis;\n        } else if (isLog) {\n            axisType = LogarithmicAxis;\n        } else {\n            axisType = NumericAxis;\n        }\n\n        var axis = new axisType(range.min, range.max, axisOptions, this.chartService);\n        axis.axisIndex = axisIndex;\n\n        if (axisName) {\n            if (namedAxes[axisName]) {\n                throw new Error(((vertical ? \"Y\" : \"X\") + \" axis with name \" + axisName + \" is already defined\"));\n            }\n            namedAxes[axisName] = axis;\n        }\n\n        this.appendAxis(axis);\n\n        return axis;\n    };\n\n    XYPlotArea.prototype.createAxes = function createAxes (panes) {\n        var this$1 = this;\n\n        var options = this.options;\n        var xAxesOptions = [].concat(options.xAxis);\n        var xAxes = [];\n        var yAxesOptions = [].concat(options.yAxis);\n        var yAxes = [];\n\n        for (var idx = 0; idx < xAxesOptions.length; idx++) {\n            var axisPane = this$1.findPane(xAxesOptions[idx].pane);\n            if (inArray(axisPane, panes)) {\n                xAxes.push(this$1.createXYAxis(xAxesOptions[idx], false, idx));\n            }\n        }\n\n        for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {\n            var axisPane$1 = this$1.findPane(yAxesOptions[idx$1].pane);\n            if (inArray(axisPane$1, panes)) {\n                yAxes.push(this$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));\n            }\n        }\n\n        this.axisX = this.axisX || xAxes[0];\n        this.axisY = this.axisY || yAxes[0];\n    };\n\n    XYPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var allAxes = this.axes;\n        var length = allAxes.length;\n        var xValues = [];\n        var yValues = [];\n\n        for (var i = 0; i < length; i++) {\n            var axis = allAxes[i];\n            var values = axis.options.vertical ? yValues : xValues;\n            var currentValue = axis.getValue(point);\n            if (currentValue !== null) {\n                values.push(currentValue);\n            }\n        }\n\n        if (xValues.length > 0 && yValues.length > 0) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                originalEvent: e,\n                x: singleItemOrArray(xValues),\n                y: singleItemOrArray(yValues)\n            });\n        }\n    };\n\n    XYPlotArea.prototype.updateAxisOptions = function updateAxisOptions$1 (axis, options) {\n        var vertical = axis.options.vertical;\n        var axes = this.groupAxes(this.panes);\n        var index = (vertical ? axes.y : axes.x).indexOf(axis);\n\n        updateAxisOptions(this.options, index, vertical, options);\n        updateAxisOptions(this.originalOptions, index, vertical, options);\n    };\n\n    return XYPlotArea;\n}(PlotAreaBase));\n\nfunction updateAxisOptions(targetOptions, axisIndex, vertical, options) {\n    var axisOptions = ([].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis))[axisIndex];\n    deepExtend(axisOptions, options);\n}\n\nsetDefaultOptions(XYPlotArea, {\n    xAxis: {},\n    yAxis: {}\n});\n\ndeepExtend(XYPlotArea.prototype, PlotAreaEventsMixin);\n\nexport default XYPlotArea;"]},"metadata":{},"sourceType":"module"}