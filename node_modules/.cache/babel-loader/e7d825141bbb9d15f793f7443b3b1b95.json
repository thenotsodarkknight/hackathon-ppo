{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement } from '../../core';\nimport { defined, isFunction, setDefaultOptions } from '../../common';\n\nvar LineSegment = function (ChartElement) {\n  function LineSegment(linePoints, series, seriesIx) {\n    ChartElement.call(this);\n    this.linePoints = linePoints;\n    this.series = series;\n    this.seriesIx = seriesIx;\n  }\n\n  if (ChartElement) LineSegment.__proto__ = ChartElement;\n  LineSegment.prototype = Object.create(ChartElement && ChartElement.prototype);\n  LineSegment.prototype.constructor = LineSegment;\n\n  LineSegment.prototype.points = function points() {\n    return this.toGeometryPoints(this.linePoints);\n  };\n\n  LineSegment.prototype.toGeometryPoints = function toGeometryPoints(points) {\n    var result = [];\n\n    for (var i = 0, length = points.length; i < length; i++) {\n      if (points[i] && points[i].visible !== false) {\n        result.push(points[i]._childBox.toRect().center());\n      }\n    }\n\n    return result;\n  };\n\n  LineSegment.prototype.createVisual = function createVisual() {\n    var this$1 = this;\n    var customVisual = this.series.visual;\n\n    if (customVisual) {\n      this.visual = customVisual({\n        points: this.toGeometryPoints(this.linePoints),\n        series: this.series,\n        sender: this.getSender(),\n        createVisual: function () {\n          this$1.segmentVisual();\n          return this$1.visual;\n        }\n      });\n\n      if (this.visual && !defined(this.visual.options.zIndex)) {\n        this.visual.options.zIndex = this.series.zIndex;\n      }\n    } else {\n      this.segmentVisual();\n    }\n  };\n\n  LineSegment.prototype.segmentVisual = function segmentVisual() {\n    var ref = this;\n    var options = ref.options;\n    var series = ref.series;\n    var color = series.color;\n    var defaults = series._defaults;\n\n    if (isFunction(color) && defaults) {\n      color = defaults.color;\n    }\n\n    var line = draw.Path.fromPoints(this.points(), {\n      stroke: {\n        color: color,\n        width: series.width,\n        opacity: series.opacity,\n        dashType: series.dashType\n      },\n      zIndex: series.zIndex\n    });\n\n    if (options.closed) {\n      line.close();\n    }\n\n    this.visual = line;\n  };\n\n  LineSegment.prototype.aliasFor = function aliasFor(e, coords) {\n    return this.parent.getNearestPoint(coords.x, coords.y, this.seriesIx);\n  };\n\n  return LineSegment;\n}(ChartElement);\n\nsetDefaultOptions(LineSegment, {\n  closed: false\n});\nexport default LineSegment;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/line-chart/line-segment.js"],"names":["drawing","draw","ChartElement","defined","isFunction","setDefaultOptions","LineSegment","linePoints","series","seriesIx","call","__proto__","prototype","Object","create","constructor","points","toGeometryPoints","result","i","length","visible","push","_childBox","toRect","center","createVisual","this$1","customVisual","visual","sender","getSender","segmentVisual","options","zIndex","ref","color","defaults","_defaults","line","Path","fromPoints","stroke","width","opacity","dashType","closed","close","aliasFor","e","coords","parent","getNearestPoint","x","y"],"mappings":"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","sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport { ChartElement } from '../../core';\n\nimport { defined, isFunction, setDefaultOptions } from '../../common';\n\nvar LineSegment = (function (ChartElement) {\n    function LineSegment(linePoints, series, seriesIx) {\n        ChartElement.call(this);\n\n        this.linePoints = linePoints;\n        this.series = series;\n        this.seriesIx = seriesIx;\n    }\n\n    if ( ChartElement ) LineSegment.__proto__ = ChartElement;\n    LineSegment.prototype = Object.create( ChartElement && ChartElement.prototype );\n    LineSegment.prototype.constructor = LineSegment;\n\n    LineSegment.prototype.points = function points () {\n        return this.toGeometryPoints(this.linePoints);\n    };\n\n    LineSegment.prototype.toGeometryPoints = function toGeometryPoints (points) {\n        var result = [];\n        for (var i = 0, length = points.length; i < length; i++) {\n            if (points[i] && points[i].visible !== false) {\n                result.push(points[i]._childBox.toRect().center());\n            }\n        }\n\n        return result;\n    };\n\n    LineSegment.prototype.createVisual = function createVisual () {\n        var this$1 = this;\n\n        var customVisual = this.series.visual;\n        if (customVisual) {\n            this.visual = customVisual({\n                points: this.toGeometryPoints(this.linePoints),\n                series: this.series,\n                sender: this.getSender(),\n                createVisual: function () {\n                    this$1.segmentVisual();\n\n                    return this$1.visual;\n                }\n            });\n            if (this.visual && !defined(this.visual.options.zIndex)) {\n                this.visual.options.zIndex = this.series.zIndex;\n            }\n        } else {\n            this.segmentVisual();\n        }\n    };\n\n    LineSegment.prototype.segmentVisual = function segmentVisual () {\n        var ref = this;\n        var options = ref.options;\n        var series = ref.series;\n        var color = series.color;\n        var defaults = series._defaults;\n\n        if (isFunction(color) && defaults) {\n            color = defaults.color;\n        }\n\n        var line = draw.Path.fromPoints(this.points(), {\n            stroke: {\n                color: color,\n                width: series.width,\n                opacity: series.opacity,\n                dashType: series.dashType\n            },\n            zIndex: series.zIndex\n        });\n\n        if (options.closed) {\n            line.close();\n        }\n\n        this.visual = line;\n    };\n\n    LineSegment.prototype.aliasFor = function aliasFor (e, coords) {\n        return this.parent.getNearestPoint(coords.x, coords.y, this.seriesIx);\n    };\n\n    return LineSegment;\n}(ChartElement));\n\nsetDefaultOptions(LineSegment, {\n    closed: false\n});\n\nexport default LineSegment;"]},"metadata":{},"sourceType":"module"}