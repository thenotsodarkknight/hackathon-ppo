{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport Bar from './bar';\nimport CategoricalChart from '../categorical-chart';\nimport ClusterLayout from '../layout/cluster-layout';\nimport StackWrap from '../layout/stack-wrap';\nimport { BAR, OUTSIDE_END, INSIDE_END } from '../constants';\nimport anyHasZIndex from '../utils/any-has-z-index';\nimport { STRING, X, Y } from '../../common/constants';\nimport { defined, isFunction, setDefaultOptions } from '../../common';\n\nvar BarChart = function (CategoricalChart) {\n  function BarChart() {\n    CategoricalChart.apply(this, arguments);\n  }\n\n  if (CategoricalChart) BarChart.__proto__ = CategoricalChart;\n  BarChart.prototype = Object.create(CategoricalChart && CategoricalChart.prototype);\n  BarChart.prototype.constructor = BarChart;\n\n  BarChart.prototype.render = function render() {\n    CategoricalChart.prototype.render.call(this);\n    this.updateStackRange();\n  };\n\n  BarChart.prototype.pointType = function pointType() {\n    return Bar;\n  };\n\n  BarChart.prototype.clusterType = function clusterType() {\n    return ClusterLayout;\n  };\n\n  BarChart.prototype.stackType = function stackType() {\n    return StackWrap;\n  };\n\n  BarChart.prototype.stackLimits = function stackLimits(axisName, stackName) {\n    var limits = CategoricalChart.prototype.stackLimits.call(this, axisName, stackName);\n    return limits;\n  };\n\n  BarChart.prototype.createPoint = function createPoint(data, fields) {\n    var categoryIx = fields.categoryIx;\n    var category = fields.category;\n    var series = fields.series;\n    var seriesIx = fields.seriesIx;\n    var ref = this;\n    var options = ref.options;\n    var children = ref.children;\n    var isStacked = options.isStacked;\n    var value = this.pointValue(data);\n    var pointOptions = this.pointOptions(series, seriesIx);\n    var labelOptions = pointOptions.labels;\n\n    if (isStacked) {\n      if (labelOptions.position === OUTSIDE_END) {\n        labelOptions.position = INSIDE_END;\n      }\n    }\n\n    pointOptions.isStacked = isStacked;\n    var color = data.fields.color || series.color;\n\n    if (value < 0 && pointOptions.negativeColor) {\n      color = pointOptions.negativeColor;\n    }\n\n    pointOptions = this.evalPointOptions(pointOptions, value, category, categoryIx, series, seriesIx);\n\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n\n    var pointType = this.pointType();\n    var point = new pointType(value, pointOptions);\n    point.color = color;\n    var cluster = children[categoryIx];\n\n    if (!cluster) {\n      var clusterType = this.clusterType();\n      cluster = new clusterType({\n        vertical: options.invertAxes,\n        gap: options.gap,\n        spacing: options.spacing,\n        rtl: !options.invertAxes && (this.chartService || {}).rtl\n      });\n      this.append(cluster);\n    }\n\n    if (isStacked) {\n      var stackWrap = this.getStackWrap(series, cluster);\n      stackWrap.append(point);\n    } else {\n      cluster.append(point);\n    }\n\n    return point;\n  };\n\n  BarChart.prototype.getStackWrap = function getStackWrap(series, cluster) {\n    var stack = series.stack;\n    var stackGroup = stack ? stack.group || stack : stack;\n    var wraps = cluster.children;\n    var stackWrap;\n\n    if (typeof stackGroup === STRING) {\n      for (var i = 0; i < wraps.length; i++) {\n        if (wraps[i]._stackGroup === stackGroup) {\n          stackWrap = wraps[i];\n          break;\n        }\n      }\n    } else {\n      stackWrap = wraps[0];\n    }\n\n    if (!stackWrap) {\n      var stackType = this.stackType();\n      stackWrap = new stackType({\n        vertical: !this.options.invertAxes\n      });\n      stackWrap._stackGroup = stackGroup;\n      cluster.append(stackWrap);\n    }\n\n    return stackWrap;\n  };\n\n  BarChart.prototype.categorySlot = function categorySlot(categoryAxis, categoryIx, valueAxis) {\n    var options = this.options;\n    var categorySlot = categoryAxis.getSlot(categoryIx);\n    var startValue = valueAxis.startValue();\n\n    if (options.isStacked) {\n      var zeroSlot = valueAxis.getSlot(startValue, startValue, true);\n      var stackAxis = options.invertAxes ? X : Y;\n      categorySlot[stackAxis + 1] = categorySlot[stackAxis + 2] = zeroSlot[stackAxis + 1];\n    }\n\n    return categorySlot;\n  };\n\n  BarChart.prototype.reflowCategories = function reflowCategories(categorySlots) {\n    var children = this.children;\n    var childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; i++) {\n      children[i].reflow(categorySlots[i]);\n    }\n  };\n\n  BarChart.prototype.createAnimation = function createAnimation() {\n    this._setAnimationOptions();\n\n    CategoricalChart.prototype.createAnimation.call(this);\n\n    if (anyHasZIndex(this.options.series)) {\n      this._setChildrenAnimation();\n    }\n  };\n\n  BarChart.prototype._setChildrenAnimation = function _setChildrenAnimation() {\n    var this$1 = this;\n    var points = this.points;\n\n    for (var idx = 0; idx < points.length; idx++) {\n      var point = points[idx];\n      var pointVisual = point.visual;\n\n      if (pointVisual && defined(pointVisual.options.zIndex)) {\n        point.options.animation = this$1.options.animation;\n        point.createAnimation();\n      }\n    }\n  };\n\n  BarChart.prototype._setAnimationOptions = function _setAnimationOptions() {\n    var options = this.options;\n    var animation = options.animation || {};\n    var origin;\n\n    if (options.isStacked) {\n      var valueAxis = this.seriesValueAxis(options.series[0]);\n      origin = valueAxis.getSlot(valueAxis.startValue());\n    } else {\n      origin = this.categoryAxis.getSlot(0);\n    }\n\n    animation.origin = new geom.Point(origin.x1, origin.y1);\n    animation.vertical = !options.invertAxes;\n  };\n\n  return BarChart;\n}(CategoricalChart);\n\nsetDefaultOptions(BarChart, {\n  animation: {\n    type: BAR\n  }\n});\nexport default BarChart;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/bar-chart/bar-chart.js"],"names":["geometry","geom","Bar","CategoricalChart","ClusterLayout","StackWrap","BAR","OUTSIDE_END","INSIDE_END","anyHasZIndex","STRING","X","Y","defined","isFunction","setDefaultOptions","BarChart","apply","arguments","__proto__","prototype","Object","create","constructor","render","call","updateStackRange","pointType","clusterType","stackType","stackLimits","axisName","stackName","limits","createPoint","data","fields","categoryIx","category","series","seriesIx","ref","options","children","isStacked","value","pointValue","pointOptions","labelOptions","labels","position","color","negativeColor","evalPointOptions","point","cluster","vertical","invertAxes","gap","spacing","rtl","chartService","append","stackWrap","getStackWrap","stack","stackGroup","group","wraps","i","length","_stackGroup","categorySlot","categoryAxis","valueAxis","getSlot","startValue","zeroSlot","stackAxis","reflowCategories","categorySlots","childrenLength","reflow","createAnimation","_setAnimationOptions","_setChildrenAnimation","this$1","points","idx","pointVisual","visual","zIndex","animation","origin","seriesValueAxis","Point","x1","y1","type"],"mappings":"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","sourcesContent":["import { geometry as geom } from '@progress/kendo-drawing';\n\nimport Bar from './bar';\n\nimport CategoricalChart from '../categorical-chart';\nimport ClusterLayout from '../layout/cluster-layout';\nimport StackWrap from '../layout/stack-wrap';\nimport { BAR, OUTSIDE_END, INSIDE_END } from '../constants';\n\nimport anyHasZIndex from '../utils/any-has-z-index';\n\nimport { STRING, X, Y } from '../../common/constants';\nimport { defined, isFunction, setDefaultOptions } from '../../common';\n\nvar BarChart = (function (CategoricalChart) {\n    function BarChart () {\n        CategoricalChart.apply(this, arguments);\n    }\n\n    if ( CategoricalChart ) BarChart.__proto__ = CategoricalChart;\n    BarChart.prototype = Object.create( CategoricalChart && CategoricalChart.prototype );\n    BarChart.prototype.constructor = BarChart;\n\n    BarChart.prototype.render = function render () {\n        CategoricalChart.prototype.render.call(this);\n        this.updateStackRange();\n    };\n\n    BarChart.prototype.pointType = function pointType () {\n        return Bar;\n    };\n\n    BarChart.prototype.clusterType = function clusterType () {\n        return ClusterLayout;\n    };\n\n    BarChart.prototype.stackType = function stackType () {\n        return StackWrap;\n    };\n\n    BarChart.prototype.stackLimits = function stackLimits (axisName, stackName) {\n        var limits = CategoricalChart.prototype.stackLimits.call(this, axisName, stackName);\n\n        return limits;\n    };\n\n    BarChart.prototype.createPoint = function createPoint (data, fields) {\n        var categoryIx = fields.categoryIx;\n        var category = fields.category;\n        var series = fields.series;\n        var seriesIx = fields.seriesIx;\n        var ref = this;\n        var options = ref.options;\n        var children = ref.children;\n        var isStacked = options.isStacked;\n        var value = this.pointValue(data);\n        var pointOptions = this.pointOptions(series, seriesIx);\n\n        var labelOptions = pointOptions.labels;\n        if (isStacked) {\n            if (labelOptions.position === OUTSIDE_END) {\n                labelOptions.position = INSIDE_END;\n            }\n        }\n\n        pointOptions.isStacked = isStacked;\n\n        var color = data.fields.color || series.color;\n        if (value < 0 && pointOptions.negativeColor) {\n            color = pointOptions.negativeColor;\n        }\n\n        pointOptions = this.evalPointOptions(\n            pointOptions, value, category, categoryIx, series, seriesIx\n        );\n\n        if (isFunction(series.color)) {\n            color = pointOptions.color;\n        }\n\n        var pointType = this.pointType();\n        var point = new pointType(value, pointOptions);\n        point.color = color;\n\n        var cluster = children[categoryIx];\n        if (!cluster) {\n            var clusterType = this.clusterType();\n            cluster = new clusterType({\n                vertical: options.invertAxes,\n                gap: options.gap,\n                spacing: options.spacing,\n                rtl: !options.invertAxes && (this.chartService || {}).rtl\n            });\n            this.append(cluster);\n        }\n\n        if (isStacked) {\n            var stackWrap = this.getStackWrap(series, cluster);\n            stackWrap.append(point);\n        } else {\n            cluster.append(point);\n        }\n\n        return point;\n    };\n\n    BarChart.prototype.getStackWrap = function getStackWrap (series, cluster) {\n        var stack = series.stack;\n        var stackGroup = stack ? stack.group || stack : stack;\n        var wraps = cluster.children;\n        var stackWrap;\n\n        if (typeof stackGroup === STRING) {\n            for (var i = 0; i < wraps.length; i++) {\n                if (wraps[i]._stackGroup === stackGroup) {\n                    stackWrap = wraps[i];\n                    break;\n                }\n            }\n        } else {\n            stackWrap = wraps[0];\n        }\n\n        if (!stackWrap) {\n            var stackType = this.stackType();\n            stackWrap = new stackType({\n                vertical: !this.options.invertAxes\n            });\n            stackWrap._stackGroup = stackGroup;\n            cluster.append(stackWrap);\n        }\n\n        return stackWrap;\n    };\n\n    BarChart.prototype.categorySlot = function categorySlot (categoryAxis, categoryIx, valueAxis) {\n        var options = this.options;\n        var categorySlot = categoryAxis.getSlot(categoryIx);\n        var startValue = valueAxis.startValue();\n\n        if (options.isStacked) {\n            var zeroSlot = valueAxis.getSlot(startValue, startValue, true);\n            var stackAxis = options.invertAxes ? X : Y;\n            categorySlot[stackAxis + 1] = categorySlot[stackAxis + 2] = zeroSlot[stackAxis + 1];\n        }\n\n        return categorySlot;\n    };\n\n    BarChart.prototype.reflowCategories = function reflowCategories (categorySlots) {\n        var children = this.children;\n        var childrenLength = children.length;\n\n        for (var i = 0; i < childrenLength; i++) {\n            children[i].reflow(categorySlots[i]);\n        }\n    };\n\n    BarChart.prototype.createAnimation = function createAnimation () {\n        this._setAnimationOptions();\n        CategoricalChart.prototype.createAnimation.call(this);\n\n        if (anyHasZIndex(this.options.series)) {\n            this._setChildrenAnimation();\n        }\n    };\n\n    BarChart.prototype._setChildrenAnimation = function _setChildrenAnimation () {\n        var this$1 = this;\n\n        var points = this.points;\n\n        for (var idx = 0; idx < points.length; idx++) {\n            var point = points[idx];\n            var pointVisual = point.visual;\n            if (pointVisual && defined(pointVisual.options.zIndex)) {\n                point.options.animation = this$1.options.animation;\n                point.createAnimation();\n            }\n        }\n    };\n\n    BarChart.prototype._setAnimationOptions = function _setAnimationOptions () {\n        var options = this.options;\n        var animation = options.animation || {};\n        var origin;\n\n        if (options.isStacked) {\n            var valueAxis = this.seriesValueAxis(options.series[0]);\n            origin = valueAxis.getSlot(valueAxis.startValue());\n        } else {\n            origin = this.categoryAxis.getSlot(0);\n        }\n\n        animation.origin = new geom.Point(origin.x1, origin.y1);\n        animation.vertical = !options.invertAxes;\n    };\n\n    return BarChart;\n}(CategoricalChart));\n\nsetDefaultOptions(BarChart, {\n    animation: {\n        type: BAR\n    }\n});\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}