{"ast":null,"code":"import { setDefaultOptions, deepExtend, isNumber } from '../../common';\nimport { ANGULAR_SPEED, RADIAL_RANGE_POINTER } from '../constants';\nimport Pointer from '../pointer';\nimport RangePointerAnimation from './range-pointer-animation';\n\nvar RangePointer = function (Pointer) {\n  function RangePointer() {\n    Pointer.apply(this, arguments);\n  }\n\n  if (Pointer) RangePointer.__proto__ = Pointer;\n  RangePointer.prototype = Object.create(Pointer && Pointer.prototype);\n  RangePointer.prototype.constructor = RangePointer;\n\n  RangePointer.prototype.repaint = function repaint() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var oldAngle = scale.slotAngle(options._oldValue);\n    var newAngle = scale.slotAngle(options.value);\n\n    if (this.animation) {\n      this.animation.abort();\n    }\n\n    if (options.animation.transitions === false) {\n      this.angle(newAngle);\n      this.stroke(this.currentColor());\n    } else {\n      this.animation = new RangePointerAnimation(this, deepExtend(options.animation, {\n        oldAngle: oldAngle,\n        newAngle: newAngle\n      }));\n      this.animation.play();\n    }\n  };\n\n  RangePointer.prototype.angle = function angle(value) {\n    var geometry = this.elements.geometry();\n\n    if (this.scale.options.reverse) {\n      geometry.setStartAngle(value);\n    } else {\n      geometry.setEndAngle(value);\n    }\n\n    this.scale.placeholderRangeAngle(value);\n  };\n\n  RangePointer.prototype.stroke = function stroke(value) {\n    this.elements.stroke(value);\n  };\n\n  RangePointer.prototype.render = function render() {\n    if (this.elements) {\n      return;\n    }\n\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n\n    if (options.animation !== false) {\n      deepExtend(options.animation, {\n        startAngle: 0,\n        center: scale.arc.center,\n        reverse: scale.options.reverse\n      });\n    }\n\n    this.elements = scale.addRange(scale.options.min, this.options.value, {\n      color: this.currentColor(),\n      opacity: options.opacity,\n      lineCap: scale.options.rangeLineCap\n    });\n  };\n\n  RangePointer.prototype.currentColor = function currentColor() {\n    var ref = this.scale.options;\n    var min = ref.min;\n    var max = ref.max;\n    var ref$1 = this.options;\n    var colors = ref$1.colors;\n    var color = ref$1.color;\n    var value = ref$1.value;\n    var currentValue = isNumber(value) ? value : min;\n\n    if (colors) {\n      for (var idx = 0; idx < colors.length; idx++) {\n        var ref$2 = colors[idx];\n        var rangeColor = ref$2.color;\n        var from = ref$2.from;\n        if (from === void 0) from = min;\n        var to = ref$2.to;\n        if (to === void 0) to = max;\n\n        if (from <= currentValue && currentValue <= to) {\n          return rangeColor;\n        }\n      }\n    }\n\n    return color;\n  };\n\n  RangePointer.prototype.reflow = function reflow() {\n    this.render();\n    this.bbox = this.elements.bbox();\n  };\n\n  return RangePointer;\n}(Pointer);\n\nsetDefaultOptions(RangePointer, {\n  animation: {\n    type: RADIAL_RANGE_POINTER,\n    duration: ANGULAR_SPEED\n  }\n});\nexport default RangePointer;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/gauges/arc/range-pointer.js"],"names":["setDefaultOptions","deepExtend","isNumber","ANGULAR_SPEED","RADIAL_RANGE_POINTER","Pointer","RangePointerAnimation","RangePointer","apply","arguments","__proto__","prototype","Object","create","constructor","repaint","ref","scale","options","oldAngle","slotAngle","_oldValue","newAngle","value","animation","abort","transitions","angle","stroke","currentColor","play","geometry","elements","reverse","setStartAngle","setEndAngle","placeholderRangeAngle","render","startAngle","center","arc","addRange","min","color","opacity","lineCap","rangeLineCap","max","ref$1","colors","currentValue","idx","length","ref$2","rangeColor","from","to","reflow","bbox","type","duration"],"mappings":"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","sourcesContent":["import { setDefaultOptions, deepExtend, isNumber } from '../../common';\nimport { ANGULAR_SPEED, RADIAL_RANGE_POINTER } from '../constants';\nimport Pointer from '../pointer';\nimport RangePointerAnimation from './range-pointer-animation';\n\nvar RangePointer = (function (Pointer) {\n    function RangePointer () {\n        Pointer.apply(this, arguments);\n    }\n\n    if ( Pointer ) RangePointer.__proto__ = Pointer;\n    RangePointer.prototype = Object.create( Pointer && Pointer.prototype );\n    RangePointer.prototype.constructor = RangePointer;\n\n    RangePointer.prototype.repaint = function repaint () {\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n        var oldAngle = scale.slotAngle(options._oldValue);\n        var newAngle = scale.slotAngle(options.value);\n\n        if (this.animation) {\n            this.animation.abort();\n        }\n\n        if (options.animation.transitions === false) {\n            this.angle(newAngle);\n            this.stroke(this.currentColor());\n        } else {\n            this.animation = new RangePointerAnimation(this, deepExtend(options.animation, {\n                oldAngle: oldAngle,\n                newAngle: newAngle\n            }));\n\n            this.animation.play();\n        }\n    };\n\n    RangePointer.prototype.angle = function angle (value) {\n        var geometry = this.elements.geometry();\n        if (this.scale.options.reverse) {\n            geometry.setStartAngle(value);\n        } else {\n            geometry.setEndAngle(value);\n        }\n        this.scale.placeholderRangeAngle(value);\n    };\n\n    RangePointer.prototype.stroke = function stroke (value) {\n        this.elements.stroke(value);\n    };\n\n    RangePointer.prototype.render = function render () {\n        if (this.elements) {\n            return;\n        }\n\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n\n        if (options.animation !== false) {\n            deepExtend(options.animation, {\n                startAngle: 0,\n                center: scale.arc.center,\n                reverse: scale.options.reverse\n            });\n        }\n\n        this.elements = scale.addRange(scale.options.min, this.options.value, {\n            color: this.currentColor(),\n            opacity: options.opacity,\n            lineCap: scale.options.rangeLineCap\n        });\n    };\n\n    RangePointer.prototype.currentColor = function currentColor () {\n        var ref = this.scale.options;\n        var min = ref.min;\n        var max = ref.max;\n        var ref$1 = this.options;\n        var colors = ref$1.colors;\n        var color = ref$1.color;\n        var value = ref$1.value;\n        var currentValue = isNumber(value) ? value : min;\n\n        if (colors) {\n            for (var idx = 0; idx < colors.length; idx++) {\n                var ref$2 = colors[idx];\n                var rangeColor = ref$2.color;\n                var from = ref$2.from; if ( from === void 0 ) from = min;\n                var to = ref$2.to; if ( to === void 0 ) to = max;\n\n                if (from <= currentValue && currentValue <= to) {\n                    return rangeColor;\n                }\n            }\n        }\n\n        return color;\n    };\n\n    RangePointer.prototype.reflow = function reflow () {\n        this.render();\n\n        this.bbox = this.elements.bbox();\n    };\n\n    return RangePointer;\n}(Pointer));\n\nsetDefaultOptions(RangePointer, {\n    animation: {\n        type: RADIAL_RANGE_POINTER,\n        duration: ANGULAR_SPEED\n    }\n});\n\nexport default RangePointer;\n"]},"metadata":{},"sourceType":"module"}