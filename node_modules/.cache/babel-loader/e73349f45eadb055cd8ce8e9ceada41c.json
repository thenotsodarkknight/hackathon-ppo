{"ast":null,"code":"import PolarPlotAreaBase from './polar-plotarea-base';\nimport CategoricalPlotArea from './categorical-plotarea';\nimport RadarAreaChart from '../radar-area-chart/radar-area-chart';\nimport RadarLineChart from '../radar-line-chart/radar-line-chart';\nimport RadarBarChart from '../radar-bar-chart/radar-bar-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport { RadarCategoryAxis, Point } from '../../core';\nimport { RADAR_AREA, RADAR_LINE, RADAR_COLUMN } from '../constants';\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport { ARC } from '../../common/constants';\nimport { eventElement, deepExtend, setDefaultOptions } from '../../common';\n\nvar RadarPlotArea = function (PolarPlotAreaBase) {\n  function RadarPlotArea() {\n    PolarPlotAreaBase.apply(this, arguments);\n  }\n\n  if (PolarPlotAreaBase) RadarPlotArea.__proto__ = PolarPlotAreaBase;\n  RadarPlotArea.prototype = Object.create(PolarPlotAreaBase && PolarPlotAreaBase.prototype);\n  RadarPlotArea.prototype.constructor = RadarPlotArea;\n\n  RadarPlotArea.prototype.createPolarAxis = function createPolarAxis() {\n    var categoryAxis = new RadarCategoryAxis(this.options.categoryAxis, this.chartService);\n    this.polarAxis = categoryAxis;\n    this.categoryAxis = categoryAxis;\n    this.appendAxis(categoryAxis);\n    this.aggregateCategories();\n    this.createCategoryAxesLabels();\n  };\n\n  RadarPlotArea.prototype.valueAxisOptions = function valueAxisOptions(defaults) {\n    if (this._hasBarCharts) {\n      deepExtend(defaults, {\n        majorGridLines: {\n          type: ARC\n        },\n        minorGridLines: {\n          type: ARC\n        }\n      });\n    }\n\n    if (this._isStacked100) {\n      deepExtend(defaults, {\n        roundToMajorUnit: false,\n        labels: {\n          format: \"P0\"\n        }\n      });\n    }\n\n    return deepExtend(defaults, this.options.valueAxis);\n  };\n\n  RadarPlotArea.prototype.aggregateCategories = function aggregateCategories() {\n    // No separate panes in radar charts\n    CategoricalPlotArea.prototype.aggregateCategories.call(this, this.panes);\n  };\n\n  RadarPlotArea.prototype.createCategoryAxesLabels = function createCategoryAxesLabels() {\n    CategoricalPlotArea.prototype.createCategoryAxesLabels.call(this, this.panes);\n  };\n\n  RadarPlotArea.prototype.filterSeries = function filterSeries(currentSeries) {\n    // Not supported for radar charts\n    return currentSeries;\n  };\n\n  RadarPlotArea.prototype.createCharts = function createCharts() {\n    var series = this.filterVisibleSeries(this.series);\n    var pane = this.panes[0];\n    this.createAreaChart(filterSeriesByType(series, [RADAR_AREA]), pane);\n    this.createLineChart(filterSeriesByType(series, [RADAR_LINE]), pane);\n    this.createBarChart(filterSeriesByType(series, [RADAR_COLUMN]), pane);\n  };\n\n  RadarPlotArea.prototype.chartOptions = function chartOptions(series) {\n    var options = {\n      series: series\n    };\n    var firstSeries = series[0];\n\n    if (firstSeries) {\n      var filteredSeries = this.filterVisibleSeries(series);\n      var stack = firstSeries.stack;\n      options.isStacked = stack && filteredSeries.length > 1;\n      options.isStacked100 = stack && stack.type === \"100%\" && filteredSeries.length > 1;\n\n      if (options.isStacked100) {\n        this._isStacked100 = true;\n      }\n    }\n\n    return options;\n  };\n\n  RadarPlotArea.prototype.createAreaChart = function createAreaChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var areaChart = new RadarAreaChart(this, this.chartOptions(series));\n    this.appendChart(areaChart, pane);\n  };\n\n  RadarPlotArea.prototype.createLineChart = function createLineChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var lineChart = new RadarLineChart(this, this.chartOptions(series));\n    this.appendChart(lineChart, pane);\n  };\n\n  RadarPlotArea.prototype.createBarChart = function createBarChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    var firstSeries = series[0];\n    var options = this.chartOptions(series);\n    options.gap = firstSeries.gap;\n    options.spacing = firstSeries.spacing;\n    var barChart = new RadarBarChart(this, options);\n    this.appendChart(barChart, pane);\n    this._hasBarCharts = true;\n  };\n\n  RadarPlotArea.prototype.seriesCategoryAxis = function seriesCategoryAxis() {\n    return this.categoryAxis;\n  };\n\n  RadarPlotArea.prototype._dispatchEvent = function _dispatchEvent(chart, e, eventType) {\n    var coords = chart._eventCoordinates(e);\n\n    var point = new Point(coords.x, coords.y);\n    var category = this.categoryAxis.getCategory(point);\n    var value = this.valueAxis.getValue(point);\n\n    if (category !== null && value !== null) {\n      chart.trigger(eventType, {\n        element: eventElement(e),\n        category: category,\n        value: value\n      });\n    }\n  };\n\n  RadarPlotArea.prototype.createCrosshairs = function createCrosshairs() {};\n\n  return RadarPlotArea;\n}(PolarPlotAreaBase);\n\ndeepExtend(RadarPlotArea.prototype, PlotAreaEventsMixin, {\n  appendChart: CategoricalPlotArea.prototype.appendChart,\n  aggregateSeries: CategoricalPlotArea.prototype.aggregateSeries,\n  seriesSourcePoints: CategoricalPlotArea.prototype.seriesSourcePoints\n});\nsetDefaultOptions(RadarPlotArea, {\n  categoryAxis: {\n    categories: []\n  },\n  valueAxis: {}\n});\nexport default RadarPlotArea;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/chart/plotarea/radar-plotarea.js"],"names":["PolarPlotAreaBase","CategoricalPlotArea","RadarAreaChart","RadarLineChart","RadarBarChart","PlotAreaEventsMixin","RadarCategoryAxis","Point","RADAR_AREA","RADAR_LINE","RADAR_COLUMN","filterSeriesByType","ARC","eventElement","deepExtend","setDefaultOptions","RadarPlotArea","apply","arguments","__proto__","prototype","Object","create","constructor","createPolarAxis","categoryAxis","options","chartService","polarAxis","appendAxis","aggregateCategories","createCategoryAxesLabels","valueAxisOptions","defaults","_hasBarCharts","majorGridLines","type","minorGridLines","_isStacked100","roundToMajorUnit","labels","format","valueAxis","call","panes","filterSeries","currentSeries","createCharts","series","filterVisibleSeries","pane","createAreaChart","createLineChart","createBarChart","chartOptions","firstSeries","filteredSeries","stack","isStacked","length","isStacked100","areaChart","appendChart","lineChart","gap","spacing","barChart","seriesCategoryAxis","_dispatchEvent","chart","e","eventType","coords","_eventCoordinates","point","x","y","category","getCategory","value","getValue","trigger","element","createCrosshairs","aggregateSeries","seriesSourcePoints","categories"],"mappings":"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","sourcesContent":["import PolarPlotAreaBase from './polar-plotarea-base';\nimport CategoricalPlotArea from './categorical-plotarea';\nimport RadarAreaChart from '../radar-area-chart/radar-area-chart';\nimport RadarLineChart from '../radar-line-chart/radar-line-chart';\nimport RadarBarChart from '../radar-bar-chart/radar-bar-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\n\nimport { RadarCategoryAxis, Point } from '../../core';\n\nimport { RADAR_AREA, RADAR_LINE, RADAR_COLUMN } from '../constants';\n\nimport filterSeriesByType from '../utils/filter-series-by-type';\n\nimport { ARC } from '../../common/constants';\nimport { eventElement, deepExtend, setDefaultOptions } from '../../common';\n\nvar RadarPlotArea = (function (PolarPlotAreaBase) {\n    function RadarPlotArea () {\n        PolarPlotAreaBase.apply(this, arguments);\n    }\n\n    if ( PolarPlotAreaBase ) RadarPlotArea.__proto__ = PolarPlotAreaBase;\n    RadarPlotArea.prototype = Object.create( PolarPlotAreaBase && PolarPlotAreaBase.prototype );\n    RadarPlotArea.prototype.constructor = RadarPlotArea;\n\n    RadarPlotArea.prototype.createPolarAxis = function createPolarAxis () {\n        var categoryAxis = new RadarCategoryAxis(this.options.categoryAxis, this.chartService);\n\n        this.polarAxis = categoryAxis;\n        this.categoryAxis = categoryAxis;\n        this.appendAxis(categoryAxis);\n        this.aggregateCategories();\n        this.createCategoryAxesLabels();\n    };\n\n    RadarPlotArea.prototype.valueAxisOptions = function valueAxisOptions (defaults) {\n        if (this._hasBarCharts) {\n            deepExtend(defaults, {\n                majorGridLines: { type: ARC },\n                minorGridLines: { type: ARC }\n            });\n        }\n\n        if (this._isStacked100) {\n            deepExtend(defaults, {\n                roundToMajorUnit: false,\n                labels: { format: \"P0\" }\n            });\n        }\n\n        return deepExtend(defaults, this.options.valueAxis);\n    };\n\n    RadarPlotArea.prototype.aggregateCategories = function aggregateCategories () {\n        // No separate panes in radar charts\n        CategoricalPlotArea.prototype.aggregateCategories.call(this, this.panes);\n    };\n\n    RadarPlotArea.prototype.createCategoryAxesLabels = function createCategoryAxesLabels () {\n        CategoricalPlotArea.prototype.createCategoryAxesLabels.call(this, this.panes);\n    };\n\n    RadarPlotArea.prototype.filterSeries = function filterSeries (currentSeries) {\n        // Not supported for radar charts\n        return currentSeries;\n    };\n\n    RadarPlotArea.prototype.createCharts = function createCharts () {\n        var series = this.filterVisibleSeries(this.series);\n        var pane = this.panes[0];\n\n        this.createAreaChart(\n            filterSeriesByType(series, [ RADAR_AREA ]),\n            pane\n        );\n\n        this.createLineChart(\n            filterSeriesByType(series, [ RADAR_LINE ]),\n            pane\n        );\n\n        this.createBarChart(\n            filterSeriesByType(series, [ RADAR_COLUMN ]),\n            pane\n        );\n    };\n\n    RadarPlotArea.prototype.chartOptions = function chartOptions (series) {\n        var options = { series: series };\n        var firstSeries = series[0];\n        if (firstSeries) {\n            var filteredSeries = this.filterVisibleSeries(series);\n            var stack = firstSeries.stack;\n            options.isStacked = stack && filteredSeries.length > 1;\n            options.isStacked100 = stack && stack.type === \"100%\" && filteredSeries.length > 1;\n\n            if (options.isStacked100) {\n                this._isStacked100 = true;\n            }\n        }\n\n        return options;\n    };\n\n    RadarPlotArea.prototype.createAreaChart = function createAreaChart (series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var areaChart = new RadarAreaChart(this, this.chartOptions(series));\n        this.appendChart(areaChart, pane);\n    };\n\n    RadarPlotArea.prototype.createLineChart = function createLineChart (series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var lineChart = new RadarLineChart(this, this.chartOptions(series));\n        this.appendChart(lineChart, pane);\n    };\n\n    RadarPlotArea.prototype.createBarChart = function createBarChart (series, pane) {\n        if (series.length === 0) {\n            return;\n        }\n\n        var firstSeries = series[0];\n        var options = this.chartOptions(series);\n        options.gap = firstSeries.gap;\n        options.spacing = firstSeries.spacing;\n\n        var barChart = new RadarBarChart(this, options);\n        this.appendChart(barChart, pane);\n\n        this._hasBarCharts = true;\n    };\n\n    RadarPlotArea.prototype.seriesCategoryAxis = function seriesCategoryAxis () {\n        return this.categoryAxis;\n    };\n\n    RadarPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var category = this.categoryAxis.getCategory(point);\n        var value = this.valueAxis.getValue(point);\n\n        if (category !== null && value !== null) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                category: category,\n                value: value\n            });\n        }\n    };\n\n    RadarPlotArea.prototype.createCrosshairs = function createCrosshairs () {};\n\n    return RadarPlotArea;\n}(PolarPlotAreaBase));\n\ndeepExtend(RadarPlotArea.prototype, PlotAreaEventsMixin, {\n    appendChart: CategoricalPlotArea.prototype.appendChart,\n    aggregateSeries: CategoricalPlotArea.prototype.aggregateSeries,\n    seriesSourcePoints: CategoricalPlotArea.prototype.seriesSourcePoints\n});\n\nsetDefaultOptions(RadarPlotArea, {\n    categoryAxis: {\n        categories: []\n    },\n    valueAxis: {}\n});\n\nexport default RadarPlotArea;"]},"metadata":{},"sourceType":"module"}