{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport ChartElement from './chart-element';\nimport Box from './box';\nimport { DEFAULT_FONT, BLACK } from '../common/constants';\nimport { setDefaultOptions } from '../common';\nvar DrawingText = draw.Text;\n\nvar Text = function (ChartElement) {\n  function Text(content, options) {\n    ChartElement.call(this, options);\n    this.content = content; // Calculate size\n\n    this.reflow(new Box());\n  }\n\n  if (ChartElement) Text.__proto__ = ChartElement;\n  Text.prototype = Object.create(ChartElement && ChartElement.prototype);\n  Text.prototype.constructor = Text;\n\n  Text.prototype.reflow = function reflow(targetBox) {\n    var options = this.options;\n    var size = options.size = draw.util.measureText(this.content, {\n      font: options.font\n    });\n    this.baseline = size.baseline;\n    this.box = new Box(targetBox.x1, targetBox.y1, targetBox.x1 + size.width, targetBox.y1 + size.height);\n  };\n\n  Text.prototype.createVisual = function createVisual() {\n    var ref = this.options;\n    var font = ref.font;\n    var color = ref.color;\n    var opacity = ref.opacity;\n    var cursor = ref.cursor;\n    this.visual = new DrawingText(this.content, this.box.toRect().topLeft(), {\n      font: font,\n      fill: {\n        color: color,\n        opacity: opacity\n      },\n      cursor: cursor\n    });\n  };\n\n  return Text;\n}(ChartElement);\n\nsetDefaultOptions(Text, {\n  font: DEFAULT_FONT,\n  color: BLACK\n});\nexport default Text;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/text.js"],"names":["drawing","draw","ChartElement","Box","DEFAULT_FONT","BLACK","setDefaultOptions","DrawingText","Text","content","options","call","reflow","__proto__","prototype","Object","create","constructor","targetBox","size","util","measureText","font","baseline","box","x1","y1","width","height","createVisual","ref","color","opacity","cursor","visual","toRect","topLeft","fill"],"mappings":"AAAA,SAASA,OAAO,IAAIC,IAApB,QAAgC,yBAAhC;AAEA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAASC,YAAT,EAAuBC,KAAvB,QAAoC,qBAApC;AACA,SAASC,iBAAT,QAAkC,WAAlC;AAEA,IAAIC,WAAW,GAAGN,IAAI,CAACO,IAAvB;;AAEA,IAAIA,IAAI,GAAI,UAAUN,YAAV,EAAwB;AAChC,WAASM,IAAT,CAAcC,OAAd,EAAuBC,OAAvB,EAAgC;AAC5BR,IAAAA,YAAY,CAACS,IAAb,CAAkB,IAAlB,EAAwBD,OAAxB;AAEA,SAAKD,OAAL,GAAeA,OAAf,CAH4B,CAK5B;;AACA,SAAKG,MAAL,CAAY,IAAIT,GAAJ,EAAZ;AACH;;AAED,MAAKD,YAAL,EAAoBM,IAAI,CAACK,SAAL,GAAiBX,YAAjB;AACpBM,EAAAA,IAAI,CAACM,SAAL,GAAiBC,MAAM,CAACC,MAAP,CAAed,YAAY,IAAIA,YAAY,CAACY,SAA5C,CAAjB;AACAN,EAAAA,IAAI,CAACM,SAAL,CAAeG,WAAf,GAA6BT,IAA7B;;AAEAA,EAAAA,IAAI,CAACM,SAAL,CAAeF,MAAf,GAAwB,SAASA,MAAT,CAAiBM,SAAjB,EAA4B;AAChD,QAAIR,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIS,IAAI,GAAGT,OAAO,CAACS,IAAR,GAAelB,IAAI,CAACmB,IAAL,CAAUC,WAAV,CAAsB,KAAKZ,OAA3B,EAAoC;AAAEa,MAAAA,IAAI,EAAEZ,OAAO,CAACY;AAAhB,KAApC,CAA1B;AAEA,SAAKC,QAAL,GAAgBJ,IAAI,CAACI,QAArB;AAEA,SAAKC,GAAL,GAAW,IAAIrB,GAAJ,CAAQe,SAAS,CAACO,EAAlB,EAAsBP,SAAS,CAACQ,EAAhC,EACHR,SAAS,CAACO,EAAV,GAAeN,IAAI,CAACQ,KADjB,EACwBT,SAAS,CAACQ,EAAV,GAAeP,IAAI,CAACS,MAD5C,CAAX;AAEH,GARD;;AAUApB,EAAAA,IAAI,CAACM,SAAL,CAAee,YAAf,GAA8B,SAASA,YAAT,GAAyB;AACnD,QAAIC,GAAG,GAAG,KAAKpB,OAAf;AACA,QAAIY,IAAI,GAAGQ,GAAG,CAACR,IAAf;AACA,QAAIS,KAAK,GAAGD,GAAG,CAACC,KAAhB;AACA,QAAIC,OAAO,GAAGF,GAAG,CAACE,OAAlB;AACA,QAAIC,MAAM,GAAGH,GAAG,CAACG,MAAjB;AAEA,SAAKC,MAAL,GAAc,IAAI3B,WAAJ,CAAgB,KAAKE,OAArB,EAA8B,KAAKe,GAAL,CAASW,MAAT,GAAkBC,OAAlB,EAA9B,EAA2D;AACrEd,MAAAA,IAAI,EAAEA,IAD+D;AAErEe,MAAAA,IAAI,EAAE;AAAEN,QAAAA,KAAK,EAAEA,KAAT;AAAgBC,QAAAA,OAAO,EAAEA;AAAzB,OAF+D;AAGrEC,MAAAA,MAAM,EAAEA;AAH6D,KAA3D,CAAd;AAKH,GAZD;;AAcA,SAAOzB,IAAP;AACH,CAvCW,CAuCVN,YAvCU,CAAZ;;AAyCAI,iBAAiB,CAACE,IAAD,EAAO;AACpBc,EAAAA,IAAI,EAAElB,YADc;AAEpB2B,EAAAA,KAAK,EAAE1B;AAFa,CAAP,CAAjB;AAKA,eAAeG,IAAf","sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport ChartElement from './chart-element';\nimport Box from './box';\n\nimport { DEFAULT_FONT, BLACK } from '../common/constants';\nimport { setDefaultOptions } from '../common';\n\nvar DrawingText = draw.Text;\n\nvar Text = (function (ChartElement) {\n    function Text(content, options) {\n        ChartElement.call(this, options);\n\n        this.content = content;\n\n        // Calculate size\n        this.reflow(new Box());\n    }\n\n    if ( ChartElement ) Text.__proto__ = ChartElement;\n    Text.prototype = Object.create( ChartElement && ChartElement.prototype );\n    Text.prototype.constructor = Text;\n\n    Text.prototype.reflow = function reflow (targetBox) {\n        var options = this.options;\n        var size = options.size = draw.util.measureText(this.content, { font: options.font });\n\n        this.baseline = size.baseline;\n\n        this.box = new Box(targetBox.x1, targetBox.y1,\n                targetBox.x1 + size.width, targetBox.y1 + size.height);\n    };\n\n    Text.prototype.createVisual = function createVisual () {\n        var ref = this.options;\n        var font = ref.font;\n        var color = ref.color;\n        var opacity = ref.opacity;\n        var cursor = ref.cursor;\n\n        this.visual = new DrawingText(this.content, this.box.toRect().topLeft(), {\n            font: font,\n            fill: { color: color, opacity: opacity },\n            cursor: cursor\n        });\n    };\n\n    return Text;\n}(ChartElement));\n\nsetDefaultOptions(Text, {\n    font: DEFAULT_FONT,\n    color: BLACK\n});\n\nexport default Text;\n"]},"metadata":{},"sourceType":"module"}