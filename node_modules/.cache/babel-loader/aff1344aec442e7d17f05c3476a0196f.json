{"ast":null,"code":"import { setDefaultOptions, deepExtend, defined, getSpacing } from '../../common';\nimport { Box } from '../../core';\nimport { BLACK } from '../../common/constants';\nimport { BAR_POINTER } from '../constants';\nimport Pointer from '../pointer';\n\nvar LinearPointer = function (Pointer) {\n  function LinearPointer(scale, options) {\n    Pointer.call(this, scale, options);\n    this.options = deepExtend({\n      track: {\n        visible: defined(options.track)\n      }\n    }, this.options);\n  }\n\n  if (Pointer) LinearPointer.__proto__ = Pointer;\n  LinearPointer.prototype = Object.create(Pointer && Pointer.prototype);\n  LinearPointer.prototype.constructor = LinearPointer;\n\n  LinearPointer.prototype.reflow = function reflow() {\n    var ref = this;\n    var options = ref.options;\n    var scale = ref.scale;\n    var ref$1 = scale.options;\n    var mirror = ref$1.mirror;\n    var vertical = ref$1.vertical;\n    var scaleLine = scale.lineBox();\n    var trackSize = options.track.size || options.size;\n    var pointerHalfSize = options.size / 2;\n    var margin = getSpacing(options.margin);\n    var space = vertical ? margin[mirror ? \"left\" : \"right\"] : margin[mirror ? \"bottom\" : \"top\"];\n    var pointerBox, pointerRangeBox, trackBox;\n    space = mirror ? -space : space;\n\n    if (vertical) {\n      trackBox = new Box(scaleLine.x1 + space, scaleLine.y1, scaleLine.x1 + space, scaleLine.y2);\n\n      if (mirror) {\n        trackBox.x1 -= trackSize;\n      } else {\n        trackBox.x2 += trackSize;\n      }\n\n      if (options.shape !== BAR_POINTER) {\n        pointerRangeBox = new Box(scaleLine.x2 + space, scaleLine.y1 - pointerHalfSize, scaleLine.x2 + space, scaleLine.y2 + pointerHalfSize);\n        pointerBox = pointerRangeBox;\n      }\n    } else {\n      trackBox = new Box(scaleLine.x1, scaleLine.y1 - space, scaleLine.x2, scaleLine.y1 - space);\n\n      if (mirror) {\n        trackBox.y2 += trackSize;\n      } else {\n        trackBox.y1 -= trackSize;\n      }\n\n      if (options.shape !== BAR_POINTER) {\n        pointerRangeBox = new Box(scaleLine.x1 - pointerHalfSize, scaleLine.y1 - space, scaleLine.x2 + pointerHalfSize, scaleLine.y1 - space);\n        pointerBox = pointerRangeBox;\n      }\n    }\n\n    this.trackBox = trackBox;\n    this.pointerRangeBox = pointerRangeBox;\n    this.box = pointerBox || trackBox.clone().pad(options.border.width);\n  };\n\n  LinearPointer.prototype.getElementOptions = function getElementOptions() {\n    var options = this.options;\n    return {\n      fill: {\n        color: options.color,\n        opacity: options.opacity\n      },\n      stroke: defined(options.border) ? {\n        color: options.border.width ? options.border.color || options.color : \"\",\n        width: options.border.width,\n        dashType: options.border.dashType,\n        opacity: options.opacity\n      } : null\n    };\n  };\n\n  LinearPointer.prototype._margin = function _margin() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var ref$1 = scale.options;\n    var mirror = ref$1.mirror;\n    var vertical = ref$1.vertical;\n    var margin = getSpacing(options.margin);\n    var space = vertical ? margin[mirror ? \"left\" : \"right\"] : margin[mirror ? \"bottom\" : \"top\"];\n    return space;\n  };\n\n  return LinearPointer;\n}(Pointer);\n\nsetDefaultOptions(LinearPointer, {\n  shape: BAR_POINTER,\n  track: {\n    border: {\n      width: 1\n    }\n  },\n  color: BLACK,\n  border: {\n    width: 1\n  },\n  opacity: 1,\n  margin: getSpacing(3),\n  animation: {\n    type: BAR_POINTER\n  },\n  visible: true\n});\nexport default LinearPointer;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/gauges/linear/linear-pointer.js"],"names":["setDefaultOptions","deepExtend","defined","getSpacing","Box","BLACK","BAR_POINTER","Pointer","LinearPointer","scale","options","call","track","visible","__proto__","prototype","Object","create","constructor","reflow","ref","ref$1","mirror","vertical","scaleLine","lineBox","trackSize","size","pointerHalfSize","margin","space","pointerBox","pointerRangeBox","trackBox","x1","y1","y2","x2","shape","box","clone","pad","border","width","getElementOptions","fill","color","opacity","stroke","dashType","_margin","animation","type"],"mappings":"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","sourcesContent":["import { setDefaultOptions, deepExtend, defined, getSpacing } from '../../common';\nimport { Box } from '../../core';\nimport { BLACK } from '../../common/constants';\nimport { BAR_POINTER } from '../constants';\nimport Pointer from '../pointer';\n\nvar LinearPointer = (function (Pointer) {\n    function LinearPointer(scale, options) {\n        Pointer.call(this, scale, options);\n\n        this.options = deepExtend({\n            track: {\n                visible: defined(options.track)\n            }\n        }, this.options);\n    }\n\n    if ( Pointer ) LinearPointer.__proto__ = Pointer;\n    LinearPointer.prototype = Object.create( Pointer && Pointer.prototype );\n    LinearPointer.prototype.constructor = LinearPointer;\n\n    LinearPointer.prototype.reflow = function reflow () {\n        var ref = this;\n        var options = ref.options;\n        var scale = ref.scale;\n        var ref$1 = scale.options;\n        var mirror = ref$1.mirror;\n        var vertical = ref$1.vertical;\n        var scaleLine = scale.lineBox();\n        var trackSize = options.track.size || options.size;\n        var pointerHalfSize = options.size / 2;\n        var margin = getSpacing(options.margin);\n        var space = vertical ?\n                 margin[mirror ? \"left\" : \"right\"] :\n                 margin[mirror ? \"bottom\" : \"top\"];\n        var pointerBox, pointerRangeBox, trackBox;\n\n        space = mirror ? -space : space;\n\n        if (vertical) {\n            trackBox = new Box(\n                scaleLine.x1 + space, scaleLine.y1,\n                scaleLine.x1 + space, scaleLine.y2);\n\n            if (mirror) {\n                trackBox.x1 -= trackSize;\n            } else {\n                trackBox.x2 += trackSize;\n            }\n\n            if (options.shape !== BAR_POINTER) {\n                pointerRangeBox = new Box(\n                    scaleLine.x2 + space, scaleLine.y1 - pointerHalfSize,\n                    scaleLine.x2 + space, scaleLine.y2 + pointerHalfSize\n                );\n                pointerBox = pointerRangeBox;\n            }\n        } else {\n            trackBox = new Box(\n                scaleLine.x1, scaleLine.y1 - space,\n                scaleLine.x2, scaleLine.y1 - space);\n\n            if (mirror) {\n                trackBox.y2 += trackSize;\n            } else {\n                trackBox.y1 -= trackSize;\n            }\n\n            if (options.shape !== BAR_POINTER) {\n                pointerRangeBox = new Box(\n                    scaleLine.x1 - pointerHalfSize, scaleLine.y1 - space,\n                    scaleLine.x2 + pointerHalfSize, scaleLine.y1 - space\n                );\n                pointerBox = pointerRangeBox;\n            }\n        }\n\n        this.trackBox = trackBox;\n        this.pointerRangeBox = pointerRangeBox;\n        this.box = pointerBox || trackBox.clone().pad(options.border.width);\n    };\n\n    LinearPointer.prototype.getElementOptions = function getElementOptions () {\n        var options = this.options;\n\n        return {\n            fill: {\n                color: options.color,\n                opacity: options.opacity\n            },\n            stroke: defined(options.border) ? {\n                color: options.border.width ? options.border.color || options.color : \"\",\n                width: options.border.width,\n                dashType: options.border.dashType,\n                opacity: options.opacity\n            } : null\n        };\n    };\n\n    LinearPointer.prototype._margin = function _margin () {\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n        var ref$1 = scale.options;\n        var mirror = ref$1.mirror;\n        var vertical = ref$1.vertical;\n        var margin = getSpacing(options.margin);\n\n        var space = vertical ?\n            margin[mirror ? \"left\" : \"right\"] :\n            margin[mirror ? \"bottom\" : \"top\"];\n\n        return space;\n    };\n\n    return LinearPointer;\n}(Pointer));\n\nsetDefaultOptions(LinearPointer, {\n    shape: BAR_POINTER,\n\n    track: {\n        border: {\n            width: 1\n        }\n    },\n\n    color: BLACK,\n    border: {\n        width: 1\n    },\n    opacity: 1,\n\n    margin: getSpacing(3),\n    animation: {\n        type: BAR_POINTER\n    },\n    visible: true\n});\n\nexport default LinearPointer;"]},"metadata":{},"sourceType":"module"}