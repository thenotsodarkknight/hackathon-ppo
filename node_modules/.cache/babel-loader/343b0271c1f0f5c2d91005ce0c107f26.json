{"ast":null,"code":"import { drawing } from '@progress/kendo-drawing';\nimport { Box } from '../../core';\nimport { setDefaultOptions, deepExtend, isArray } from '../../common';\nimport { ARROW, DEFAULT_WIDTH, DEFAULT_HEIGHT } from '../constants';\nimport Gauge from '../gauge';\nimport LinearScale from './linear-scale';\nimport ArrowLinearPointer from './arrow-linear-pointer';\nimport BarLinearPointer from './bar-linear-pointer';\nvar DEFAULT_MIN_WIDTH = 60;\nvar DEFAULT_MIN_HEIGHT = 60;\nvar Group = drawing.Group;\n\nvar LinearGauge = function (Gauge) {\n  function LinearGauge() {\n    Gauge.apply(this, arguments);\n  }\n\n  if (Gauge) LinearGauge.__proto__ = Gauge;\n  LinearGauge.prototype = Object.create(Gauge && Gauge.prototype);\n  LinearGauge.prototype.constructor = LinearGauge;\n\n  LinearGauge.prototype.reflow = function reflow(bbox) {\n    var pointers = this.pointers;\n    var bboxX = bbox.origin.x;\n    var bboxY = bbox.origin.y;\n    var box = new Box(bboxX, bboxY, bboxX + bbox.width(), bboxY + bbox.height());\n    this.scale.reflow(box);\n\n    this._shrinkScaleWidth(box);\n\n    for (var i = 0; i < pointers.length; i++) {\n      pointers[i].reflow();\n    }\n\n    this.bbox = this._getBox(box);\n\n    this._alignElements();\n\n    this._shrinkElements();\n\n    this._buildVisual();\n\n    this._draw();\n  };\n\n  LinearGauge.prototype._buildVisual = function _buildVisual() {\n    var visuals = new Group();\n    var scaleElements = this.scale.render();\n    var pointers = this.pointers;\n    visuals.append(this.gaugeArea);\n    visuals.append(scaleElements);\n\n    for (var i = 0; i < pointers.length; i++) {\n      var current = pointers[i];\n      visuals.append(current.render());\n      current.value(current.options.value);\n    }\n\n    this._visuals = visuals;\n  };\n\n  LinearGauge.prototype._createModel = function _createModel() {\n    var this$1 = this;\n    var options = this.options;\n    var scale = this.scale = new LinearScale(options.scale, this.contextService);\n    this.pointers = [];\n    var pointers = options.pointer;\n    pointers = isArray(pointers) ? pointers : [pointers];\n\n    for (var i = 0; i < pointers.length; i++) {\n      var currentOptions = deepExtend({}, pointers[i], {\n        animation: {\n          transitions: options.transitions\n        }\n      });\n      var pointerType = currentOptions.shape === ARROW ? ArrowLinearPointer : BarLinearPointer;\n      this$1.pointers.push(new pointerType(scale, currentOptions));\n    }\n  };\n\n  LinearGauge.prototype._defaultSize = function _defaultSize() {\n    var vertical = this.options.scale.vertical;\n    return {\n      width: vertical ? DEFAULT_MIN_WIDTH : DEFAULT_WIDTH,\n      height: vertical ? DEFAULT_HEIGHT : DEFAULT_MIN_HEIGHT\n    };\n  };\n\n  LinearGauge.prototype._getBox = function _getBox(box) {\n    var ref = this;\n    var scale = ref.scale;\n    var pointers = ref.pointers;\n    var boxCenter = box.center();\n    var plotAreaBox = pointers[0].box.clone().wrap(scale.box);\n\n    for (var i = 0; i < pointers.length; i++) {\n      plotAreaBox.wrap(pointers[i].box.clone());\n    }\n\n    var size;\n\n    if (scale.options.vertical) {\n      size = plotAreaBox.width() / 2;\n      plotAreaBox = new Box(boxCenter.x - size, box.y1, boxCenter.x + size, box.y2);\n    } else {\n      size = plotAreaBox.height() / 2;\n      plotAreaBox = new Box(box.x1, boxCenter.y - size, box.x2, boxCenter.y + size);\n    }\n\n    return plotAreaBox;\n  };\n\n  LinearGauge.prototype._alignElements = function _alignElements() {\n    var this$1 = this;\n    var ref = this;\n    var scale = ref.scale;\n    var pointers = ref.pointers;\n    var scaleBox = scale.box;\n    var box = pointers[0].box.clone().wrap(scale.box);\n    var plotAreaBox = this.bbox;\n\n    for (var i = 0; i < pointers.length; i++) {\n      box.wrap(pointers[i].box.clone());\n    }\n\n    var diff;\n\n    if (scale.options.vertical) {\n      diff = plotAreaBox.center().x - box.center().x;\n      scale.reflow(new Box(scaleBox.x1 + diff, plotAreaBox.y1, scaleBox.x2 + diff, plotAreaBox.y2));\n    } else {\n      diff = plotAreaBox.center().y - box.center().y;\n      scale.reflow(new Box(scaleBox.x1, scaleBox.y1 + diff, scaleBox.x2, scaleBox.y2 + diff));\n    }\n\n    for (var i$1 = 0; i$1 < pointers.length; i$1++) {\n      pointers[i$1].reflow(this$1.bbox);\n    }\n  };\n\n  LinearGauge.prototype._shrinkScaleWidth = function _shrinkScaleWidth(bbox) {\n    var ref = this;\n    var scale = ref.scale;\n\n    if (!scale.options.vertical) {\n      var overflow = scale.contentBox().width() - bbox.width();\n\n      if (overflow > 0) {\n        scale.box.shrink(overflow, 0);\n        scale.box.alignTo(bbox, 'center');\n        scale.reflow(scale.box);\n      }\n    }\n  };\n\n  LinearGauge.prototype._shrinkElements = function _shrinkElements() {\n    var this$1 = this;\n    var ref = this;\n    var scale = ref.scale;\n    var pointers = ref.pointers;\n    var scaleBox = scale.box.clone();\n    var pos = scale.options.vertical ? \"y\" : \"x\";\n    var pointerBox = pointers[0].box;\n\n    for (var i = 0; i < pointers.length; i++) {\n      pointerBox.wrap(pointers[i].box.clone());\n    }\n\n    scaleBox[pos + 1] += Math.max(scaleBox[pos + 1] - pointerBox[pos + 1], 0);\n    scaleBox[pos + 2] -= Math.max(pointerBox[pos + 2] - scaleBox[pos + 2], 0);\n    scale.reflow(scaleBox);\n\n    for (var i$1 = 0; i$1 < pointers.length; i$1++) {\n      pointers[i$1].reflow(this$1.bbox);\n    }\n  };\n\n  return LinearGauge;\n}(Gauge);\n\nsetDefaultOptions(LinearGauge, {\n  transitions: true,\n  gaugeArea: {\n    background: \"\"\n  },\n  scale: {\n    vertical: true\n  }\n});\nexport default LinearGauge;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/gauges/linear/linear-gauge.js"],"names":["drawing","Box","setDefaultOptions","deepExtend","isArray","ARROW","DEFAULT_WIDTH","DEFAULT_HEIGHT","Gauge","LinearScale","ArrowLinearPointer","BarLinearPointer","DEFAULT_MIN_WIDTH","DEFAULT_MIN_HEIGHT","Group","LinearGauge","apply","arguments","__proto__","prototype","Object","create","constructor","reflow","bbox","pointers","bboxX","origin","x","bboxY","y","box","width","height","scale","_shrinkScaleWidth","i","length","_getBox","_alignElements","_shrinkElements","_buildVisual","_draw","visuals","scaleElements","render","append","gaugeArea","current","value","options","_visuals","_createModel","this$1","contextService","pointer","currentOptions","animation","transitions","pointerType","shape","push","_defaultSize","vertical","ref","boxCenter","center","plotAreaBox","clone","wrap","size","y1","y2","x1","x2","scaleBox","diff","i$1","overflow","contentBox","shrink","alignTo","pos","pointerBox","Math","max","background"],"mappings":"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","sourcesContent":["import { drawing } from '@progress/kendo-drawing';\nimport { Box } from '../../core';\nimport { setDefaultOptions, deepExtend, isArray } from '../../common';\nimport { ARROW, DEFAULT_WIDTH, DEFAULT_HEIGHT } from '../constants';\nimport Gauge from '../gauge';\nimport LinearScale from './linear-scale';\nimport ArrowLinearPointer from './arrow-linear-pointer';\nimport BarLinearPointer from './bar-linear-pointer';\n\nvar DEFAULT_MIN_WIDTH = 60;\nvar DEFAULT_MIN_HEIGHT = 60;\n\nvar Group = drawing.Group;\n\nvar LinearGauge = (function (Gauge) {\n    function LinearGauge () {\n        Gauge.apply(this, arguments);\n    }\n\n    if ( Gauge ) LinearGauge.__proto__ = Gauge;\n    LinearGauge.prototype = Object.create( Gauge && Gauge.prototype );\n    LinearGauge.prototype.constructor = LinearGauge;\n\n    LinearGauge.prototype.reflow = function reflow (bbox) {\n        var pointers = this.pointers;\n        var bboxX = bbox.origin.x;\n        var bboxY = bbox.origin.y;\n\n        var box = new Box(bboxX, bboxY, bboxX + bbox.width(), bboxY + bbox.height());\n\n        this.scale.reflow(box);\n        this._shrinkScaleWidth(box);\n\n        for (var i = 0; i < pointers.length; i++) {\n            pointers[i].reflow();\n        }\n\n        this.bbox = this._getBox(box);\n        this._alignElements();\n        this._shrinkElements();\n        this._buildVisual();\n        this._draw();\n    };\n\n    LinearGauge.prototype._buildVisual = function _buildVisual () {\n        var visuals = new Group();\n        var scaleElements = this.scale.render();\n        var pointers = this.pointers;\n\n        visuals.append(this.gaugeArea);\n        visuals.append(scaleElements);\n\n        for (var i = 0; i < pointers.length; i++) {\n            var current = pointers[i];\n            visuals.append(current.render());\n            current.value(current.options.value);\n        }\n\n        this._visuals = visuals;\n    };\n\n    LinearGauge.prototype._createModel = function _createModel () {\n        var this$1 = this;\n\n        var options = this.options;\n        var scale = this.scale = new LinearScale(options.scale, this.contextService);\n\n        this.pointers = [];\n\n        var pointers = options.pointer;\n        pointers = isArray(pointers) ? pointers : [ pointers ];\n\n        for (var i = 0; i < pointers.length; i++) {\n            var currentOptions = deepExtend({}, pointers[i], {\n                animation: {\n                    transitions: options.transitions\n                }\n            });\n            var pointerType = currentOptions.shape === ARROW ? ArrowLinearPointer : BarLinearPointer;\n\n            this$1.pointers.push(new pointerType(scale, currentOptions));\n        }\n    };\n\n    LinearGauge.prototype._defaultSize = function _defaultSize () {\n        var vertical = this.options.scale.vertical;\n\n        return {\n            width: vertical ? DEFAULT_MIN_WIDTH : DEFAULT_WIDTH,\n            height: vertical ? DEFAULT_HEIGHT : DEFAULT_MIN_HEIGHT\n        };\n    };\n\n    LinearGauge.prototype._getBox = function _getBox (box) {\n        var ref = this;\n        var scale = ref.scale;\n        var pointers = ref.pointers;\n        var boxCenter = box.center();\n        var plotAreaBox = pointers[0].box.clone().wrap(scale.box);\n\n        for (var i = 0; i < pointers.length; i++) {\n            plotAreaBox.wrap(pointers[i].box.clone());\n        }\n\n        var size;\n        if (scale.options.vertical) {\n            size = plotAreaBox.width() / 2;\n            plotAreaBox = new Box(\n                boxCenter.x - size, box.y1,\n                boxCenter.x + size, box.y2\n            );\n        } else {\n            size = plotAreaBox.height() / 2;\n            plotAreaBox = new Box(\n                box.x1, boxCenter.y - size,\n                box.x2, boxCenter.y + size\n            );\n        }\n\n        return plotAreaBox;\n    };\n\n    LinearGauge.prototype._alignElements = function _alignElements () {\n        var this$1 = this;\n\n        var ref = this;\n        var scale = ref.scale;\n        var pointers = ref.pointers;\n        var scaleBox = scale.box;\n        var box = pointers[0].box.clone().wrap(scale.box);\n        var plotAreaBox = this.bbox;\n\n        for (var i = 0; i < pointers.length; i++) {\n            box.wrap(pointers[i].box.clone());\n        }\n\n        var diff;\n        if (scale.options.vertical) {\n            diff = plotAreaBox.center().x - box.center().x;\n            scale.reflow(new Box(\n                scaleBox.x1 + diff, plotAreaBox.y1,\n                scaleBox.x2 + diff, plotAreaBox.y2\n            ));\n        } else {\n            diff = plotAreaBox.center().y - box.center().y;\n            scale.reflow(new Box(\n                scaleBox.x1, scaleBox.y1 + diff,\n                scaleBox.x2, scaleBox.y2 + diff\n            ));\n        }\n\n        for (var i$1 = 0; i$1 < pointers.length; i$1++) {\n            pointers[i$1].reflow(this$1.bbox);\n        }\n    };\n\n    LinearGauge.prototype._shrinkScaleWidth = function _shrinkScaleWidth (bbox) {\n        var ref = this;\n        var scale = ref.scale;\n        if (!scale.options.vertical) {\n            var overflow = scale.contentBox().width() - bbox.width();\n            if (overflow > 0) {\n                scale.box.shrink(overflow, 0);\n                scale.box.alignTo(bbox, 'center');\n                scale.reflow(scale.box);\n            }\n        }\n    };\n\n    LinearGauge.prototype._shrinkElements = function _shrinkElements () {\n        var this$1 = this;\n\n        var ref = this;\n        var scale = ref.scale;\n        var pointers = ref.pointers;\n        var scaleBox = scale.box.clone();\n        var pos = scale.options.vertical ? \"y\" : \"x\";\n        var pointerBox = pointers[0].box;\n\n        for (var i = 0; i < pointers.length; i++) {\n            pointerBox.wrap(pointers[i].box.clone());\n        }\n\n        scaleBox[pos + 1] += Math.max(scaleBox[pos + 1] - pointerBox[pos + 1], 0);\n        scaleBox[pos + 2] -= Math.max(pointerBox[pos + 2] - scaleBox[pos + 2], 0);\n\n        scale.reflow(scaleBox);\n\n        for (var i$1 = 0; i$1 < pointers.length; i$1++) {\n            pointers[i$1].reflow(this$1.bbox);\n        }\n    };\n\n    return LinearGauge;\n}(Gauge));\n\nsetDefaultOptions(LinearGauge, {\n    transitions: true,\n    gaugeArea: {\n        background: \"\"\n    },\n    scale: {\n        vertical: true\n    }\n});\n\nexport default LinearGauge;"]},"metadata":{},"sourceType":"module"}