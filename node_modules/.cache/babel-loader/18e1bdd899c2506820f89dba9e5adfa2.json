{"ast":null,"code":"import { COORD_PRECISION } from '../common/constants';\nimport { Class, rad, round } from '../common';\n\nvar Point = function (Class) {\n  function Point(x, y) {\n    Class.call(this);\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  if (Class) Point.__proto__ = Class;\n  Point.prototype = Object.create(Class && Class.prototype);\n  Point.prototype.constructor = Point;\n\n  Point.prototype.clone = function clone() {\n    return new Point(this.x, this.y);\n  };\n\n  Point.prototype.equals = function equals(point) {\n    return point && this.x === point.x && this.y === point.y;\n  };\n\n  Point.prototype.rotate = function rotate(center, degrees) {\n    var theta = rad(degrees);\n    var cosT = Math.cos(theta);\n    var sinT = Math.sin(theta);\n    var cx = center.x;\n    var cy = center.y;\n    var ref = this;\n    var x = ref.x;\n    var y = ref.y;\n    this.x = round(cx + (x - cx) * cosT + (y - cy) * sinT, COORD_PRECISION);\n    this.y = round(cy + (y - cy) * cosT - (x - cx) * sinT, COORD_PRECISION);\n    return this;\n  };\n\n  Point.prototype.multiply = function multiply(a) {\n    this.x *= a;\n    this.y *= a;\n    return this;\n  };\n\n  Point.prototype.distanceTo = function distanceTo(point) {\n    var dx = this.x - point.x;\n    var dy = this.y - point.y;\n    return Math.sqrt(dx * dx + dy * dy);\n  };\n\n  Point.onCircle = function onCircle(center, angle, radius) {\n    var radians = rad(angle);\n    return new Point(center.x - radius * Math.cos(radians), center.y - radius * Math.sin(radians));\n  };\n\n  return Point;\n}(Class);\n\nexport default Point;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/core/point.js"],"names":["COORD_PRECISION","Class","rad","round","Point","x","y","call","__proto__","prototype","Object","create","constructor","clone","equals","point","rotate","center","degrees","theta","cosT","Math","cos","sinT","sin","cx","cy","ref","multiply","a","distanceTo","dx","dy","sqrt","onCircle","angle","radius","radians"],"mappings":"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","sourcesContent":["import { COORD_PRECISION } from '../common/constants';\nimport { Class, rad, round } from '../common';\n\nvar Point = (function (Class) {\n    function Point(x, y) {\n        Class.call(this);\n\n        this.x = x || 0;\n        this.y = y || 0;\n    }\n\n    if ( Class ) Point.__proto__ = Class;\n    Point.prototype = Object.create( Class && Class.prototype );\n    Point.prototype.constructor = Point;\n\n    Point.prototype.clone = function clone () {\n        return new Point(this.x, this.y);\n    };\n\n    Point.prototype.equals = function equals (point) {\n        return point && this.x === point.x && this.y === point.y;\n    };\n\n    Point.prototype.rotate = function rotate (center, degrees) {\n        var theta = rad(degrees);\n        var cosT = Math.cos(theta);\n        var sinT = Math.sin(theta);\n        var cx = center.x;\n        var cy = center.y;\n        var ref = this;\n        var x = ref.x;\n        var y = ref.y;\n\n        this.x = round(\n            cx + (x - cx) * cosT + (y - cy) * sinT,\n            COORD_PRECISION\n        );\n\n        this.y = round(\n            cy + (y - cy) * cosT - (x - cx) * sinT,\n            COORD_PRECISION\n        );\n\n        return this;\n    };\n\n    Point.prototype.multiply = function multiply (a) {\n\n        this.x *= a;\n        this.y *= a;\n\n        return this;\n    };\n\n    Point.prototype.distanceTo = function distanceTo (point) {\n        var dx = this.x - point.x;\n        var dy = this.y - point.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    };\n\n    Point.onCircle = function onCircle (center, angle, radius) {\n        var radians = rad(angle);\n\n        return new Point(\n            center.x - radius * Math.cos(radians),\n            center.y - radius * Math.sin(radians)\n        );\n    };\n\n    return Point;\n}(Class));\n\n\nexport default Point;"]},"metadata":{},"sourceType":"module"}