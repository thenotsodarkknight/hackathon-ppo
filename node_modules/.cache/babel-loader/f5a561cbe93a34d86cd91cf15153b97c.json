{"ast":null,"code":"/**\n * @hidden\n */\nvar DirectionHolder =\n/** @class */\nfunction () {\n  function DirectionHolder() {\n    // The phase changes in the following sequence:\n    // NotInitialized -> Initialized -> NewValueReceived.\n    this.phase = 'Initialized';\n  }\n\n  DirectionHolder.prototype.getIsDirectionRightToLeft = function () {\n    return this.isDirectionRightToLeft;\n  };\n\n  DirectionHolder.prototype.setIsDirectionRightToLeft = function (value) {\n    this.phase = this.phase === 'NotInitialized' ? 'Initialized' : 'NewValueReceived';\n    this.previousIsDirectionRightToLeft = this.isDirectionRightToLeft;\n    this.isDirectionRightToLeft = value;\n  };\n\n  DirectionHolder.prototype.hasDirectionChanged = function () {\n    return this.phase === 'NewValueReceived' ? this.previousIsDirectionRightToLeft !== this.isDirectionRightToLeft : false;\n  };\n\n  return DirectionHolder;\n}();\n\nexport default DirectionHolder;","map":{"version":3,"sources":["../../../../src/menu/utils/DirectionHolder.ts"],"names":[],"mappings":"AAAA;;;AAGA,IAAA,eAAA;AAAA;AAAA,YAAA;AAAA,WAAA,eAAA,GAAA;AACI;AACA;AACQ,SAAA,KAAA,GAA+D,aAA/D;AAmBX;;AAfU,EAAA,eAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,YAAA;AACI,WAAO,KAAK,sBAAZ;AACH,GAFM;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,yBAAA,GAAP,UAAiC,KAAjC,EAA+C;AAC3C,SAAK,KAAL,GAAa,KAAK,KAAL,KAAe,gBAAf,GAAkC,aAAlC,GAAkD,kBAA/D;AACA,SAAK,8BAAL,GAAsC,KAAK,sBAA3C;AAEA,SAAK,sBAAL,GAA8B,KAA9B;AACH,GALM;;AAOA,EAAA,eAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,YAAA;AACI,WAAO,KAAK,KAAL,KAAe,kBAAf,GACH,KAAK,8BAAL,KAAwC,KAAK,sBAD1C,GACmE,KAD1E;AAEH,GAHM;;AAIX,SAAA,eAAA;AAAC,CAtBD,EAAA","sourceRoot":"","sourcesContent":["/**\n * @hidden\n */\nvar DirectionHolder = /** @class */ (function () {\n    function DirectionHolder() {\n        // The phase changes in the following sequence:\n        // NotInitialized -> Initialized -> NewValueReceived.\n        this.phase = 'Initialized';\n    }\n    DirectionHolder.prototype.getIsDirectionRightToLeft = function () {\n        return this.isDirectionRightToLeft;\n    };\n    DirectionHolder.prototype.setIsDirectionRightToLeft = function (value) {\n        this.phase = this.phase === 'NotInitialized' ? 'Initialized' : 'NewValueReceived';\n        this.previousIsDirectionRightToLeft = this.isDirectionRightToLeft;\n        this.isDirectionRightToLeft = value;\n    };\n    DirectionHolder.prototype.hasDirectionChanged = function () {\n        return this.phase === 'NewValueReceived' ?\n            this.previousIsDirectionRightToLeft !== this.isDirectionRightToLeft : false;\n    };\n    return DirectionHolder;\n}());\nexport default DirectionHolder;\n//# sourceMappingURL=DirectionHolder.js.map"]},"metadata":{},"sourceType":"module"}