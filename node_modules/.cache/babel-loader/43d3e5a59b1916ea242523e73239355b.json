{"ast":null,"code":"import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { deepExtend, defined } from '../../common';\nimport { X, Y } from '../../common/constants';\nimport LinearPointer from './linear-pointer';\nimport BarLinearPointerAnimation from './bar-linear-pointer-animation';\nvar Group = drawing.Group;\nvar Path = drawing.Path;\n\nvar BarLinearPointer = function (LinearPointer) {\n  function BarLinearPointer(scale, options) {\n    LinearPointer.call(this, scale, options);\n\n    if (!defined(this.options.size)) {\n      this.options.size = this.scale.options.majorTicks.size * 0.3;\n    }\n  }\n\n  if (LinearPointer) BarLinearPointer.__proto__ = LinearPointer;\n  BarLinearPointer.prototype = Object.create(LinearPointer && LinearPointer.prototype);\n  BarLinearPointer.prototype.constructor = BarLinearPointer;\n\n  BarLinearPointer.prototype.pointerShape = function pointerShape(value) {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var ref$1 = scale.options;\n    var mirror = ref$1.mirror;\n    var vertical = ref$1.vertical;\n    var dir = mirror === vertical ? -1 : 1;\n    var size = options.size * dir;\n    var minSlot = scale.getSlot(scale.options.min);\n    var slot = scale.getSlot(value);\n    var axis = vertical ? Y : X;\n    var sizeAxis = vertical ? X : Y;\n    var margin = this._margin() * dir;\n    var p1 = new geo.Point();\n    p1[axis] = minSlot[axis + \"1\"];\n    p1[sizeAxis] = minSlot[sizeAxis + \"1\"];\n    var p2 = new geo.Point();\n    p2[axis] = slot[axis + \"1\"];\n    p2[sizeAxis] = slot[sizeAxis + \"1\"];\n\n    if (vertical) {\n      p1.translate(margin, 0);\n      p2.translate(margin, 0);\n    } else {\n      p1.translate(0, margin);\n      p2.translate(0, margin);\n    }\n\n    var p3 = p2.clone();\n    var p4 = p1.clone();\n\n    if (vertical) {\n      p3.translate(size, 0);\n      p4.translate(size, 0);\n    } else {\n      p3.translate(0, size);\n      p4.translate(0, size);\n    }\n\n    return [p1, p2, p3, p4];\n  };\n\n  BarLinearPointer.prototype.repaint = function repaint() {\n    var ref = this;\n    var scale = ref.scale;\n    var options = ref.options;\n    var shape = this.pointerShape(options.value);\n    var pointerPath = this.pointerPath;\n    var oldShape = this.pointerShape(options._oldValue);\n    pointerPath.moveTo(shape[0]).lineTo(shape[1]).lineTo(shape[2]).lineTo(shape[3]).close();\n    var animation = new BarLinearPointerAnimation(pointerPath, deepExtend(options.animation, {\n      reverse: scale.options.reverse,\n      vertical: scale.options.vertical,\n      oldPoints: [oldShape[1], oldShape[2]],\n      newPoints: [shape[1], shape[2]]\n    }));\n\n    if (options.animation.transitions === false) {\n      animation.options.duration = 0;\n    }\n\n    animation.setup();\n    animation.play();\n  };\n\n  BarLinearPointer.prototype.render = function render() {\n    var group = new Group();\n    var elementOptions = this.getElementOptions();\n\n    if (this.options.track.visible) {\n      group.append(this.renderTrack());\n    }\n\n    var pointer = this.pointerPath = new Path({\n      stroke: elementOptions.stroke,\n      fill: elementOptions.fill\n    });\n    group.append(pointer);\n    this.elements = group;\n    return group;\n  };\n\n  BarLinearPointer.prototype.renderTrack = function renderTrack() {\n    var trackOptions = this.options.track;\n    var border = trackOptions.border || {};\n    var trackBox = this.trackBox.clone().pad(border.width || 0);\n    return new Path.fromRect(trackBox.toRect(), {\n      fill: {\n        color: trackOptions.color,\n        opacity: trackOptions.opacity\n      },\n      stroke: {\n        color: border.width ? border.color || trackOptions.color : \"\",\n        width: border.width,\n        dashType: border.dashType\n      }\n    });\n  };\n\n  return BarLinearPointer;\n}(LinearPointer);\n\nexport default BarLinearPointer;","map":{"version":3,"sources":["/Users/lazybaccha/Documents/Honeywell/SBE/node_modules/@progress/kendo-charts/dist/es/gauges/linear/bar-linear-pointer.js"],"names":["geometry","geo","drawing","deepExtend","defined","X","Y","LinearPointer","BarLinearPointerAnimation","Group","Path","BarLinearPointer","scale","options","call","size","majorTicks","__proto__","prototype","Object","create","constructor","pointerShape","value","ref","ref$1","mirror","vertical","dir","minSlot","getSlot","min","slot","axis","sizeAxis","margin","_margin","p1","Point","p2","translate","p3","clone","p4","repaint","shape","pointerPath","oldShape","_oldValue","moveTo","lineTo","close","animation","reverse","oldPoints","newPoints","transitions","duration","setup","play","render","group","elementOptions","getElementOptions","track","visible","append","renderTrack","pointer","stroke","fill","elements","trackOptions","border","trackBox","pad","width","fromRect","toRect","color","opacity","dashType"],"mappings":"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","sourcesContent":["import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { deepExtend, defined } from '../../common';\nimport { X, Y } from '../../common/constants';\nimport LinearPointer from './linear-pointer';\nimport BarLinearPointerAnimation from './bar-linear-pointer-animation';\n\nvar Group = drawing.Group;\nvar Path = drawing.Path;\n\nvar BarLinearPointer = (function (LinearPointer) {\n    function BarLinearPointer(scale, options) {\n        LinearPointer.call(this, scale, options);\n\n        if (!defined(this.options.size)) {\n            this.options.size = this.scale.options.majorTicks.size * 0.3;\n        }\n    }\n\n    if ( LinearPointer ) BarLinearPointer.__proto__ = LinearPointer;\n    BarLinearPointer.prototype = Object.create( LinearPointer && LinearPointer.prototype );\n    BarLinearPointer.prototype.constructor = BarLinearPointer;\n\n    BarLinearPointer.prototype.pointerShape = function pointerShape (value) {\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n        var ref$1 = scale.options;\n        var mirror = ref$1.mirror;\n        var vertical = ref$1.vertical;\n        var dir = mirror === vertical ? -1 : 1;\n        var size = options.size * dir;\n        var minSlot = scale.getSlot(scale.options.min);\n        var slot = scale.getSlot(value);\n        var axis = vertical ? Y : X;\n        var sizeAxis = vertical ? X : Y;\n        var margin = this._margin() * dir;\n\n        var p1 = new geo.Point();\n        p1[axis] = minSlot[axis + \"1\"];\n        p1[sizeAxis] = minSlot[sizeAxis + \"1\"];\n\n        var p2 = new geo.Point();\n        p2[axis] = slot[axis + \"1\"];\n        p2[sizeAxis] = slot[sizeAxis + \"1\"];\n\n        if (vertical) {\n            p1.translate(margin, 0);\n            p2.translate(margin, 0);\n        } else {\n            p1.translate(0, margin);\n            p2.translate(0, margin);\n        }\n\n        var p3 = p2.clone();\n        var p4 = p1.clone();\n\n        if (vertical) {\n            p3.translate(size, 0);\n            p4.translate(size, 0);\n        } else {\n            p3.translate(0, size);\n            p4.translate(0, size);\n        }\n\n        return [ p1, p2, p3, p4 ];\n    };\n\n    BarLinearPointer.prototype.repaint = function repaint () {\n        var ref = this;\n        var scale = ref.scale;\n        var options = ref.options;\n        var shape = this.pointerShape(options.value);\n        var pointerPath = this.pointerPath;\n        var oldShape = this.pointerShape(options._oldValue);\n\n        pointerPath.moveTo(shape[0]).lineTo(shape[1]).lineTo(shape[2]).lineTo(shape[3]).close();\n\n        var animation = new BarLinearPointerAnimation(pointerPath, deepExtend(options.animation, {\n            reverse: scale.options.reverse,\n            vertical: scale.options.vertical,\n            oldPoints: [ oldShape[1], oldShape[2] ],\n            newPoints: [ shape[1], shape[2] ]\n        }));\n\n        if (options.animation.transitions === false) {\n            animation.options.duration = 0;\n        }\n\n        animation.setup();\n        animation.play();\n    };\n\n    BarLinearPointer.prototype.render = function render () {\n        var group = new Group();\n        var elementOptions = this.getElementOptions();\n\n        if (this.options.track.visible) {\n            group.append(this.renderTrack());\n        }\n\n        var pointer = this.pointerPath = new Path({\n            stroke: elementOptions.stroke,\n            fill: elementOptions.fill\n        });\n\n        group.append(pointer);\n\n        this.elements = group;\n\n        return group;\n    };\n\n    BarLinearPointer.prototype.renderTrack = function renderTrack () {\n        var trackOptions = this.options.track;\n        var border = trackOptions.border || {};\n        var trackBox = this.trackBox.clone().pad(border.width || 0);\n\n        return new Path.fromRect(trackBox.toRect(), {\n            fill: {\n                color: trackOptions.color,\n                opacity: trackOptions.opacity\n            },\n            stroke: {\n                color: border.width ? border.color || trackOptions.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            }\n        });\n    };\n\n    return BarLinearPointer;\n}(LinearPointer));\n\nexport default BarLinearPointer;"]},"metadata":{},"sourceType":"module"}