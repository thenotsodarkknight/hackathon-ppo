/// <reference types="react" />
import { RadioButtonProps } from './RadioButtonProps';
import { RadioGroupFocusEvent } from './RadioGroupFocusEvent';
import { RadioGroupChangeEvent } from './RadioGroupChangeEvent';
/**
 * Represents the props of the [KendoReact RadioGroup component]({% slug overview_radio %}).
 */
export interface RadioGroupProps {
    /**
     * Identifies the element or elements which will describe the component.
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element or elements which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Sets the RadioGroup children.
     */
    children?: React.ReactNode;
    /**
     * Specifies a list of CSS classes that will be added to the RadioGroup element.
     */
    className?: string;
    /**
     * The collection of radio buttons that will be rendered in the RadioGroup ([see example]({% slug overview_radio %})).
     */
    data?: Array<RadioButtonProps>;
    /**
     * Sets the default checked state of a radio button when used in uncontrolled mode ([see example]({% slug overview_radio %})).
     * The `checked` property is passed to the underlying `input` element.
     */
    defaultValue?: any;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Disable all radio buttons ([see example]({% slug disabled_radio %})).
     */
    disabled?: boolean;
    /**
     * Overrides the default item. Specifying the `item` property of a specific view will override this property.
     * The default component is: [RadioButton]({% slug api_inputs_radiobutton %})
     */
    item?: React.ComponentType<RadioButtonProps>;
    /**
     * Sets the label position of the radio buttons.
     * Accepts two options: `before` or `after`. Defaults to `after`.
     */
    labelPlacement?: string;
    /**
     * Specifies the radio group layout.
     */
    layout?: 'horizontal' | 'vertical';
    /**
     * Specifies the `name` property of the `input` DOM elements.
     */
    name?: string;
    /**
     * The event handler that will be fired when the changes the selected value.
     */
    onChange?: (event: RadioGroupChangeEvent) => void;
    /**
     * The event handler that will be fired when Radio button is focused.
     */
    onFocus?: (event: RadioGroupFocusEvent) => void;
    /**
     * Sets additional CSS styles to the radio group.
     */
    style?: React.CSSProperties;
    /**
     * Sets the default checked state of a radio button when used in controlled mode ([see example]({% slug controlled_radio %})).
     * The `checked` property is passed to the underlying `input` element.
     */
    value?: string | number | null;
}
